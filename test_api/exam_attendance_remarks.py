import requests
import json
import time
import sys
import codecs
from datetime import datetime, timedelta

# S·ª≠a l·ªói UnicodeEncodeError tr√™n Windows Console
# Bu·ªôc stdout s·ª≠ d·ª•ng m√£ h√≥a UTF-8
sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer)

# --- C·∫§U H√åNH ---
# TODO: THAY ƒê·ªîI GI√Å TR·ªä N√ÄY th√†nh URL m√°y ch·ªß c·ªßa b·∫°n
BASE_URL = "http://localhost:8080"
USERNAME = "dop001"
PASSWORD = "12345678"
# ----------------

# Bi·∫øn to√†n c·ª•c
access_token = None
report_data = []


# --- C√°c h√†m tr·ª£ gi√∫p (Helpers) ---
def print_success(message):
    """In th√¥ng b√°o th√†nh c√¥ng (m√†u xanh l√°)."""
    print(f"\033[92m[TH√ÄNH C√îNG] {message}\033[0m")


def print_error(message, data=None):
    """In th√¥ng b√°o l·ªói (m√†u ƒë·ªè)."""
    print(f"\033[91m[L·ªñI] {message}\033[0m")
    if data:
        # ƒê·∫£m b·∫£o in JSON ti·∫øng Vi·ªát ƒë√∫ng
        print(f"\033[91m      {json.dumps(data, indent=2, ensure_ascii=False)}\033[0m")


def print_info(message):
    """In th√¥ng b√°o th√¥ng tin (m√†u xanh d∆∞∆°ng)."""
    print(f"\033[94m[TH√îNG TIN] {message}\033[0m")


def log_api_call(method, url, request_payload, response_status, response_body):
    """L∆∞u tr·ªØ chi ti·∫øt cu·ªôc g·ªçi API ƒë·ªÉ t·∫°o b√°o c√°o."""
    report_data.append(
        {
            "method": method,
            "url": url,
            "request_payload": request_payload,
            "response_status": response_status,
            "response_body": response_body,
        }
    )


def generate_markdown_report(filename="api_test_report_exam_attendance_remarks.md"):
    """T·∫°o t·ªáp Markdown t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u tr·ªØ."""
    print_info(f"ƒêang t·∫°o b√°o c√°o Markdown: {filename}")
    try:
        with open(filename, "w", encoding="utf-8") as f:
            f.write(
                f"# B√°o c√°o Ki·ªÉm th·ª≠ API - Exam Attendance Remarks ({time.strftime('%Y-%m-%d %H:%M:%S')})\n\n"
            )

            for i, call in enumerate(report_data):
                f.write(f"## {i + 1}. {call['method']} {call['url']}\n\n")
                f.write(f"**Tr·∫°ng th√°i Ph·∫£n h·ªìi:** `{call['response_status']}`\n\n")

                if call["request_payload"]:
                    f.write("**Request Payload (N·ªôi dung G·ª≠i ƒëi):**\n")
                    f.write("```json\n")
                    f.write(
                        json.dumps(
                            call["request_payload"], indent=2, ensure_ascii=False
                        )
                    )
                    f.write("\n```\n\n")

                if call["response_body"]:
                    f.write("**Response Body (N·ªôi dung Nh·∫≠n v·ªÅ):**\n")
                    f.write("```json\n")
                    f.write(
                        json.dumps(call["response_body"], indent=2, ensure_ascii=False)
                    )
                    f.write("\n```\n\n")

                f.write("---\n\n")
        print_success(f"T·∫°o b√°o c√°o {filename} th√†nh c√¥ng.")
    except Exception as e:
        print_error(f"Kh√¥ng th·ªÉ ghi t·ªáp b√°o c√°o: {e}")


def get_auth_headers():
    """Tr·∫£ v·ªÅ headers 'Authorization' ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng."""
    if not access_token:
        print_error("Ch∆∞a ƒëƒÉng nh·∫≠p. Kh√¥ng th·ªÉ l·∫•y headers.")
        return None
    return {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
    }


# --- C√°c h√†m Ki·ªÉm th·ª≠ (Test Functions) ---


def test_login():
    """1. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Access Token."""
    global access_token
    print_info("ƒêang th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi user: " + USERNAME)
    url = f"{BASE_URL}/api/v1/auth/login"
    payload = {"username": USERNAME, "password": PASSWORD}
    response_data = None
    status_code = 0
    try:
        response = requests.post(url, json=payload)
        status_code = response.status_code
        response_data = response.json()

        if response.status_code == 200:
            access_token = response_data.get("accessToken")
            if access_token:
                print_success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng. ƒê√£ l·∫•y Access Token.")
                log_api_call("POST", url, payload, status_code, response_data)
                return True
            else:
                print_error(
                    "ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng t√¨m th·∫•y 'accessToken'.",
                    response_data,
                )
                log_api_call("POST", url, payload, status_code, response_data)
                return False
        else:
            print_error(
                f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}",
                response_data,
            )
            log_api_call("POST", url, payload, status_code, response_data)
            return False

    except requests.exceptions.ConnectionError:
        print_error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {BASE_URL}. H√£y ƒë·∫£m b·∫£o m√°y ch·ªß ƒëang ch·∫°y.")
        log_api_call("POST", url, payload, 503, {"error": "ConnectionError"})
        return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒëƒÉng nh·∫≠p: {e}")
        log_api_call("POST", url, payload, 500, {"error": str(e)})
        return False


def get_exam_attendance_id():
    """L·∫•y m·ªôt exam attendance ID ƒë·ªÉ test."""
    print_info("ƒêang l·∫•y m·ªôt exam attendance ID ƒë·ªÉ test remarks...")
    headers = get_auth_headers()
    if not headers:
        return None

    # Strategy 1: Try to get exam attendance records directly
    print_info("  C√°ch 1: Truy v·∫•n tr·ª±c ti·∫øp exam-attendance endpoint...")
    url = f"{BASE_URL}/api/v1/exam-attendance?pageSize=1"
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            items = response.json().get("data", {}).get("items", [])
            if items:
                exam_id = items[0].get("id")
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID: {exam_id}")
                return exam_id
            else:
                print_info("  ‚Üí Kh√¥ng t√¨m th·∫•y exam attendance records")
        else:
            print_info(f"  ‚Üí API tr·∫£ v·ªÅ status {response.status_code}")
    except Exception as e:
        print_error(f"  ‚Üí L·ªói: {e}")

    # Strategy 2: Try to get via finalized slots
    print_info("  C√°ch 2: T√¨m ki·∫øm qua finalized LECTURE_WITH_PT slots...")
    try:
        # Note: We would need a slots API endpoint to check this
        # For now, we'll try with a different filter if available
        url_with_filter = f"{BASE_URL}/api/v1/exam-attendance?pageSize=10&status=present"
        response = requests.get(url_with_filter, headers=headers)
        if response.status_code == 200:
            items = response.json().get("data", {}).get("items", [])
            if items:
                exam_id = items[0].get("id")
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID (filtered): {exam_id}")
                return exam_id
    except Exception as e:
        print_info(f"  ‚Üí Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu v·ªõi filter: {e}")

    # Strategy 3: Check if we can query by a past date range
    print_info("  C√°ch 3: Th·ª≠ t√¨m ki·∫øm v·ªõi kho·∫£ng th·ªùi gian trong qu√° kh·ª©...")
    try:
        past_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        today = datetime.now().strftime('%Y-%m-%d')
        url_date_range = f"{BASE_URL}/api/v1/exam-attendance?pageSize=10&startDate={past_date}&endDate={today}"
        response = requests.get(url_date_range, headers=headers)
        if response.status_code == 200:
            items = response.json().get("data", {}).get("items", [])
            if items:
                exam_id = items[0].get("id")
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID (date range): {exam_id}")
                return exam_id
    except Exception as e:
        print_info(f"  ‚Üí Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu v·ªõi date range: {e}")

    # No data found
    print_error("‚ö†Ô∏è  KH√îNG T√åM TH·∫§Y EXAM ATTENDANCE RECORDS!")
    print_info("üìù L∆∞u √Ω: C·∫ßn kh·ªüi t·∫°o database v·ªõi d·ªØ li·ªáu test:")
    print_info("   - Ch·∫°y script: docs/db.sql")
    print_info("   - Ho·∫∑c t·∫°o slots v·ªõi category LECTURE_WITH_PT v√† finalize ch√∫ng")
    print_info("   - Exam attendance ch·ªâ ƒë∆∞·ª£c t·∫°o cho finalized LECTURE_WITH_PT slots")
    return None


def test_create_remark(exam_attendance_id):
    """2. Ki·ªÉm th·ª≠ POST /api/v1/exam-attendance/{examAttendanceId}/remarks (T·∫°o remark)"""
    print_info(f"ƒêang th·ª≠ t·∫°o remark cho exam attendance ID: {exam_attendance_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}/remarks"
    headers = get_auth_headers()
    if not headers:
        return None

    payload = {
        "remark": "Student arrived late but was allowed to take the exam - Test remark creation"
    }

    response_data = None
    status_code = 0
    remark_id = None
    try:
        response = requests.post(url, headers=headers, json=payload)
        status_code = response.status_code
        response_data = response.json()

        if response.status_code == 201:
            remark_id = response_data.get("data", {}).get("id")
            print_success(f"T·∫°o remark th√†nh c√¥ng. Remark ID: {remark_id}")
            return remark_id
        else:
            print_error(
                f"T·∫°o remark th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}",
                response_data,
            )
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o remark: {e}")
        status_code = 500
        response_data = {"error": str(e)}
    finally:
        log_api_call("POST", url, payload, status_code, response_data)

    return None


def test_get_remarks(exam_attendance_id):
    """3. Ki·ªÉm th·ª≠ GET /api/v1/exam-attendance/{examAttendanceId}/remarks (L·∫•y danh s√°ch remarks)"""
    print_info(f"ƒêang th·ª≠ l·∫•y danh s√°ch remarks cho exam attendance ID: {exam_attendance_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}/remarks"
    headers = get_auth_headers()
    if not headers:
        return

    response_data = None
    status_code = 0
    try:
        response = requests.get(url, headers=headers)
        status_code = response.status_code
        response_data = response.json()

        if response.status_code == 200:
            items = response_data.get("data", {}).get("items", [])
            count = len(items)
            print_success(
                f"L·∫•y danh s√°ch remarks th√†nh c√¥ng. T√¨m th·∫•y: {count} remarks."
            )
        else:
            print_error(
                f"L·∫•y danh s√°ch remarks th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}",
                response_data,
            )
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y danh s√°ch remarks: {e}")
        status_code = 500
        response_data = {"error": str(e)}
    finally:
        log_api_call("GET", url, None, status_code, response_data)


def test_update_remark(remark_id):
    """4. Ki·ªÉm th·ª≠ PUT /api/v1/exam-attendance/remarks/{remarkId} (C·∫≠p nh·∫≠t remark)"""
    print_info(f"ƒêang th·ª≠ c·∫≠p nh·∫≠t remark ID: {remark_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/remarks/{remark_id}"
    headers = get_auth_headers()
    if not headers:
        return

    payload = {
        "remark": "Student arrived 20 minutes late (updated) - Test remark update"
    }

    response_data = None
    status_code = 0
    try:
        response = requests.put(url, headers=headers, json=payload)
        status_code = response.status_code
        response_data = response.json()

        if response.status_code == 200:
            print_success(f"C·∫≠p nh·∫≠t remark {remark_id} th√†nh c√¥ng.")
        else:
            print_error(
                f"C·∫≠p nh·∫≠t remark {remark_id} th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}",
                response_data,
            )
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t remark {remark_id}: {e}")
        status_code = 500
        response_data = {"error": str(e)}
    finally:
        log_api_call("PUT", url, payload, status_code, response_data)


def test_delete_remark(remark_id):
    """5. Ki·ªÉm th·ª≠ DELETE /api/v1/exam-attendance/remarks/{remarkId} (X√≥a remark)"""
    print_info(f"ƒêang th·ª≠ x√≥a remark ID: {remark_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/remarks/{remark_id}"
    headers = get_auth_headers()
    if not headers:
        return

    response_data = None
    status_code = 0
    try:
        response = requests.delete(url, headers=headers)
        status_code = response.status_code
        try:
            response_data = response.json()
        except json.JSONDecodeError:
            response_data = {"raw_response": response.text}

        if response.status_code == 200:
            print_success(f"X√≥a remark {remark_id} th√†nh c√¥ng.")
        else:
            print_error(
                f"X√≥a remark {remark_id} th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}",
                response_data,
            )
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√≥a remark {remark_id}: {e}")
        status_code = 500
        response_data = {"error": str(e)}
    finally:
        log_api_call("DELETE", url, None, status_code, response_data)


# --- B·∫Øt ƒë·∫ßu c√°c h√†m ki·ªÉm th·ª≠ l·ªói ---


def test_create_remark_errors():
    """6. Ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p l·ªói c·ªßa POST /api/v1/exam-attendance/{examAttendanceId}/remarks"""
    print_info("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p T·∫†O REMARK L·ªñI (d·ª± ki·∫øn 400/404)")
    headers = get_auth_headers()
    if not headers:
        return

    # Get a valid exam attendance ID
    exam_attendance_id = get_exam_attendance_id()
    if not exam_attendance_id:
        print_error("Kh√¥ng th·ªÉ l·∫•y exam attendance ID. B·ªè qua test l·ªói.")
        return

    test_cases = [
        (
            "Remark r·ªóng (REMARK_REQUIRED)",
            f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}/remarks",
            {},
            400,
        ),
        (
            "Remark l√† chu·ªói tr·ªëng (REMARK_CANNOT_BE_EMPTY)",
            f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}/remarks",
            {"remark": ""},
            400,
        ),
        (
            "Remark l√† chu·ªói ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng (REMARK_CANNOT_BE_EMPTY)",
            f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}/remarks",
            {"remark": "   "},
            400,
        ),
        (
            "Exam attendance kh√¥ng t·ªìn t·∫°i (EXAM_ATTENDANCE_NOT_FOUND)",
            f"{BASE_URL}/api/v1/exam-attendance/999999999/remarks",
            {"remark": "Test remark"},
            404,
        ),
        (
            "Exam attendance ID sai ƒë·ªãnh d·∫°ng (INVALID_FIELD_TYPE)",
            f"{BASE_URL}/api/v1/exam-attendance/abc/remarks",
            {"remark": "Test remark"},
            400,
        ),
    ]

    for description, url, payload, expected_status in test_cases:
        print_info(f"ƒêang th·ª≠ l·ªói: {description}")
        response_data = None
        status_code = 0
        try:
            response = requests.post(url, headers=headers, json=payload)
            status_code = response.status_code
            try:
                response_data = response.json()
            except json.JSONDecodeError:
                response_data = {"raw_response": response.text}

            if response.status_code == expected_status:
                print_success(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' th√†nh c√¥ng. Nh·∫≠n m√£ tr·∫°ng th√°i: {status_code}"
                )
            else:
                print_error(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' TH·∫§T B·∫†I. D·ª± ki·∫øn {expected_status} nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {status_code}",
                    response_data,
                )
        except Exception as e:
            print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm th·ª≠ '{description}': {e}")
            status_code = 500
            response_data = {"error": str(e)}
        finally:
            log_api_call("POST", url, payload, status_code, response_data)


def test_get_remarks_errors():
    """7. Ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p l·ªói c·ªßa GET /api/v1/exam-attendance/{examAttendanceId}/remarks"""
    print_info("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p L·∫§Y REMARKS L·ªñI (d·ª± ki·∫øn 400/404)")
    headers = get_auth_headers()
    if not headers:
        return

    test_cases = [
        (
            "Exam attendance kh√¥ng t·ªìn t·∫°i (EXAM_ATTENDANCE_NOT_FOUND)",
            f"{BASE_URL}/api/v1/exam-attendance/999999999/remarks",
            404,
        ),
        (
            "Exam attendance ID sai ƒë·ªãnh d·∫°ng (INVALID_FIELD_TYPE)",
            f"{BASE_URL}/api/v1/exam-attendance/abc/remarks",
            400,
        ),
        (
            "Page √¢m (INVALID_PAGE)",
            f"{BASE_URL}/api/v1/exam-attendance/1/remarks?page=-1",
            400,
        ),
    ]

    for description, url, expected_status in test_cases:
        print_info(f"ƒêang th·ª≠ l·ªói: {description}")
        response_data = None
        status_code = 0
        try:
            response = requests.get(url, headers=headers)
            status_code = response.status_code
            try:
                response_data = response.json()
            except json.JSONDecodeError:
                response_data = {"raw_response": response.text}

            if response.status_code == expected_status:
                print_success(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' th√†nh c√¥ng. Nh·∫≠n m√£ tr·∫°ng th√°i: {status_code}"
                )
            else:
                print_error(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' TH·∫§T B·∫†I. D·ª± ki·∫øn {expected_status} nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {status_code}",
                    response_data,
                )
        except Exception as e:
            print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm th·ª≠ '{description}': {e}")
            status_code = 500
            response_data = {"error": str(e)}
        finally:
            log_api_call("GET", url, None, status_code, response_data)


def test_update_remark_errors():
    """8. Ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p l·ªói c·ªßa PUT /api/v1/exam-attendance/remarks/{remarkId}"""
    print_info("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p C·∫¨P NH·∫¨T REMARK L·ªñI (d·ª± ki·∫øn 400/404)")
    headers = get_auth_headers()
    if not headers:
        return

    test_cases = [
        (
            "Remark r·ªóng (REMARK_REQUIRED)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/1",
            {},
            400,
        ),
        (
            "Remark l√† chu·ªói tr·ªëng (REMARK_CANNOT_BE_EMPTY)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/1",
            {"remark": ""},
            400,
        ),
        (
            "Remark ID kh√¥ng t·ªìn t·∫°i (REMARK_NOT_FOUND)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/999999999",
            {"remark": "Test remark"},
            404,
        ),
        (
            "Remark ID sai ƒë·ªãnh d·∫°ng (INVALID_FIELD_TYPE)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/abc",
            {"remark": "Test remark"},
            400,
        ),
    ]

    for description, url, payload, expected_status in test_cases:
        print_info(f"ƒêang th·ª≠ l·ªói: {description}")
        response_data = None
        status_code = 0
        try:
            response = requests.put(url, headers=headers, json=payload)
            status_code = response.status_code
            try:
                response_data = response.json()
            except json.JSONDecodeError:
                response_data = {"raw_response": response.text}

            if response.status_code == expected_status:
                print_success(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' th√†nh c√¥ng. Nh·∫≠n m√£ tr·∫°ng th√°i: {status_code}"
                )
            else:
                print_error(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' TH·∫§T B·∫†I. D·ª± ki·∫øn {expected_status} nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {status_code}",
                    response_data,
                )
        except Exception as e:
            print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm th·ª≠ '{description}': {e}")
            status_code = 500
            response_data = {"error": str(e)}
        finally:
            log_api_call("PUT", url, payload, status_code, response_data)


def test_delete_remark_errors():
    """9. Ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p l·ªói c·ªßa DELETE /api/v1/exam-attendance/remarks/{remarkId}"""
    print_info("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ c√°c tr∆∞·ªùng h·ª£p X√ìA REMARK L·ªñI (d·ª± ki·∫øn 400/404)")
    headers = get_auth_headers()
    if not headers:
        return

    test_cases = [
        (
            "Remark ID kh√¥ng t·ªìn t·∫°i (REMARK_NOT_FOUND)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/999999999",
            404,
        ),
        (
            "Remark ID sai ƒë·ªãnh d·∫°ng (INVALID_FIELD_TYPE)",
            f"{BASE_URL}/api/v1/exam-attendance/remarks/abc",
            400,
        ),
    ]

    for description, url, expected_status in test_cases:
        print_info(f"ƒêang th·ª≠ l·ªói: {description}")
        response_data = None
        status_code = 0
        try:
            response = requests.delete(url, headers=headers)
            status_code = response.status_code
            try:
                response_data = response.json()
            except json.JSONDecodeError:
                response_data = {"raw_response": response.text}

            if response.status_code == expected_status:
                print_success(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' th√†nh c√¥ng. Nh·∫≠n m√£ tr·∫°ng th√°i: {status_code}"
                )
            else:
                print_error(
                    f"Ki·ªÉm th·ª≠ l·ªói '{description}' TH·∫§T B·∫†I. D·ª± ki·∫øn {expected_status} nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {status_code}",
                    response_data,
                )
        except Exception as e:
            print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm th·ª≠ '{description}': {e}")
            status_code = 500
            response_data = {"error": str(e)}
        finally:
            log_api_call("DELETE", url, None, status_code, response_data)


# --- H√†m ch√≠nh (Main) ---


def main():
    """Ch·∫°y chu tr√¨nh ki·ªÉm th·ª≠."""

    # 1. ƒêƒÉng nh·∫≠p
    if not test_login():
        print_error("Kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu kh√¥ng ƒëƒÉng nh·∫≠p. ƒêang tho√°t.")
        generate_markdown_report()
        return

    print("=" * 30)

    # 2. Ch·∫°y chu tr√¨nh "Happy Path"
    print_info("B·∫Øt ƒë·∫ßu ch·∫°y lu·ªìng ki·ªÉm th·ª≠ 'Happy Path'")

    # Get an exam attendance ID
    exam_attendance_id = get_exam_attendance_id()

    if exam_attendance_id:
        print("-" * 30)
        # Create a remark
        remark_id = test_create_remark(exam_attendance_id)

        if remark_id:
            print("-" * 30)
            # Get remarks for the exam attendance
            test_get_remarks(exam_attendance_id)

            print("-" * 30)
            # Update the remark
            test_update_remark(remark_id)

            print("-" * 30)
            # Get remarks again to verify update
            test_get_remarks(exam_attendance_id)

            print("-" * 30)
            # Delete the remark
            test_delete_remark(remark_id)

            print("-" * 30)
            # Get remarks again to verify deletion
            test_get_remarks(exam_attendance_id)
        else:
            print_error("Kh√¥ng th·ªÉ t·∫°o remark. B·ªè qua c√°c b√†i ki·ªÉm th·ª≠ 'Happy Path'.")
    else:
        print_error(
            "Kh√¥ng c√≥ exam attendance records ƒë·ªÉ test. B·ªè qua c√°c b√†i ki·ªÉm th·ª≠ 'Happy Path'."
        )

    print("=" * 30)

    # 3. Ch·∫°y c√°c b√†i ki·ªÉm th·ª≠ l·ªói
    print_info("B·∫Øt ƒë·∫ßu ch·∫°y c√°c b√†i ki·ªÉm th·ª≠ l·ªói (Error Cases)")
    test_create_remark_errors()
    print("-" * 30)
    test_get_remarks_errors()
    print("-" * 30)
    test_update_remark_errors()
    print("-" * 30)
    test_delete_remark_errors()

    print("=" * 30)

    print_info("T·∫•t c·∫£ c√°c b√†i ki·ªÉm th·ª≠ ƒë√£ ho√†n t·∫•t.")

    # 4. T·∫†O B√ÅO C√ÅO
    generate_markdown_report()


if __name__ == "__main__":
    main()
