import requests
import json
import time
import sys
import codecs
from datetime import datetime, timedelta

# S·ª≠a l·ªói UnicodeEncodeError tr√™n Windows Console
# Bu·ªôc stdout s·ª≠ d·ª•ng m√£ h√≥a UTF-8
sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer)

# --- C·∫§U H√åNH ---
BASE_URL = "http://localhost:8080"
OUTPUT_FILE = "api_test_report_exam_attendance.md"
USERNAME = "dop001"
PASSWORD = "12345678"
# ----------------

# Bi·∫øn to√†n c·ª•c
access_token = None
test_results = []


# --- C√°c h√†m tr·ª£ gi√∫p (Helpers) ---
def print_success(message):
    """In th√¥ng b√°o th√†nh c√¥ng (m√†u xanh l√°)."""
    print(f"\033[92m[TH√ÄNH C√îNG] {message}\033[0m")


def print_error(message, data=None):
    """In th√¥ng b√°o l·ªói (m√†u ƒë·ªè)."""
    print(f"\033[91m[L·ªñI] {message}\033[0m")
    if data:
        print(f"\033[91m      {json.dumps(data, indent=2, ensure_ascii=False)}\033[0m")


def print_info(message):
    """In th√¥ng b√°o th√¥ng tin (m√†u xanh d∆∞∆°ng)."""
    print(f"\033[94m[TH√îNG TIN] {message}\033[0m")


def add_test_result(test_name, method, url, status_code, request_body=None, response_body=None, params=None):
    """L∆∞u tr·ªØ chi ti·∫øt cu·ªôc g·ªçi API ƒë·ªÉ t·∫°o b√°o c√°o."""
    test_results.append({
        'test_name': test_name,
        'method': method,
        'url': url,
        'status_code': status_code,
        'request_body': request_body,
        'response_body': response_body,
        'params': params
    })


def generate_markdown_report():
    """T·∫°o t·ªáp Markdown t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u tr·ªØ."""
    print_info(f"ƒêang t·∫°o b√°o c√°o Markdown: {OUTPUT_FILE}")
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write(f"# B√°o c√°o Ki·ªÉm th·ª≠ API - Exam Attendance ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n\n")

            for idx, result in enumerate(test_results, 1):
                f.write(f"## {idx}. {result['method']} {result['url']}\n\n")
                f.write(f"**Tr·∫°ng th√°i Ph·∫£n h·ªìi:** `{result['status_code']}`\n\n")

                # Write query parameters if present
                if result.get('params'):
                    f.write(f"**Query Parameters:**\n```json\n{json.dumps(result['params'], indent=2, ensure_ascii=False)}\n```\n\n")

                # Write request body if present
                if result['request_body']:
                    f.write(f"**Request Payload (N·ªôi dung G·ª≠i ƒëi):**\n```json\n{json.dumps(result['request_body'], indent=2, ensure_ascii=False)}\n```\n\n")

                # Write response body
                if result['response_body']:
                    f.write(f"**Response Body (N·ªôi dung Nh·∫≠n v·ªÅ):**\n```json\n{json.dumps(result['response_body'], indent=2, ensure_ascii=False)}\n```\n\n")

                f.write("---\n\n")
        print_success(f"T·∫°o b√°o c√°o {OUTPUT_FILE} th√†nh c√¥ng.")
    except Exception as e:
        print_error(f"Kh√¥ng th·ªÉ ghi t·ªáp b√°o c√°o: {e}")


def get_auth_headers():
    """Tr·∫£ v·ªÅ headers 'Authorization' ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng."""
    if not access_token:
        print_error("Ch∆∞a ƒëƒÉng nh·∫≠p. Kh√¥ng th·ªÉ l·∫•y headers.")
        return None
    return {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }


# --- C√°c h√†m Ki·ªÉm th·ª≠ (Test Functions) ---

def login():
    """1. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Access Token"""
    global access_token
    print_info("ƒêang th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi user: " + USERNAME)
    url = f"{BASE_URL}/api/v1/auth/login"
    payload = {"username": USERNAME, "password": PASSWORD}

    try:
        response = requests.post(url, json=payload)
        response_data = response.json()
        add_test_result("Login", "POST", url, response.status_code, payload, response_data)

        if response.status_code == 200:
            access_token = response_data.get('accessToken')
            if access_token:
                print_success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng. ƒê√£ l·∫•y Access Token.")
                return True
            else:
                print_error("ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng t√¨m th·∫•y 'accessToken'.", response_data)
                return False
        else:
            print_error(f"ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", response_data)
            return False
    except requests.exceptions.ConnectionError:
        print_error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {BASE_URL}. H√£y ƒë·∫£m b·∫£o m√°y ch·ªß ƒëang ch·∫°y.")
        return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒëƒÉng nh·∫≠p: {e}")
        return False


def get_exam_attendance_id():
    """L·∫•y m·ªôt exam attendance ID ƒë·ªÉ test"""
    print_info("ƒêang l·∫•y m·ªôt exam attendance ID ƒë·ªÉ test...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'pageSize': 1, 'sort': 'desc'}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        if response.status_code == 200:
            data = response.json()
            items = data.get('data', {}).get('items', [])
            if items:
                exam_attendance_id = items[0]['id']
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID: {exam_attendance_id}")
                return exam_attendance_id

        # Strategy 2: Try filtering by status
        print_info("  C√°ch 1: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu, th·ª≠ l·ªçc theo status...")
        url_with_filter = f"{BASE_URL}/api/v1/exam-attendance"
        params_filter = {'pageSize': 10, 'status': 'present'}
        response = requests.get(url_with_filter, headers=get_auth_headers(), params=params_filter)
        if response.status_code == 200:
            data = response.json()
            items = data.get('data', {}).get('items', [])
            if items:
                exam_attendance_id = items[0]['id']
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID (l·ªçc theo status): {exam_attendance_id}")
                return exam_attendance_id

        # Strategy 3: Try without any filters
        print_info("  C√°ch 2: Th·ª≠ truy v·∫•n kh√¥ng c√≥ b·ªô l·ªçc...")
        response = requests.get(f"{BASE_URL}/api/v1/exam-attendance", headers=get_auth_headers(), params={'pageSize': 10})
        if response.status_code == 200:
            data = response.json()
            items = data.get('data', {}).get('items', [])
            if items:
                exam_attendance_id = items[0]['id']
                print_success(f"  ‚úì ƒê√£ l·∫•y exam attendance ID (kh√¥ng b·ªô l·ªçc): {exam_attendance_id}")
                return exam_attendance_id

        print_error("‚ö†Ô∏è  KH√îNG T√åM TH·∫§Y EXAM ATTENDANCE RECORDS!")
        print_info("üìù L∆∞u √Ω: Database c√≥ th·ªÉ c√≥ d·ªØ li·ªáu c≈© ho·∫∑c ch∆∞a kh·ªüi t·∫°o")
        print_info("   - Exam attendance records t·ªìn t·∫°i nh∆∞ng kh√¥ng ƒë∆∞·ª£c tr·∫£ v·ªÅ")
        print_info("   - C√≥ th·ªÉ do l·ªói SQL query ho·∫∑c d·ªØ li·ªáu kh√¥ng kh·ªõp v·ªõi b·ªô l·ªçc")
        return None

    except Exception as e:
        print_error(f"L·ªói khi l·∫•y exam attendance ID: {str(e)}")
        return None


def test_get_exam_attendance_list():
    """2. Ki·ªÉm th·ª≠ GET /api/v1/exam-attendance - L·∫•y danh s√°ch exam attendance"""
    print_info("ƒêang th·ª≠ l·∫•y danh s√°ch exam attendance records...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'sort': 'desc', 'pageSize': 10}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        response_data = response.json()
        add_test_result("GET exam attendance list", "GET", url, response.status_code, params=params, response_body=response_data)

        if response.status_code == 200:
            total_items = response_data.get('data', {}).get('totalItems', 0)
            print_success(f"L·∫•y danh s√°ch th√†nh c√¥ng. T·ªïng s·ªë: {total_items} records")
            return True
        else:
            print_error(f"L·∫•y danh s√°ch th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_exam_attendance_by_id(exam_attendance_id):
    """3. Ki·ªÉm th·ª≠ GET /api/v1/exam-attendance/{id} - L·∫•y exam attendance theo ID"""
    print_info(f"ƒêang th·ª≠ l·∫•y exam attendance v·ªõi ID: {exam_attendance_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"

    try:
        response = requests.get(url, headers=get_auth_headers())
        response_data = response.json()
        add_test_result("GET exam attendance by ID", "GET", url, response.status_code, response_body=response_data)

        if response.status_code == 200:
            print_success(f"L·∫•y exam attendance th√†nh c√¥ng")
            return True
        else:
            print_error(f"L·∫•y exam attendance th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_update_exam_attendance(exam_attendance_id):
    """4. Ki·ªÉm th·ª≠ PUT /api/v1/exam-attendance/{id} - C·∫≠p nh·∫≠t tr·∫°ng th√°i exam attendance"""
    print_info(f"ƒêang th·ª≠ c·∫≠p nh·∫≠t exam attendance v·ªõi ID: {exam_attendance_id}")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"
    payload = {
        "status": "present",
        "remark": "C·∫≠p nh·∫≠t th·ªß c√¥ng ƒë·ªÉ ki·ªÉm th·ª≠ API - Student completed the exam"
    }

    try:
        response = requests.put(url, headers=get_auth_headers(), json=payload)
        response_data = response.json()
        add_test_result("PUT update exam attendance", "PUT", url, response.status_code, request_body=payload, response_body=response_data)

        if response.status_code == 200:
            print_success(f"C·∫≠p nh·∫≠t exam attendance th√†nh c√¥ng")
            return True
        else:
            print_error(f"C·∫≠p nh·∫≠t th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_exam_attendance_with_filter():
    """5. Ki·ªÉm th·ª≠ GET v·ªõi b·ªô l·ªçc status"""
    print_info("ƒêang th·ª≠ l·∫•y danh s√°ch v·ªõi b·ªô l·ªçc status=present...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'status': 'present', 'pageSize': 10}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        response_data = response.json()
        add_test_result("GET exam attendance with filter", "GET", url, response.status_code, params=params, response_body=response_data)

        if response.status_code == 200:
            total_items = response_data.get('data', {}).get('totalItems', 0)
            print_success(f"L·∫•y danh s√°ch v·ªõi b·ªô l·ªçc th√†nh c√¥ng. T·ªïng s·ªë: {total_items} records")
            return True
        else:
            print_error(f"L·∫•y danh s√°ch th·∫•t b·∫°i. M√£ tr·∫°ng th√°i: {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


# --- C√°c h√†m ki·ªÉm th·ª≠ l·ªói (Error validation tests) ---

def test_get_nonexistent_exam_attendance():
    """6. Ki·ªÉm th·ª≠ GET v·ªõi ID kh√¥ng t·ªìn t·∫°i - D·ª± ki·∫øn 404"""
    print_info("ƒêang th·ª≠ l·∫•y exam attendance v·ªõi ID kh√¥ng t·ªìn t·∫°i (999999999)...")
    url = f"{BASE_URL}/api/v1/exam-attendance/999999999"

    try:
        response = requests.get(url, headers=get_auth_headers())
        response_data = response.json()
        add_test_result("GET non-existent exam attendance", "GET", url, response.status_code, response_body=response_data)

        if response.status_code == 404:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 404 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_invalid_id_type():
    """7. Ki·ªÉm th·ª≠ GET v·ªõi ID sai ƒë·ªãnh d·∫°ng - D·ª± ki·∫øn 400"""
    print_info("ƒêang th·ª≠ l·∫•y exam attendance v·ªõi ID sai ƒë·ªãnh d·∫°ng (abc)...")
    url = f"{BASE_URL}/api/v1/exam-attendance/abc"

    try:
        response = requests.get(url, headers=get_auth_headers())
        response_data = response.json()
        add_test_result("GET with invalid ID type", "GET", url, response.status_code, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_update_without_status(exam_attendance_id):
    """8. Ki·ªÉm th·ª≠ PUT thi·∫øu tr∆∞·ªùng status - D·ª± ki·∫øn 400"""
    if not exam_attendance_id:
        print_info("B·ªè qua test (kh√¥ng c√≥ exam attendance ID)")
        return False

    print_info("ƒêang th·ª≠ c·∫≠p nh·∫≠t kh√¥ng c√≥ tr∆∞·ªùng status...")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"
    payload = {"remark": "Test remark"}

    try:
        response = requests.put(url, headers=get_auth_headers(), json=payload)
        response_data = response.json()
        add_test_result("PUT without status field", "PUT", url, response.status_code, request_body=payload, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_update_with_empty_remark(exam_attendance_id):
    """9. Ki·ªÉm th·ª≠ PUT v·ªõi remark r·ªóng - D·ª± ki·∫øn 400"""
    if not exam_attendance_id:
        print_info("B·ªè qua test (kh√¥ng c√≥ exam attendance ID)")
        return False

    print_info("ƒêang th·ª≠ c·∫≠p nh·∫≠t v·ªõi remark r·ªóng...")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"
    payload = {"status": "present", "remark": ""}

    try:
        response = requests.put(url, headers=get_auth_headers(), json=payload)
        response_data = response.json()
        add_test_result("PUT with empty remark", "PUT", url, response.status_code, request_body=payload, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_update_with_invalid_status(exam_attendance_id):
    """10. Ki·ªÉm th·ª≠ PUT v·ªõi gi√° tr·ªã status kh√¥ng h·ª£p l·ªá - D·ª± ki·∫øn 400"""
    if not exam_attendance_id:
        print_info("B·ªè qua test (kh√¥ng c√≥ exam attendance ID)")
        return False

    print_info("ƒêang th·ª≠ c·∫≠p nh·∫≠t v·ªõi status kh√¥ng h·ª£p l·ªá...")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"
    payload = {"status": "invalid_status", "remark": "Test remark"}

    try:
        response = requests.put(url, headers=get_auth_headers(), json=payload)
        response_data = response.json()
        add_test_result("PUT with invalid status value", "PUT", url, response.status_code, request_body=payload, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_update_without_remark(exam_attendance_id):
    """11. Ki·ªÉm th·ª≠ PUT thi·∫øu tr∆∞·ªùng remark - D·ª± ki·∫øn 400"""
    if not exam_attendance_id:
        print_info("B·ªè qua test (kh√¥ng c√≥ exam attendance ID)")
        return False

    print_info("ƒêang th·ª≠ c·∫≠p nh·∫≠t kh√¥ng c√≥ tr∆∞·ªùng remark...")
    url = f"{BASE_URL}/api/v1/exam-attendance/{exam_attendance_id}"
    payload = {"status": "absent"}

    try:
        response = requests.put(url, headers=get_auth_headers(), json=payload)
        response_data = response.json()
        add_test_result("PUT without remark field", "PUT", url, response.status_code, request_body=payload, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_with_invalid_page():
    """12. Ki·ªÉm th·ª≠ GET v·ªõi tham s·ªë page kh√¥ng h·ª£p l·ªá - D·ª± ki·∫øn 400"""
    print_info("ƒêang th·ª≠ l·∫•y danh s√°ch v·ªõi page=-1...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'page': -1}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        response_data = response.json()
        add_test_result("GET with invalid page", "GET", url, response.status_code, params=params, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_with_invalid_sort():
    """13. Ki·ªÉm th·ª≠ GET v·ªõi tham s·ªë sort kh√¥ng h·ª£p l·ªá - D·ª± ki·∫øn 400"""
    print_info("ƒêang th·ª≠ l·∫•y danh s√°ch v·ªõi sort=invalid...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'sort': 'invalid', 'pageSize': 10}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        response_data = response.json()
        add_test_result("GET with invalid sort", "GET", url, response.status_code, params=params, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


def test_get_with_invalid_status_filter():
    """14. Ki·ªÉm th·ª≠ GET v·ªõi b·ªô l·ªçc status kh√¥ng h·ª£p l·ªá - D·ª± ki·∫øn 400"""
    print_info("ƒêang th·ª≠ l·∫•y danh s√°ch v·ªõi status=invalid_status...")
    url = f"{BASE_URL}/api/v1/exam-attendance"
    params = {'status': 'invalid_status', 'pageSize': 10}

    try:
        response = requests.get(url, headers=get_auth_headers(), params=params)
        response_data = response.json()
        add_test_result("GET with invalid status filter", "GET", url, response.status_code, params=params, response_body=response_data)

        if response.status_code == 400:
            print_success(f"Ki·ªÉm th·ª≠ l·ªói th√†nh c√¥ng. Nh·∫≠n m√£: {response.status_code}")
            return True
        else:
            print_error(f"Ki·ªÉm th·ª≠ l·ªói th·∫•t b·∫°i. D·ª± ki·∫øn 400 nh∆∞ng nh·∫≠n ƒë∆∞·ª£c {response.status_code}", response_data)
            return False
    except Exception as e:
        print_error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False


# --- H√†m ch√≠nh (Main) ---

def main():
    """Ch·∫°y chu tr√¨nh ki·ªÉm th·ª≠."""
    print("=" * 80)
    print("KI·ªÇM TH·ª¨ API - EXAM ATTENDANCE")
    print("=" * 80)

    # 1. ƒêƒÉng nh·∫≠p
    if not login():
        print_error("Kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu kh√¥ng ƒëƒÉng nh·∫≠p. ƒêang tho√°t.")
        generate_markdown_report()
        return

    print("\n" + "=" * 80)
    print("C√ÅC KI·ªÇM TH·ª¨ HAPPY PATH")
    print("=" * 80)

    # L·∫•y exam attendance ID cho c√°c b√†i test
    exam_attendance_id = get_exam_attendance_id()

    # Happy path tests
    test_get_exam_attendance_list()

    if exam_attendance_id:
        print("-" * 30)
        test_get_exam_attendance_by_id(exam_attendance_id)
        print("-" * 30)
        test_update_exam_attendance(exam_attendance_id)
        print("-" * 30)
        test_get_exam_attendance_with_filter()
    else:
        print_error("‚ö†Ô∏è  KH√îNG T√åM TH·∫§Y EXAM ATTENDANCE DATA!")
        print_info("üìù C√°c b√†i ki·ªÉm th·ª≠ GET by ID v√† PUT update ƒë√£ b·ªã b·ªè qua.")
        print_info("üìù ƒêi·ªÅu n√†y c√≥ th·ªÉ do database c√≥ dates c≈© ho·∫∑c kh√¥ng c√≥ exam attendance records.")

    print("\n" + "=" * 80)
    print("C√ÅC KI·ªÇM TH·ª¨ VALIDATION L·ªñI")
    print("=" * 80)

    # Error validation tests
    test_get_nonexistent_exam_attendance()
    print("-" * 30)
    test_get_invalid_id_type()
    print("-" * 30)
    test_update_without_status(exam_attendance_id)
    print("-" * 30)
    test_update_with_empty_remark(exam_attendance_id)
    print("-" * 30)
    test_update_with_invalid_status(exam_attendance_id)
    print("-" * 30)
    test_update_without_remark(exam_attendance_id)
    print("-" * 30)
    test_get_with_invalid_page()
    print("-" * 30)
    test_get_with_invalid_sort()
    print("-" * 30)
    test_get_with_invalid_status_filter()

    # T·∫°o b√°o c√°o
    print("\n" + "=" * 80)
    generate_markdown_report()
    print("=" * 80)
    print_info("T·∫§T C·∫¢ C√ÅC B√ÄI KI·ªÇM TH·ª¨ ƒê√É HO√ÄN T·∫§T")
    print("=" * 80)


if __name__ == "__main__":
    main()
