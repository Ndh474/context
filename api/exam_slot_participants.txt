POST   	| /exam-slots/{slotId}/subjects 	   		    | ENROLLMENT_MANAGE
GET    	| /exam-slots/{slotId}/subjects 	   		    | SLOT_READ
DELETE 	| /exam-slots/{slotId}/subjects/{subjectId} 	    | ENROLLMENT_MANAGE
POST   	| /exam-slots/{slotId}/participants 	   		    | ENROLLMENT_MANAGE
GET    	| /exam-slots/{slotId}/participants 	   		    | SLOT_READ
GET    	| /exam-slots/{slotId}/participants/{participantId} | SLOT_READ
PUT    	| /exam-slots/{slotId}/participants/{participantId} | ENROLLMENT_MANAGE
DELETE 	| /exam-slots/{slotId}/participants/{participantId} | ENROLLMENT_MANAGE (hard delete)
POST   	| /exam-slots/{slotId}/participants/bulk 	   	    | ENROLLMENT_MANAGE (CSV file)
GET    	| /exam-slots/{slotId}/participants/bulk/template   | SLOT_READ

============================================ Assign subjects to exam slot =============================================

1. POST /api/v1/exam-slots/{slotId}/subjects
Permission: ENROLLMENT_MANAGE
Description: Assign one or more subjects to a FINAL_EXAM slot. This is step 1 in the 2-step process for independent exam management.

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID (must be FINAL_EXAM with class_id = NULL)

Request Body:
{
  "subjectIds": [1, 2, 3]
}

Request Schema:
| Field      | Type    | Required | Validation
|------------|---------|----------|-----------
| subjectIds | array   | Yes      | Array of integer subject IDs (1-50 items)

Business Rules:
- Slot must be FINAL_EXAM type (slot_category = 'FINAL_EXAM')
- Slot must be independent (class_id = NULL)
- All subjects must exist and be active
- Cannot assign duplicate subjects to the same slot
- Slot must be active (slots.is_active = true)
- Related Business Rules: BR-34

201-Success Response:
{
  "status": 201,
  "message": "Subjects assigned to exam slot successfully",
  "data": {
    "slotId": 1,
    "subjects": [
      {
        "id": 1,
        "name": "Software Development Project",
        "code": "SWP391"
      },
      {
        "id": 2,
        "name": "Database Systems",
        "code": "DBS201"
      }
    ],
    "assignedCount": 2,
    "totalSubjects": 2
  }
}

Response Schema:
| Field        | Type    | Description
|--------------|---------|-----------
| slotId       | integer | Exam slot ID
| subjects     | array   | List of assigned subjects with id, name, code
| assignedCount| integer | Number of subjects assigned in this request
| totalSubjects| integer | Total subjects now assigned to slot

400-Fields required:
{
  "status": 400,
  "message": "Subject IDs array is required",
  "code": "SUBJECT_IDS_REQUIRED"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value to integer array",
  "code": "INVALID_FIELD_TYPE"
}

400-Invalid slot type:
{
  "status": 400,
  "message": "Slot must be FINAL_EXAM type with no class assigned",
  "code": "INVALID_SLOT_TYPE"
}

400-Inactive slot:
{
  "status": 400,
  "message": "Cannot assign subjects to inactive exam slot",
  "code": "INACTIVE_SLOT_NOT_ALLOWED"
}

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

404-Subject not found:
{
  "status": 404,
  "message": "Subject not found: 5",
  "code": "SUBJECT_NOT_FOUND"
}

409-Duplicate subjects:
{
  "status": 409,
  "message": "Cannot assign duplicate subjects to the same slot",
  "code": "DUPLICATE_SUBJECTS_NOT_ALLOWED"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
============================================ List subjects in exam slot ===============================================

2. GET /api/v1/exam-slots/{slotId}/subjects
Permission: SLOT_READ
Description: List all subjects assigned to a FINAL_EXAM slot.

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID

200-Success Response:
{
  "status": 200,
  "data": {
    "slotId": 1,
    "subjects": [
      {
        "id": 1,
        "name": "Software Development Project",
        "code": "SWP391"
      },
      {
        "id": 2,
        "name": "Database Systems",
        "code": "DBS201"
      }
    ],
    "totalSubjects": 2
  }
}

Response Schema:
| Field        | Type    | Description
|--------------|---------|-----------
| slotId       | integer | Exam slot ID
| subjects     | array   | List of assigned subjects with id, name, code
| totalSubjects| integer | Total number of subjects assigned to slot

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

=======================================================================================================================
========================================= Remove subject from exam slot ==============================================

3. DELETE /api/v1/exam-slots/{slotId}/subjects/{subjectId}
Permission: ENROLLMENT_MANAGE
Description: Remove a subject from a FINAL_EXAM slot. Cannot remove if students are already assigned to that subject in this slot.

Path Parameters:
| Parameter  | Type    | Required | Description
|------------|---------|----------|-----------
| slotId     | integer | Yes      | Exam slot ID
| subjectId  | integer | Yes      | Subject ID to remove

Business Rules:
- Slot must be FINAL_EXAM type (slot_category = 'FINAL_EXAM')
- Slot must be independent (class_id = NULL)
- Subject must be assigned to the slot
- Cannot remove if participants exist for this subject in this slot
- Slot must be active (slots.is_active = true)

200-Success Response:
{
  "status": 200,
  "message": "Subject removed from exam slot successfully"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

404-Subject not found:
{
  "status": 404,
  "message": "Subject not found in slot: 5",
  "code": "SUBJECT_NOT_FOUND_IN_SLOT"
}

409-Cannot remove subject:
{
  "status": 409,
  "message": "Cannot remove subject. 3 students are already assigned to this subject in this slot",
  "code": "SUBJECT_HAS_PARTICIPANTS"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
============================================ Add participant to exam slot =============================================

4. POST /api/v1/exam-slots/{slotId}/participants
Permission: ENROLLMENT_MANAGE
Description: Add a student to a specific subject within an independent final exam slot. This is step 2 in the 2-step process for independent exam management (BR-40).

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID (must be FINAL_EXAM with class_id = NULL)

Request Body:
{
  "studentUserId": 201,
  "subjectId": 1
}

Request Schema:
| Field          | Type    | Required | Validation
|----------------|---------|----------|-----------
| studentUserId  | integer | Yes      | Must exist, be active, and have STUDENT role
| subjectId      | integer | Yes      | Must be assigned to the slot (via exam_slot_subjects)

Business Rules:
- Slot must be FINAL_EXAM type (slot_category = 'FINAL_EXAM')
- Slot must be independent (class_id = NULL)
- Subject must be assigned to the slot (exam_slot_subjects table)
- Student must be enrolled in the subject during the semester (BR-40 validation)
- A student can only be added once to a specific subject in a specific exam slot
- If participant exists with is_enrolled=true → 409 Conflict
- If participant exists with is_enrolled=false → Update to true (re-enrollment)
- Slot must be active (slots.is_active = true)
- Student must be active (users.is_active = true)
- Student must have STUDENT role
- Related Business Rules: BR-34, BR-38, BR-39, BR-40

201-Success Response (New participant):
{
  "status": 201,
  "data": {
    "id": 1001,
    "slotId": 1,
    "studentUserId": 201,
    "subjectId": 1,
    "student": {
      "userId": 201,
      "fullName": "Tran Thi B",
      "rollNumber": "HE180314",
      "email": "tranthib@fpt.edu.vn",
      "majorName": "Software Engineering"
    },
    "slot": {
      "id": 1,
      "title": "Final Exam - Software Engineering",
      "startTime": "2024-12-20T08:00:00Z",
      "endTime": "2024-12-20T10:00:00Z",
      "slotCategory": "FINAL_EXAM",
      "room": {
        "id": 1,
        "name": "Room A101",
        "location": "Building A, Floor 1"
      },
      "semester": {
        "id": 1,
        "name": "Fall 2024",
        "code": "FA24"
      }
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391"
    },
    "isEnrolled": true,
    "createdAt": "2024-10-21T10:00:00Z",
    "updatedAt": "2024-10-21T10:00:00Z"
  }
}

200-Success Response (Re-enrollment):
{
  "status": 200,
  "message": "Student re-enrolled to exam slot subject successfully",
  "data": {
    "id": 1001,
    "slotId": 1,
    "studentUserId": 201,
    "subjectId": 1,
    "student": { ... },
    "slot": { ... },
    "subject": { ... },
    "isEnrolled": true,
    "createdAt": "2024-10-15T08:00:00Z",
    "updatedAt": "2024-10-21T10:00:00Z"
  }
}

Response Schema:
| Field         | Type    | Description
|---------------|---------|-----------
| id            | long    | Participant record ID (primary key)
| slotId        | integer | Exam slot ID
| studentUserId | integer | Student user ID
| subjectId     | integer | Subject ID
| student       | object  | Student details (userId, fullName, rollNumber, email, majorName)
| slot          | object  | Exam slot details with nested room and semester
| subject       | object  | Subject details (id, name, code)
| isEnrolled    | boolean | Participation status (always true in success response)
| createdAt     | string  | YYYY-MM-DDTHH:mm:SSZ (original enrollment date)
| updatedAt     | string  | YYYY-MM-DDTHH:mm:SSZ (last update date)

400-Fields required:
{
  "status": 400,
  "message": "Student User ID and Subject ID are required",
  "code": "STUDENT_USER_ID_REQUIRED" | "SUBJECT_ID_REQUIRED"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

400-Invalid user role:
{
  "status": 400,
  "message": "User must have STUDENT role to participate in exam",
  "code": "INVALID_USER_ROLE"
}

400-Invalid slot type:
{
  "status": 400,
  "message": "Slot must be FINAL_EXAM type with no class assigned",
  "code": "INVALID_SLOT_TYPE"
}

400-Subject not assigned:
{
  "status": 400,
  "message": "Subject 1 is not assigned to this exam slot",
  "code": "SUBJECT_NOT_ASSIGNED_TO_SLOT"
}

400-Student not enrolled in subject:
{
  "status": 400,
  "message": "Student is not enrolled in subject SWP391 during Fall 2024 semester",
  "code": "STUDENT_NOT_ENROLLED_IN_SUBJECT"
}

400-Inactive reference:
{
  "status": 400,
  "message": "Cannot add student to inactive exam slot",
  "code": "INACTIVE_SLOT_NOT_ALLOWED"
}

Other inactive reference error codes:
- INACTIVE_STUDENT_NOT_ALLOWED

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

404-Student not found:
{
  "status": 404,
  "message": "User not found: 201",
  "code": "USER_NOT_FOUND"
}

409-Already enrolled:
{
  "status": 409,
  "message": "Student is already enrolled in this subject for this exam slot",
  "code": "ALREADY_ENROLLED"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
============================================ List exam slot participants ==============================================

5. GET /api/v1/exam-slots/{slotId}/participants
Permission: SLOT_READ
Description: List all participants for a specific subject within an independent final exam slot with filtering and pagination support.

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID

Query Parameters:
| Parameter      | Type    | Required | Default | Validation
|----------------|---------|----------|---------|-----------
| subjectId      | integer | Yes      | -       | Subject ID (required - must be assigned to slot)
| page           | integer | No       | 1       | >= 1
| pageSize       | integer | No       | 50      | >= 1
| sort           | string  | No       | asc     | asc, desc
| sortBy         | string  | No       | fullName| fullName, rollNumber, createdAt, updatedAt
| isEnrolled     | boolean | No       | true    | Filter by enrollment status (true/false/null)
| search         | string  | No       | ""      | Search in student name, rollNumber, email (max 100 chars, trim spaces)

200-Success Response:
{
  "status": 200,
  "data": {
    "slot": {
      "id": 1,
      "title": "Final Exam - Software Engineering",
      "startTime": "2024-12-20T08:00:00Z",
      "endTime": "2024-12-20T10:00:00Z",
      "slotCategory": "FINAL_EXAM",
      "room": {
        "id": 1,
        "name": "Room A101",
        "location": "Building A, Floor 1"
      },
      "semester": {
        "id": 1,
        "name": "Fall 2024",
        "code": "FA24"
      }
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391"
    },
    "items": [
      {
        "id": 1001,
        "studentUserId": 201,
        "fullName": "Tran Thi B",
        "rollNumber": "HE180314",
        "email": "tranthib@fpt.edu.vn",
        "majorName": "Software Engineering",
        "majorCode": "SE",
        "isEnrolled": true,
        "enrolledAt": "2024-10-15T08:00:00Z",
        "updatedAt": "2024-10-15T08:00:00Z"
      },
      {
        "id": 1002,
        "studentUserId": 202,
        "fullName": "Le Van C",
        "rollNumber": "HE180315",
        "email": "levanc@fpt.edu.vn",
        "majorName": "Software Engineering",
        "majorCode": "SE",
        "isEnrolled": true,
        "enrolledAt": "2024-10-15T08:05:00Z",
        "updatedAt": "2024-10-15T08:05:00Z"
      }
    ],
    "totalEnrolled": 45,
    "totalWithdrawn": 2,
    "totalPages": 1,
    "currentPage": 1,
    "pageSize": 50,
    "totalItems": 45
  }
}

Response Schema:
| Field          | Type    | Description
|----------------|---------|-----------
| slot           | object  | Exam slot details with nested room and semester
| subject        | object  | Subject details (id, name, code)
| items          | array   | List of enrolled students for this subject
| totalEnrolled  | integer | Count of students with is_enrolled=true
| totalWithdrawn | integer | Count of students with is_enrolled=false
| totalPages     | integer | Total pages
| currentPage    | integer | Current page number
| pageSize       | integer | Items per page
| totalItems     | integer | Total items (based on isEnrolled filter)

Participant Object Schema:
| Field         | Type    | Description
|---------------|---------|-----------
| id            | long    | Participant record ID (primary key)
| studentUserId | integer | Student user ID
| fullName      | string  | Student full name
| rollNumber    | string  | Student roll number
| email         | string  | Student email
| majorName     | string  | Major name
| majorCode     | string  | Major code
| isEnrolled    | boolean | Participation status
| enrolledAt    | string  | YYYY-MM-DDTHH:mm:SSZ (enrollment date)
| updatedAt     | string  | YYYY-MM-DDTHH:mm:SSZ (last update date)

400-Fields required:
{
  "status": 400,
  "message": "Subject ID is required",
  "code": "SUBJECT_ID_REQUIRED"
}

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must be >= 1 / Page size must be >= 1",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

400-Subject not assigned:
{
  "status": 400,
  "message": "Subject 1 is not assigned to this exam slot",
  "code": "SUBJECT_NOT_ASSIGNED_TO_SLOT"
}

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

=======================================================================================================================
======================================= Get exam slot participant by ID ===========================================

6. GET /api/v1/exam-slots/{slotId}/participants/{participantId}
Permission: SLOT_READ
Description: Get participant details for a specific participant record in an exam slot.

Path Parameters:
| Parameter      | Type    | Required | Description
|----------------|---------|----------|-----------
| slotId         | integer | Yes      | Exam slot ID
| participantId  | long    | Yes      | Participant record ID

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1001,
    "slotId": 1,
    "studentUserId": 201,
    "subjectId": 1,
    "student": {
      "userId": 201,
      "fullName": "Tran Thi B",
      "rollNumber": "HE180314",
      "email": "tranthib@fpt.edu.vn",
      "majorName": "Software Engineering"
    },
    "slot": {
      "id": 1,
      "title": "Final Exam - Software Engineering",
      "startTime": "2024-12-20T08:00:00Z",
      "endTime": "2024-12-20T10:00:00Z",
      "slotCategory": "FINAL_EXAM",
      "room": {
        "id": 1,
        "name": "Room A101",
        "location": "Building A, Floor 1"
      },
      "semester": {
        "id": 1,
        "name": "Fall 2024",
        "code": "FA24"
      }
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391"
    },
    "isEnrolled": true,
    "createdAt": "2024-10-15T08:00:00Z",
    "updatedAt": "2024-10-15T08:00:00Z"
  }
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer/Long'",
  "code": "INVALID_FIELD_TYPE"
}

404-Participant not found:
{
  "status": 404,
  "message": "Participant not found: 1001",
  "code": "PARTICIPANT_NOT_FOUND"
}

=======================================================================================================================
============================================ Update exam slot participant =============================================

7. PUT /api/v1/exam-slots/{slotId}/participants/{participantId}
Permission: ENROLLMENT_MANAGE
Description: Update participant status (withdraw or re-enroll student from exam subject). This does NOT delete exam attendance records.

Path Parameters:
| Parameter      | Type    | Required | Description
|----------------|---------|----------|-----------
| slotId         | integer | Yes      | Exam slot ID
| participantId  | long    | Yes      | Participant record ID

Request Body:
{
  "isEnrolled": false
}

Request Schema:
| Field      | Type    | Required | Validation
|------------|---------|----------|-----------
| isEnrolled | boolean | Yes      | true (re-enroll) or false (withdraw)

Business Rules:
- When is_enrolled=false (withdraw), student will not appear in future exam rosters for this subject
- Past exam attendance history is preserved
- Only students with is_enrolled=true appear in roster queries
- Audit log is created for this action

200-Success Response:
{
  "status": 200,
  "message": "Participant status updated successfully",
  "data": {
    "id": 1001,
    "slotId": 1,
    "studentUserId": 201,
    "subjectId": 1,
    "student": {
      "userId": 201,
      "fullName": "Tran Thi B",
      "rollNumber": "HE180314",
      "email": "tranthib@fpt.edu.vn",
      "majorName": "Software Engineering"
    },
    "slot": {
      "id": 1,
      "title": "Final Exam - Software Engineering",
      "startTime": "2024-12-20T08:00:00Z",
      "endTime": "2024-12-20T10:00:00Z",
      "slotCategory": "FINAL_EXAM",
      "room": {
        "id": 1,
        "name": "Room A101",
        "location": "Building A, Floor 1"
      },
      "semester": {
        "id": 1,
        "name": "Fall 2024",
        "code": "FA24"
      }
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391"
    },
    "isEnrolled": false,
    "createdAt": "2024-10-15T08:00:00Z",
    "updatedAt": "2024-10-21T14:30:00Z"
  }
}

400-Fields required:
{
  "status": 400,
  "message": "isEnrolled field is required",
  "code": "IS_ENROLLED_REQUIRED"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Boolean'",
  "code": "INVALID_FIELD_TYPE"
}

404-Participant not found:
{
  "status": 404,
  "message": "Participant not found: 1001",
  "code": "PARTICIPANT_NOT_FOUND"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
======================================= Hard delete participant from exam slot ========================================

8. DELETE /api/v1/exam-slots/{slotId}/participants/{participantId}
Permission: ENROLLMENT_MANAGE
Description: Permanently delete a student from a specific subject within an independent final exam slot. This is a hard delete operation that removes the record completely.

Path Parameters:
| Parameter      | Type    | Required | Description
|----------------|---------|----------|-----------
| slotId         | integer | Yes      | Exam slot ID
| participantId  | long    | Yes      | Participant record ID

Business Rules:
- This is a HARD DELETE operation (permanently removes the record)
- All associated exam attendance records will be deleted (CASCADE)
- This action CANNOT be undone
- Use PUT with is_enrolled=false for soft delete (recommended)
- Hard delete should only be used for data cleanup or error correction

200-Success Response:
{
  "status": 200,
  "message": "Participant permanently deleted from exam slot"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer/Long'",
  "code": "INVALID_FIELD_TYPE"
}

404-Participant not found:
{
  "status": 404,
  "message": "Participant not found: 1001",
  "code": "PARTICIPANT_NOT_FOUND"
}

409-Has attendance records:
{
  "status": 409,
  "message": "Cannot delete participant with existing exam attendance records. Use soft delete (PUT with isEnrolled=false) instead.",
  "code": "HAS_ATTENDANCE_RECORDS"
}

=======================================================================================================================
====================================== Bulk add participants from CSV file ============================================

9. POST /api/v1/exam-slots/{slotId}/participants/bulk
Permission: ENROLLMENT_MANAGE
Description: Bulk add students to specific subjects within an independent final exam slot from a CSV file (UC-65). Uses PARTIAL SUCCESS strategy - imports valid rows and skips invalid ones.

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID (must be FINAL_EXAM with class_id = NULL)

Request: Multipart form-data
Content-Type: multipart/form-data
Body:
- file: participants.csv (max 5MB, max 10,000 rows)

CSV Format:
- Encoding: UTF-8 with BOM (for Excel compatibility)
- Delimiter: comma (,)
- Header row: Required (first row)
- Columns: student_id, subject_code

Example CSV:
```csv
student_id,subject_code
HE180314,SWP391
HE180315,DBS201
HE180316,SWP391
```

Business Rules:
- PARTIAL SUCCESS: Import valid rows, skip invalid rows. Return ONLY errors/warnings.
- Duplicate handling:
  - Within file: If same (student_id, subject_code) pair appears multiple times, only first occurrence is processed
  - With database: If participant already exists with is_enrolled=true, skip with warning
  - With database: If participant exists with is_enrolled=false, update to true (re-enrollment)
- Slot must be FINAL_EXAM type (slot_category = 'FINAL_EXAM')
- Slot must be independent (class_id = NULL)
- Subject must be assigned to the slot (exam_slot_subjects table)
- Student must be enrolled in the subject during the semester (BR-40 validation)

Validation Rules:
File Level:
- File size must not exceed 5MB
- Maximum 10,000 rows (excluding header)
- Must have exactly 2 columns
- Header row must match exactly: student_id,subject_code

Row Level:
- student_id must exist in users table and have STUDENT role
- subject_code must exist in subjects table
- The pair (slot_id, subject_id) must exist in exam_slot_subjects table
- Student must be enrolled in the subject during the semester (BR-40 validation)
- Student must be active (users.is_active = true)
- Slot must be active (slots.is_active = true)

200-Success Response (Returns only error/warning list):
(Always returns 200 OK. 'data' is an ARRAY containing error/warning rows. Empty array '[]' means all rows in this batch succeeded.)
{
  "status": 200,
  "message": "Import processed.",
  "data": [
    {
      "rowNumber": 3,
      "studentId": "HE999999",
      "subjectCode": "SWP391",
      "errorCode": "STUDENT_NOT_FOUND",
      "message": "Student not found",
      "type": "ERROR"
    },
    {
      "rowNumber": 5,
      "studentId": "HE180318",
      "subjectCode": "SWP391",
      "errorCode": "ALREADY_ENROLLED",
      "message": "Student already enrolled, skipped",
      "type": "WARNING"
    },
    {
      "rowNumber": 7,
      "studentId": "HE180320",
      "subjectCode": "DBS201",
      "errorCode": "INACTIVE_STUDENT_NOT_ALLOWED",
      "message": "Student is not active",
      "type": "ERROR"
    },
    {
      "rowNumber": 12,
      "studentId": "HE180314",
      "subjectCode": "SWP391",
      "errorCode": "DUPLICATE_IN_FILE",
      "message": "Duplicate entry in file, only first occurrence processed",
      "type": "WARNING"
    }
  ]
}

Response Schema:
| Field      | Type          | Description
|------------|---------------|-----------
| status     | integer       | Always 200 for processed requests
| message    | string        | "Import processed."
| data       | array[object] | Array of error/warning objects (empty if all rows succeeded)

Error/Warning Object Schema:
| Field       | Type    | Description
|-------------|---------|-----------
| rowNumber   | integer | Row number in CSV file (1-based, excluding header)
| studentId   | string  | Student ID from the failed/skipped row
| subjectCode | string  | Subject code from the failed/skipped row
| errorCode   | string  | Error/Warning code identifier
| message     | string  | Human-readable error/warning message
| type        | string  | "ERROR" or "WARNING"

Possible Error Codes in data array:
- STUDENT_NOT_FOUND
- SUBJECT_NOT_FOUND
- SUBJECT_NOT_ASSIGNED_TO_SLOT
- STUDENT_NOT_ENROLLED_IN_SUBJECT (BR-40)
- INVALID_USER_ROLE
- INACTIVE_STUDENT_NOT_ALLOWED
- INACTIVE_SLOT_NOT_ALLOWED
- MISSING_CSV_COLUMNS
- INVALID_CSV_FORMAT

Possible Warning Codes in data array:
- ALREADY_ENROLLED
- DUPLICATE_IN_FILE

400-Invalid file format:
{
  "status": 400,
  "message": "Invalid CSV format. Expected header: student_id,subject_code",
  "code": "INVALID_CSV_FORMAT"
}

400-File too large:
{
  "status": 400,
  "message": "File size exceeds maximum limit of 5MB",
  "code": "FILE_TOO_LARGE"
}

400-Too many rows:
{
  "status": 400,
  "message": "CSV file exceeds maximum limit of 10,000 rows",
  "code": "TOO_MANY_ROWS"
}

400-Missing file:
{
  "status": 400,
  "message": "CSV file is required",
  "code": "FILE_REQUIRED"
}

400-Invalid file type:
{
  "status": 400,
  "message": "Invalid file type. Only CSV files are allowed",
  "code": "INVALID_FILE_TYPE"
}

400-Invalid slot type:
{
  "status": 400,
  "message": "Slot must be FINAL_EXAM type with no class assigned",
  "code": "INVALID_SLOT_TYPE"
}

404-Slot not found:
{
  "status": 404,
  "message": "Exam slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

=======================================================================================================================
============================================ Download CSV template ====================================================

10. GET /api/v1/exam-slots/{slotId}/participants/bulk/template
Permission: SLOT_READ
Description: Download CSV template file for bulk participant import to specific subjects.

Path Parameters:
| Parameter | Type    | Required | Description
|-----------|---------|----------|-------------
| slotId    | integer | Yes      | Exam slot ID (for context, not used in template generation)

200-Success Response:
Content-Type: text/csv
Content-Disposition: attachment; filename="exam_participants_template.csv"

File Content:
```csv
student_id,subject_code
HE180314,SWP391
HE180315,DBS201
HE180316,SWP391
```

Notes:
- File includes header row and 3 sample rows
- UTF-8 with BOM encoding for Excel compatibility
- Sample data shows correct format with both student_id and subject_code

=======================================================================================================================
====================================================== Notes ==========================================================

Data Types:
- Slot ID: Integer
- Student User ID: Integer
- Participant ID: Long (BIGINT) - Primary key of exam_slot_participants table
- Subject ID: Integer
- All timestamps: ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SSZ

Two-Step Process for Independent Exam Management:
1. Step 1 - Assign Subjects: Use POST /api/v1/exam-slots/{slotId}/subjects to assign multiple subjects to a FINAL_EXAM slot
2. Step 2 - Assign Students: Choose one of the following methods:
   - Single add: POST /api/v1/exam-slots/{slotId}/participants (one student at a time)
   - Bulk add (CSV): POST /api/v1/exam-slots/{slotId}/participants/bulk (CSV file with student_id, subject_code pairs)

Primary Key Design:
- exam_slot_participants table uses a single 'id' field (participantId) as the primary key
- Has a unique constraint on (exam_slot_subject_id, student_user_id) to ensure a student cannot be added twice to the same subject within a slot
- URL patterns:
  - /exam-slots/{slotId}/participants/{participantId}
  - /exam-slots/{slotId}/subjects/{subjectId}

Participation Status (is_enrolled):
- true: Student is actively enrolled for this subject, appears in roster
- false: Student is withdrawn from this subject, does NOT appear in roster
- NOT a soft delete flag - it's participation status for specific subject
- Can be toggled: false → true (re-enrollment for same subject)

Pagination:
- Default: page=1, pageSize=50
- Max page size: 100
- 1-based pagination

Response Structure:
- Nested objects for student, slot, and subject details
- Student: userId, fullName, rollNumber, email, majorName
- Slot: id, title, startTime, endTime, slotCategory, room (id, name, location), semester (id, name, code)
- Subject: id, name, code

Bulk Import Strategy:
- PARTIAL SUCCESS: Import valid rows, skip invalid rows
- Return 200 with ONLY errors/warnings array
- Empty array '[]' means all rows succeeded
- Each error/warning object includes: rowNumber, studentId, subjectCode, errorCode, message, type
- CSV file (bulk): Best for large imports (max 10,000 rows, multiple subjects)

CSV Template:
- UTF-8 with BOM encoding
- 2 columns: student_id, subject_code
- Includes sample data
- Max 5MB file size
- Max 10,000 rows

Permissions:
- ENROLLMENT_MANAGE: Assign/remove subjects to/from slots, create, update, delete, bulk import participants (Data Operator)
- SLOT_READ: View subjects and participants, download template (Data Operator, Lecturer, Supervisor)

Business Rules:
- Only for FINAL_EXAM slots with class_id = NULL (BR-34)
- Subjects must be assigned before students can be assigned (2-step process)
- Student must be enrolled in the subject during the semester (BR-40 validation)
- Preserves exam attendance history when withdrawing from specific subject
- Only is_enrolled=true participants appear in roster for that subject

Related Use Cases:
- UC-64: Manage Exam Slot Participants
- UC-65: Bulk Import Participants to Exam Slot

Audit Trail:
- All participant and subject changes are logged to operational_audit_logs
- Includes: actor_user_id, action_type, target_entity, target_id, changes (before/after)

Soft Delete vs Hard Delete:
- Soft Delete: Use PUT with is_enrolled=false (RECOMMENDED)
  - Preserves exam attendance history for that subject
  - Can be reversed by re-enrolling for same subject
  - Student hidden from roster for that subject but data retained
- Hard Delete: Use DELETE endpoint (DANGEROUS)
  - Permanently removes participant record for that subject
  - Fails with 409 Conflict if exam attendance records exist for that subject
  - Use soft delete (PUT with isEnrolled=false) instead if attendance records exist
  - Cannot be undone
  - Only for data cleanup or error correction when no attendance records exist

Subject Assignment:
- Use POST /api/v1/exam-slots/{slotId}/subjects to assign subjects
- Use DELETE /api/v1/exam-slots/{slotId}/subjects/{subjectId} to remove subjects
- Cannot remove subject if students are assigned to it in that slot
- Related Business Rules: BR-34, BR-38, BR-39

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found (participant, slot, subject, or student not found)
- 409: Conflict (already enrolled, has participants, duplicate subjects)
- 500: Internal Server Error
