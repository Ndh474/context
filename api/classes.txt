POST   	| /classes 	   		    | CLASS_CREATE 
GET    	| /classes 	   		    | CLASS_READ 
GET    	| /classes/{id} 	    | CLASS_READ 
PUT    	| /classes/{id} 		  | CLASS_UPDATE 
DELETE 	| /classes/{id} 		  | CLASS_DELETE_HARD
GET    	| /classes/{id}/slots	| SLOT_READ 

================================================= Create a new class ==================================================

1. POST /api/v1/classes
Permission: CLASS_CREATE
Request Body:
{
  "code": "SE1801",
  "subjectId": 1,
  "semesterId": 1
}

Request Schema:
| Field      | Type   | Required | Validation 
| code       | string | Yes      | Not blank, max 20 chars, unique per subject+semester
|            |        |          | Pattern: ^[A-Z0-9]+$, Examples: "SE1801", "AI2024A", "DB101"
| subjectId  | short  | Yes      | Not null, must exist and active
| semesterId | short  | Yes      | Not null, must exist and active

201-Success Response:
{
  "status": 201,
  "data": {
    "id": 1,
    "code": "SE1801",
    "semester": {
      "id": 1,
      "name": "Fall 2024",
      "code": "FA24",
      "startDate": "2024-09-01",
      "endDate": "2024-12-31",
      "isActive": true
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391",
      "isActive": true
    },
    "isActive": true,
    "createdAt": "2024-10-16T12:00:00Z",
    "updatedAt": "2024-10-16T12:00:00Z"
  }
}

Response Schema:
| Field                | Type    | Description 
| id                   | integer | Short type in DB
| code                 | string  | Class code 
| semester             | object  | Semester object (id, name, code, startDate, endDate, isActive)
| subject              | object  | Subject object (id, name, code, isActive)
| isActive             | boolean | Active status
| createdAt            | string  | YYYY-MM-DDTHH:mm:SSZ
| updatedAt            | string  | YYYY-MM-DDTHH:mm:SSZ

400-Fields required:
{
  "status": 400,
  "message": "Code must not be blank / Subject ID required / Semester ID required",
  "code": "CLASS_CODE_REQUIRED" | "CLASS_SUBJECT_ID_REQUIRED" | "CLASS_SEMESTER_ID_REQUIRED"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

400-Class existed:
{
  "status": 400,
  "message": "Class already exists with subject, semester, and code",
  "code": "CLASS_EXISTS"
}

404-Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

404-Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

400-Malformed request body:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

400-Inactive references:
{
  "status": 400, 
  "message": "Cannot create class with inactive subject or semester",
  "code": "INACTIVE_REFERENCE_NOT_ALLOWED"
}
=======================================================================================================================
=================================================== Search classes ====================================================

2. GET /api/v1/classes
Permission: CLASS_READ
Query Parameters:
| Parameter | Type 		| Required| Default | Validation 
| page 		  | integer | No 		  | 1 		  | 1-50 
| pageSize 	| integer | No 		  | 10 		  | 1-50 
| sort 		  | string 	| No 		  | asc 		| asc/desc 
| sortBy 	  | string 	| No		  | id 		  | code
| search 	  | string 	| No 		  | "" 		  | Search in class code
| isActive  | boolean | No      | null    | Filter by active status
| semesterId| short   | No      | null    | Filter by semester id
| subjectId | short   | No      | null    | Filter by subject id
200-Success Response
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "code": "SE1801",
        "semester": {
          "id": 1,
          "name": "Fall 2024",
          "code": "FA24",
          "startDate": "2024-09-01",
          "endDate": "2024-12-31",
          "isActive": true
        },
        "subject": {
          "id": 1,
          "name": "Software Development Project",
          "code": "SWP391",
          "isActive": true
        },
        "totalStudent": 15,
        "totalEnrolledStudent": 12,
        "totalSlot": 20,
        "totalActiveSlot": 18,
        "isActive": true,
        "createdAt": "2024-10-16T12:00:00Z",
        "updatedAt": "2024-10-16T12:00:00Z"
      },
    	...
    ],
    "totalPages": 5,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 45
  }
}

=======================================================================================================================
==================================================== Get class by id ==================================================

3. GET /api/v1/classes/{id}
Permission: CLASS_READ
| Parameter | Type 	| Required| Description
| id 		    | short | Yes 		| Class ID

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1,
    "code": "SE1801",
    "semester": {
      "id": 1,
      "name": "Fall 2024",
      "code": "FA24",
      "startDate": "2024-09-01",
      "endDate": "2024-12-31",
      "isActive": true
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391",
      "isActive": true
    },
    "totalStudent": 15,
    "totalEnrolledStudent": 12,
    "totalSlot": 20,
    "totalActiveSlot": 18,
    "isActive": true,
    "createdAt": "2024-10-16T12:00:00Z",
    "updatedAt": "2024-10-16T12:00:00Z"
  }
}

400-Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404-Class not found:
{
  "status": 404,
  "message": "Class not found: 1",
  "code": "CLASS_NOT_FOUND"
}

=======================================================================================================================
===================================================== Update class ====================================================
Business Rules:
1. Subject/Semester Changes:
   - Can change subject and semester at any time
   - New subject and semester must exist and be active
   - Unique constraint still applies: (subject_id, semester_id, code) must be unique

2. Deactivation:
   - Cannot deactivate if there are active slots (slot.is_active = true)
   - Cannot deactivate if there are enrolled students (enrollments.is_enrolled = true)
   - Withdrawn students (is_enrolled = false) don't block deactivation

4. PUT /api/v1/classes/{id}
Permission: CLASS_UPDATE

Path Parameters:
| Parameter | Type 	| Required| Description
| id 		    | short | Yes 		| Class ID

Request Body:
{
  "code": "SE1801",
  "subjectId": 1,
  "semesterId": 2,
  "isActive": true
}

Request Schema:
| Field      | Type    | Required | Validation
| code       | string  | Yes      | Not blank, max 20 chars, unique per subject+semester
|            |         |          | Pattern: ^[A-Z0-9]+$
| subjectId  | short   | Yes      | Not null, must be valid subject ID, subject must be active
| semesterId | short   | Yes      | Not null, must be valid semester ID, semester must be active
| isActive   | boolean | Yes      | Not null

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1,
    "code": "SE1801",
    "semester": {
      "id": 2,
      "name": "Spring 2025",
      "code": "SP25",
      "startDate": "2025-01-15",
      "endDate": "2025-05-31",
      "isActive": true
    },
    "subject": {
      "id": 1,
      "name": "Software Development Project",
      "code": "SWP391",
      "isActive": true
    },
    "isActive": true,
    "createdAt": "2024-10-16T12:00:00Z",
    "updatedAt": "2024-10-16T13:30:00Z"
  }
}

400-Fields required:
{
  "status": 400,
  "message": "Code must not be blank / Subject ID required / Semester ID required",
  "code": "CLASS_CODE_REQUIRED" | "CLASS_SUBJECT_ID_REQUIRED" | "CLASS_SEMESTER_ID_REQUIRED"
}

400-Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

400-Class existed:
{
  "status": 400,
  "message": "Class already exists with subject, semester, and code",
  "code": "CLASS_EXISTS"
}

404-Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

404-Class not found:
{
  "status": 404,
  "message": "Class not found: 1",
  "code": "CLASS_NOT_FOUND"
}

404-Semester not found:
{
  "status": 404,
  "message": "Semester not found: 2",
  "code": "SEMESTER_NOT_FOUND"
}

400-Invalid Json format
HttpMessageNotReadableException:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

409-Cannot deactivate class:
{
  "status": 409,
  "message": "Cannot deactivate class. Found 18 active slots and 12 enrolled students", 
  "code": "CLASS_HAS_ACTIVE_DEPENDENCIES"
}

=======================================================================================================================
===================================================== Delete class ====================================================

5. DELETE /api/v1/classes/{id}
Permission: CLASS_DELETE_HARD
Path Parameters:
| Parameter | Type 	| Required| Description
| id 		    | short | Yes 		| Class ID

200-Success Response:
{
  "status": 200,
  "message": "Delete class successfully"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Class not found:
{
  "status": 404,
  "message": "Class not found: 1",
  "code": "CLASS_NOT_FOUND"
}

409 - Conflict (has dependencies):
{
  "status": 409,
  "message": "Cannot delete class. Found 20 slots and 15 enrollments. Please delete them first",
  "code": "CLASS_HAS_DEPENDENCIES"
}

=======================================================================================================================
=============================================== Get slots by class id =================================================
Note:
- Returns slots for this class
- Includes lecture slots and exam slots (Progress Test, Final Exam)

6. GET /api/v1/classes/{id}/slots
Permission: SLOT_READ
Path Parameters:
| Parameter | Type  | Required | Description
| id        | short | Yes      | Class ID

Query Parameters:
| Parameter       | Type    | Required | Default   | Validation
| page            | integer | No       | 1         | 1-50
| pageSize        | integer | No       | 10        | 1-50
| sort            | string  | No       | asc       | asc/desc
| sortBy          | string  | No       | startTime | startTime, endTime, slotCategory
| slotCategory    | string  | No       | null      | LECTURE, LECTURE_WITH_PT, FINAL_EXAM (exact match filter)
| isFinalized     | boolean | No       | null      | true, false (filter finalized slots)
| isActive        | boolean | No       | null      | Filter by active status
| startTimeFrom   | string  | No       | null      | YYYY-MM-DD (slots with startTime >= this date, inclusive)
| startTimeTo     | string  | No       | null      | YYYY-MM-DD (slots with startTime <= this date, inclusive)

200-Success Response: 
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "title": "Regular Lecture",
        "description": "Introduction to Software Development",
        "startTime": "2024-10-17T08:00:00Z",
        "endTime": "2024-10-17T10:00:00Z",
        "slotCategory": "LECTURE",
        "finalizedAt": null,
        "room": {
          "id": 1,
          "name": "Room A101",
          "location": "Building A, Floor 1"
        },
        "staffUser": {
          "id": 10,
          "username": "john.lecturer",
          "fullName": "John Lecturer"
        },
        "isActive": true,
        "createdAt": "2024-10-16T13:00:00Z",
        "updatedAt": "2024-10-16T13:00:00Z"
      },
      {
        "id": 2,
        "title": "Progress Test 1 - Chapter 1-3",
        "description": "Covers chapters 1 to 3",
        "startTime": "2024-10-18T08:00:00Z",
        "endTime": "2024-10-18T10:00:00Z",
        "slotCategory": "LECTURE_WITH_PT",
        "finalizedAt": "2024-10-18T10:30:00Z",
        "room": {
          "id": 1,
          "name": "Room A101",
          "location": "Building A, Floor 1"
        },
        "staffUser": {
          "id": 10,
          "username": "john.lecturer",
          "fullName": "John Lecturer"
        },
        "isActive": true,
        "createdAt": "2024-10-16T13:05:00Z",
        "updatedAt": "2024-10-18T10:30:00Z"
      },
	    ...
    ],
    "totalPages": 3,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 25
  }
}

Slot Object Schema:
| Field        | Type    | Description 
| id           | integer | Slot ID
| title        | string  | Slot title (e.g., "Progress Test 1")
| description  | string  | Slot description/instructions
| startTime    | string  | YYYY-MM-DDTHH:mm:SSZ
| endTime      | string  | YYYY-MM-DDTHH:mm:SSZ
| slotCategory | string  | LECTURE, LECTURE_WITH_PT, or FINAL_EXAM
| finalizedAt  | string  | YYYY-MM-DDTHH:mm:SSZ or null (when attendance was finalized)
| room         | object  | Room object (id, name, location)
| staffUser    | object  | Staff user object (id, username, fullName)
| isActive     | boolean | Active status
| createdAt    | string  | YYYY-MM-DDTHH:mm:SSZ
| updatedAt    | string  | YYYY-MM-DDTHH:mm:SSZ

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, ...",
  "code": "INVALID_PAGE_SIZE/PAGE/SORT/SORT_BY"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Class not found:
{
  "status": 404,
  "message": "Class not found: 1",
  "code": "CLASS_NOT_FOUND"
}

=======================================================================================================================
====================================================== Notes ==========================================================

- Class ID is of type Short (max value: 32,767)
- Subject ID and Semester ID are also of type Short
- All timestamps are in ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SSZ
- Search parameter searches in class code
- Pagination is 1-based (page=1 is the first page)
- Default sort is by id in ascending order
- Response includes nested semester and subject objects (simplified, without createdAt/updatedAt)
- Soft delete is done via PUT endpoint by setting isActive = false
- Hard delete via DELETE endpoint is permanent and may fail if class has slots or enrollments
- Unique constraint on (subject_id, semester_id, code) - same class code cannot exist for same subject and semester
- Nested /classes/{classId}/slots endpoint returns slot details without nested class object (to avoid redundancy)
- totalStudent: Total students (enrolled + withdrawn)
- totalEnrolledStudent: Currently enrolled students only (is_enrolled = true)
- totalSlot: Total slots (active + inactive)
- totalActiveSlot: Active slots only (is_active = true)
- Subject and semester can be changed at any time via PUT endpoint
-  = Modified

Validation Patterns:
- Class code: ^[A-Z0-9]+$ (UPPERCASE letters and digits only, no spaces, max 20 chars)
- Examples: "SE1801", "AI2024A", "DB101"

Slot Category:
- LECTURE: Regular lecture session (teaching only)
- LECTURE_WITH_PT: Lecture session with progress test (teaching + testing)
- FINAL_EXAM: Final exam session (testing only)
- Lecturers can update slot_category between LECTURE and LECTURE_WITH_PT
- Only Data Operators can create/manage FINAL_EXAM slots

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters, duplicate class)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found (class, subject, or semester not found)
- 409: Conflict (foreign key constraint violation)
- 500: Internal Server Error