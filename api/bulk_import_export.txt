POST   	| /import/students 	   		    | USER_CREATE
POST   	| /import/staff 	   		    | USER_CREATE
POST   	| /import/classes 	   		    | CLASS_CREATE
POST   	| /import/slots 	   		    | SLOT_CREATE
GET    	| /import/templates/{type} 	    | CLASS_READ (public template download)
GET    	| /export/students 	   		    | USER_READ_LIST
GET    	| /export/staff 	   		    | USER_READ_LIST
GET    	| /export/classes 	   		    | CLASS_READ
GET    	| /export/attendance 	   	    | REPORT_EXPORT_ACADEMIC_DATA

============================================ Bulk import students from CSV ============================================
1. POST /api/v1/import/students
Permission: USER_CREATE
Description: Bulk import **and create new student accounts** from a CSV file. This endpoint is for creating users, not for enrolling them into classes. Uses PARTIAL SUCCESS strategy - imports valid rows and skips invalid ones.

Request: Multipart form-data
Content-Type: multipart/form-data
Body:
- file: students.csv (max 5MB, max 10,000 rows)

CSV Format:
- Encoding: UTF-8 with BOM (for Excel compatibility)
- Delimiter: comma (,)
- Header row: Required (first row)
- Columns: rollNumber, fullName, email, majorCode

Example CSV:
```csv
rollNumber,fullName,email,majorCode
HE180314,Tran Thi B,tranthib@fpt.edu.vn,SE
HE180315,Le Van C,levanc@fpt.edu.vn,SE
HE180316,Nguyen Thi D,nguyenthid@fpt.edu.vn,IA
```

Validation Rules:
File Level:
- File size must not exceed 5MB
- Maximum 10,000 rows (excluding header)
- Must have exactly 4 columns
- Header row must match exactly: rollNumber,fullName,email,majorCode

Row Level:
- rollNumber: Not blank, max 20 chars, unique, format: HE + 6 digits
- fullName: Not blank, max 150 chars
- email: Valid email format, max 128 chars, unique
- majorCode: Must exist in majors table and be active

Duplicate Handling:
- Within file: If same rollNumber appears multiple times, keep first occurrence and warn
- With database: If student already exists, skip and report as warning

200-Success Response (Partial success):
{
  "status": 200,
  "message": "Bulk import completed with some errors",
  "data": {
    "totalRows": 100,
    "successCount": 95,
    "skippedCount": 3,
    "failedCount": 2,
    "summary": {
      "newStudents": 95,
      "alreadyExists": 3,
      "errors": 2
    },
    "errors": [
      {
        "row": 3,
        "rollNumber": "HE999999",
        "reason": "Invalid roll number format"
      },
      {
        "row": 7,
        "email": "invalid-email",
        "reason": "Invalid email format"
      }
    ],
    "warnings": [
      {
        "row": 5,
        "rollNumber": "HE180318",
        "reason": "Student already exists, skipped"
      },
      {
        "row": 12,
        "rollNumber": "HE180314",
        "reason": "Duplicate entry in file, only first occurrence processed"
      }
    ]
  }
}

200-Success Response (All success):
{
  "status": 200,
  "message": "Bulk import completed successfully",
  "data": {
    "totalRows": 100,
    "successCount": 100,
    "skippedCount": 0,
    "failedCount": 0,
    "summary": {
      "newStudents": 100,
      "alreadyExists": 0,
      "errors": 0
    }
  }
}

400-Invalid file format:
{
  "status": 400,
  "message": "Invalid CSV format. Expected header: rollNumber,fullName,email,majorCode",
  "code": "INVALID_CSV_FORMAT"
}

400-File too large:
{
  "status": 400,
  "message": "File size exceeds maximum limit of 5MB",
  "code": "FILE_TOO_LARGE"
}

400-Too many rows:
{
  "status": 400,
  "message": "CSV file exceeds maximum limit of 10,000 rows",
  "code": "TOO_MANY_ROWS"
}

400-Missing file:
{
  "status": 400,
  "message": "CSV file is required",
  "code": "FILE_REQUIRED"
}

=======================================================================================================================
============================================= Bulk import staff from CSV ==============================================

2. POST /api/v1/import/staff
Permission: USER_CREATE
Description: Bulk import staff from CSV file. Uses PARTIAL SUCCESS strategy.

Request: Multipart form-data
Content-Type: multipart/form-data
Body:
- file: staff.csv (max 5MB, max 10,000 rows)

CSV Format:
- Columns: staffCode, fullName, email, roles

Example CSV:
```csv
staffCode,fullName,email,roles
EMP001,Nguyen Van A,nguyenvana@fpt.edu.vn,LECTURER
EMP002,Tran Thi B,tranthib@fpt.edu.vn,"LECTURER,SUPERVISOR"
EMP003,Le Van C,levanc@fpt.edu.vn,DATA_OPERATOR
```

Validation Rules:
Row Level:
- staffCode: Not blank, max 20 chars, unique, alphanumeric
- fullName: Not blank, max 150 chars
- email: Valid email format, max 128 chars, unique
- roles: Valid role names (LECTURER, SUPERVISOR, DATA_OPERATOR, SYSTEM_ADMIN), comma-separated

Note: Multiple roles can be specified, separated by comma (e.g., "LECTURER,SUPERVISOR")

200-Success Response: (Same structure as students import)

=======================================================================================================================
============================================ Bulk import classes from CSV =============================================

3. POST /api/v1/import/classes
Permission: CLASS_CREATE
Description: Bulk import classes from CSV file. Uses PARTIAL SUCCESS strategy.

Request: Multipart form-data
Content-Type: multipart/form-data
Body:
- file: classes.csv (max 5MB, max 10,000 rows)

CSV Format:
- Columns: classCode, subjectCode, semesterCode

Example CSV:
```csv
classCode,subjectCode,semesterCode
SE1801,SWP391,FA24
SE1802,SWP391,FA24
AI2401,AIE301,SP25
```

Validation Rules:
Row Level:
- classCode: Not blank, max 20 chars, pattern: ^[A-Z0-9]+$
- subjectCode: Must exist in subjects table and be active
- semesterCode: Must exist in semesters table and be active
- Unique constraint: (subjectCode, semesterCode, classCode) must be unique

200-Success Response: (Same structure as students import)

=======================================================================================================================
============================================= Bulk import slots from CSV ==============================================

4. POST /api/v1/import/slots
Permission: SLOT_CREATE
Description: Bulk import slots from CSV file. Uses PARTIAL SUCCESS strategy. Validates time conflicts.

Request: Multipart form-data
Content-Type: multipart/form-data
Body:
- file: slots.csv (max 5MB, max 10,000 rows)

CSV Format:
- Columns: classCode, semesterCode, startTime, endTime, roomName, staffCode, slotCategory, title, description

Example CSV:
```csv
classCode,semesterCode,startTime,endTime,roomName,staffCode,slotCategory,title,description
SE1801,FA24,2024-10-20T08:00:00Z,2024-10-20T10:00:00Z,Room A101,EMP001,LECTURE,Introduction,Chapter 1
SE1801,FA24,2024-10-21T08:00:00Z,2024-10-21T10:00:00Z,Room A101,EMP001,LECTURE,OOP Basics,Chapter 2
SE1802,FA24,2024-10-20T10:00:00Z,2024-10-20T12:00:00Z,Room A102,EMP002,LECTURE_WITH_PT,Progress Test 1,
```

Validation Rules:
Row Level:
- classCode + semesterCode: Must uniquely identify a class
- startTime: ISO 8601 format, must be before endTime
- endTime: ISO 8601 format, must be after startTime
- Duration: Min 30 minutes, max 4 hours
- roomName: Must exist in rooms table and be active
- staffCode: Must exist in staff_profiles table and be active
- slotCategory: Must be LECTURE, LECTURE_WITH_PT, or FINAL_EXAM
- title: Optional, max 255 chars
- description: Optional, max 1000 chars

Conflict Validation:
- Room conflict: (startTime, endTime, roomName) must not overlap with existing slots
- Staff conflict: (startTime, endTime, staffCode) must not overlap with existing slots

200-Success Response:
{
  "status": 200,
  "message": "Bulk import completed with some errors",
  "data": {
    "totalRows": 100,
    "successCount": 92,
    "skippedCount": 0,
    "failedCount": 8,
    "summary": {
      "newSlots": 92,
      "errors": 8
    },
    "errors": [
      {
        "row": 5,
        "classCode": "SE1801",
        "startTime": "2024-10-20T08:00:00Z",
        "reason": "Room A101 is already booked from 08:00 to 10:00"
      },
      {
        "row": 12,
        "staffCode": "EMP001",
        "startTime": "2024-10-21T08:00:00Z",
        "reason": "Staff EMP001 is already assigned to another slot at this time"
      }
    ]
  }
}

=======================================================================================================================
=========================================== Download CSV template =====================================================

5. GET /api/v1/import/templates/{type}
Permission: CLASS_READ (public template download)
Description: Download CSV template file for bulk import.

Path Parameters:
| Parameter | Type   | Required | Description
| type      | string | Yes      | Template type: students, staff, classes, slots, enrollments

200-Success Response (students):
Content-Type: text/csv
Content-Disposition: attachment; filename="students_import_template.csv"

File Content:
```csv
rollNumber,fullName,email,majorCode
HE180314,Tran Thi B,tranthib@fpt.edu.vn,SE
HE180315,Le Van C,levanc@fpt.edu.vn,IA
HE180316,Nguyen Thi D,nguyenthid@fpt.edu.vn,AI
```

200-Success Response (staff):
Content-Type: text/csv
Content-Disposition: attachment; filename="staff_import_template.csv"

File Content:
```csv
staffCode,fullName,email,roles
EMP001,Nguyen Van A,nguyenvana@fpt.edu.vn,LECTURER
EMP002,Tran Thi B,tranthib@fpt.edu.vn,"LECTURER,SUPERVISOR"
EMP003,Le Van C,levanc@fpt.edu.vn,DATA_OPERATOR
```

200-Success Response (classes):
Content-Type: text/csv
Content-Disposition: attachment; filename="classes_import_template.csv"

File Content:
```csv
classCode,subjectCode,semesterCode
SE1801,SWP391,FA24
SE1802,SWP391,FA24
AI2401,AIE301,SP25
```

200-Success Response (slots):
Content-Type: text/csv
Content-Disposition: attachment; filename="slots_import_template.csv"

File Content:
```csv
classCode,semesterCode,startTime,endTime,roomName,staffCode,slotCategory,title,description
SE1801,FA24,2024-10-20T08:00:00Z,2024-10-20T10:00:00Z,Room A101,EMP001,LECTURE,Introduction,Chapter 1
SE1801,FA24,2024-10-21T08:00:00Z,2024-10-21T10:00:00Z,Room A101,EMP001,LECTURE,OOP Basics,Chapter 2
```

200-Success Response (enrollments):
Content-Type: text/csv
Content-Disposition: attachment; filename="enrollments_import_template.csv"

File Content:
```csv
student_id,class_code,semester_code
HE180314,SE1801,FA24
HE180315,SE1801,FA24
HE180316,SE1802,FA24
```

400-Invalid type:
{
  "status": 400,
  "message": "Invalid template type. Must be: students, staff, classes, slots, enrollments",
  "code": "INVALID_TEMPLATE_TYPE"
}

=======================================================================================================================
============================================== Export students to CSV =================================================

6. GET /api/v1/export/students
Permission: USER_READ_LIST
Description: Export students to CSV file. Sync export with max 10,000 rows.

Query Parameters:
| Parameter  | Type    | Required | Default | Validation
| majorId    | short   | No       | null    | Filter by major
| isActive   | boolean | No       | null    | Filter by active status
| search     | string  | No       | ""      | Search in name, rollNumber, email

200-Success Response:
Content-Type: text/csv
Content-Disposition: attachment; filename="students_export_20241019.csv"

File Content:
```csv
rollNumber,fullName,email,majorCode,majorName,isActive,createdAt
HE180314,Tran Thi B,tranthib@fpt.edu.vn,SE,Software Engineering,true,2024-09-01T08:00:00Z
HE180315,Le Van C,levanc@fpt.edu.vn,SE,Software Engineering,true,2024-09-01T08:05:00Z
HE180316,Nguyen Thi D,nguyenthid@fpt.edu.vn,IA,Information Assurance,true,2024-09-01T08:10:00Z
```

400-Too many rows:
{
  "status": 400,
  "message": "Export exceeds maximum limit of 10,000 rows. Please add filters to reduce result set.",
  "code": "TOO_MANY_ROWS"
}

=======================================================================================================================
=============================================== Export staff to CSV ==================================================

7. GET /api/v1/export/staff
Permission: USER_READ_LIST
Description: Export staff to CSV file. Sync export with max 10,000 rows.

Query Parameters:
| Parameter  | Type    | Required | Default | Validation
| roleId     | short   | No       | null    | Filter by role
| isActive   | boolean | No       | null    | Filter by active status
| search     | string  | No       | ""      | Search in name, staffCode, email

200-Success Response:
Content-Type: text/csv
Content-Disposition: attachment; filename="staff_export_20241019.csv"

File Content:
```csv
staffCode,fullName,email,roles,isActive,createdAt
EMP001,Nguyen Van A,nguyenvana@fpt.edu.vn,LECTURER,true,2024-08-01T10:00:00Z
EMP002,Tran Thi B,tranthib@fpt.edu.vn,"LECTURER,SUPERVISOR",true,2024-08-01T10:05:00Z
EMP003,Le Van C,levanc@fpt.edu.vn,DATA_OPERATOR,true,2024-08-01T10:10:00Z
```

=======================================================================================================================
=============================================== Export classes to CSV ================================================

8. GET /api/v1/export/classes
Permission: CLASS_READ
Description: Export classes to CSV file. Sync export with max 10,000 rows.

Query Parameters:
| Parameter   | Type    | Required | Default | Validation
| semesterId  | short   | No       | null    | Filter by semester
| subjectId   | short   | No       | null    | Filter by subject
| isActive    | boolean | No       | null    | Filter by active status

200-Success Response:
Content-Type: text/csv
Content-Disposition: attachment; filename="classes_export_20241019.csv"

File Content:
```csv
classCode,subjectCode,subjectName,semesterCode,semesterName,totalEnrolled,isActive,createdAt
SE1801,SWP391,Software Development Project,FA24,Fall 2024,25,true,2024-09-01T10:00:00Z
SE1802,SWP391,Software Development Project,FA24,Fall 2024,28,true,2024-09-01T10:05:00Z
AI2401,AIE301,Artificial Intelligence,SP25,Spring 2025,30,true,2024-01-15T10:00:00Z
```

=======================================================================================================================
=========================================== Export attendance records to CSV ==========================================

9. GET /api/v1/export/attendance
Permission: REPORT_EXPORT_ACADEMIC_DATA
Description: Export attendance records to CSV file. Sync export with max 10,000 rows.

Query Parameters:
| Parameter   | Type    | Required | Default | Validation
| semesterId  | short   | No       | null    | Filter by semester
| classId     | short   | No       | null    | Filter by class
| slotId      | integer | No       | null    | Filter by slot
| startDate   | string  | No       | null    | YYYY-MM-DD (filter from this date)
| endDate     | string  | No       | null    | YYYY-MM-DD (filter to this date)
| status      | string  | No       | null    | Filter by status: not_yet, present, absent

200-Success Response:
Content-Type: text/csv
Content-Disposition: attachment; filename="attendance_export_20241019.csv"

File Content:
```csv
slotId,slotDate,slotTime,classCode,subjectCode,rollNumber,studentName,status,method,recordedAt
1,2024-10-17,08:00-10:00,SE1801,SWP391,HE180314,Tran Thi B,present,auto,2024-10-17T08:15:30Z
1,2024-10-17,08:00-10:00,SE1801,SWP391,HE180315,Le Van C,absent,manual,2024-10-17T08:30:00Z
2,2024-10-18,08:00-10:00,SE1801,SWP391,HE180314,Tran Thi B,present,auto,2024-10-18T08:12:15Z
```

400-Too many rows:
{
  "status": 400,
  "message": "Export exceeds maximum limit of 10,000 rows. Please add filters to reduce result set.",
  "code": "TOO_MANY_ROWS"
}

=======================================================================================================================
====================================================== Notes ==========================================================

Import Strategy:
- PARTIAL SUCCESS: Import valid rows, skip invalid rows
- Return detailed summary with errors and warnings
- Max 10,000 rows per file
- Max 5MB file size
- UTF-8 with BOM encoding (Excel compatible)

Export Strategy:
- SYNC export: Generate and return file immediately
- CSV format only (universal, simple)
- Max 10,000 rows per export
- If exceeds limit: return 400 error, ask user to add filters
- Filename pattern: {type}_export_{YYYYMMDD}.csv

CSV Format:
- Encoding: UTF-8 with BOM
- Delimiter: comma (,)
- Header row: Always included
- Quote: Double quotes for fields containing comma
- Line ending: CRLF (Windows compatible)

Validation Level:
- BASIC validation: Format, existence, duplicates, business rules
- No deep validation: No cross-reference checks, no data quality checks
- Fast validation: < 5 seconds for 10,000 rows

Duplicate Handling (Import):
- Within file: Keep first occurrence, warn about duplicates
- With database: Skip existing records, report as warning
- No update: Import does not update existing records

Error Reporting (Import):
- errors[]: Validation failures (row cannot be imported)
- warnings[]: Skipped rows (duplicates, already exists)
- Each error/warning includes: row number, relevant fields, reason

Template Files:
- Include header row + 3 sample rows
- UTF-8 with BOM encoding
- Sample data shows correct format
- Available types: students, staff, classes, slots, enrollments

Export Filters:
- Common filters: semester, class, date range, status, active/inactive
- Search: name, code, email (where applicable)
- No pagination: Single file export only

Performance:
- Import: ~1000 rows/second (basic validation)
- Export: ~2000 rows/second (simple query)
- Timeout: 30 seconds (enough for 10,000 rows)

Permissions:
- Import: Requires CREATE permission for respective entity
- Export: Requires READ_LIST permission for respective entity
- Template download: Public (CLASS_READ permission)

Business Rules:
- BR-37: Bulk Enrollment CSV Format (reused for all imports)
- Unique constraints enforced (rollNumber, email, staffCode, etc.)
- Foreign key validation (majorCode, subjectCode, etc.)
- Time conflict validation (slots only)

Related Use Cases:
- UC-77: Bulk Enroll Students to Classes via CSV
- UC-73: Export Academic Data

Audit Trail:
- Import operations logged to operational_audit_logs
- Includes: actor_user_id, action_type='BULK_IMPORT', summary (success/failed counts)
- Export operations: Not logged (read-only operation)

Common Status Codes:
- 200: Success
- 400: Bad Request (validation errors, file format, too many rows)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 500: Internal Server Error (file processing failed)
