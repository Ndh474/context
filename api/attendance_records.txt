GET     | /attendance-records                              | ATTENDANCE_ROSTER_READ
GET     | /attendance-records/{id}                         | ATTENDANCE_ROSTER_READ
PUT     | /attendance-records/{id}                         | ATTENDANCE_STATUS_UPDATE_MANUAL
POST    | /attendance/recognition-result                   | INTERNAL (API Key authentication)

# Remarks (see regular_attendance_remarks.txt for details)
POST    | /attendance-records/{attendanceRecordId}/remarks | ATTENDANCE_REMARK_MANAGE
GET     | /attendance-records/{attendanceRecordId}/remarks | ATTENDANCE_ROSTER_READ
PUT     | /attendance-records/remarks/{remarkId}           | ATTENDANCE_REMARK_MANAGE
DELETE  | /attendance-records/remarks/{remarkId}           | ATTENDANCE_REMARK_MANAGE

=============================================== Search attendance records ===============================================
1. GET /api/v1/attendance-records
Permission: ATTENDANCE_ROSTER_READ
Description: List attendance records with filtering and pagination support.

Query Parameters:
| Parameter      | Type    | Required | Default | Validation
|----------------|---------|----------|---------|-----------
| page           | integer | No       | 1       | >= 1
| pageSize       | integer | No       | 10      | >= 1
| sort           | string  | No       | desc    | asc, desc
| sortBy         | string  | No       | recordedAt | recordedAt, createdAt, updatedAt
| slotId         | integer | No       | null    | Filter by slot
| studentUserId  | integer | No       | null    | Filter by student
| classId        | short   | No       | null    | Filter by class
| semesterId     | short   | No       | null    | Filter by semester
| status         | string  | No       | null    | Filter by status: not_yet, present, absent
| method         | string  | No       | null    | Filter by method: auto, manual, system_finalize
| startDate      | string  | No       | null    | YYYY-MM-DD (filter slots from this date)
| endDate        | string  | No       | null    | YYYY-MM-DD (filter slots to this date)

200-Success Response:
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 501,
        "student": {
          "userId": 201,
          "fullName": "Tran Thi B",
          "rollNumber": "HE180314",
          "email": "tranthib@fpt.edu.vn"
        },
        "slot": {
          "id": 1,
          "title": "Introduction to Software Development",
          "startTime": "2024-10-17T08:00:00Z",
          "endTime": "2024-10-17T10:00:00Z",
          "slotCategory": "LECTURE",
          "class": {
            "id": 1,
            "code": "SE1801",
            "subject": { "name": "Software Development Project", "code": "SWP391" },
            "semester": { "name": "Fall 2024", "code": "FA24" }
          }
        },
        "status": "present",
        "method": "auto",
        "recordedAt": "2024-10-17T08:15:30Z",
        "remarks": [
          {
            "id": 1001,
            "remark": "Recognized by camera 1",
            "createdBy": {
              "id": 10,
              "fullName": "John Lecturer"
            },
            "createdAt": "2024-10-17T08:15:30Z"
          }
        ],
        "createdAt": "2024-10-17T08:00:00Z",
        "updatedAt": "2024-10-17T08:15:30Z"
      }
    ],
    "totalPages": 10,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 95
  }
}

Response Schema (items):
| Field      | Type   | Description
|------------|--------|-----------
| id         | long   | Attendance record ID
| student    | object | Student details (userId, fullName, rollNumber, email)
| slot       | object | Slot details with nested class, subject, semester
| status     | string | not_yet, present, absent
| method     | string | auto, manual, system_finalize
| recordedAt | string | YYYY-MM-DDTHH:mm:SSZ (when status was recorded)
| remarks    | array  | List of active remarks (sorted by createdAt DESC)
| createdAt  | string | YYYY-MM-DDTHH:mm:SSZ
| updatedAt  | string | YYYY-MM-DDTHH:mm:SSZ

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must be >= 1 / Page size must >= 1 / Invalid status value",
  "code": "INVALID_PAGE" | "INVALID_SORT" | "INVALID_STATUS"
}

=======================================================================================================================
=========================================== Get attendance record by ID ===============================================

2. GET /api/v1/attendance-records/{id}
Permission: ATTENDANCE_ROSTER_READ
Description: Get attendance record details including all remarks.

Path Parameters:
| Parameter | Type | Required | Description
| id        | long | Yes      | Attendance record ID

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 501,
    "student": {
      "userId": 201,
      "fullName": "Tran Thi B",
      "rollNumber": "HE180314",
      "email": "tranthib@fpt.edu.vn",
      "major": {
        "name": "Software Engineering"
      },
      "baseUrl": null
    },
    "slot": {
      "id": 1,
      "title": "Introduction to Software Development",
      "startTime": "2024-10-17T08:00:00Z",
      "endTime": "2024-10-17T10:00:00Z",
      "slotCategory": "LECTURE",
      "finalizedAt": "2024-10-17T10:30:00Z",
      "class": {
        "id": 1,
        "code": "SE1801",
        "subject": { "name": "Software Development Project", "code": "SWP391" },
        "semester": { "name": "Fall 2024", "code": "FA24" }
      },
      "staffUser": {
        "id": 10,
        "username": "John Lecturer"
      }
    },
    "status": "present",
    "method": "auto",
    "recordedAt": "2024-10-17T08:15:30Z",
    "remarks": [
      {
        "id": 1001,
        "remark": "Recognized by camera 1 with 95% confidence",
        "createdBy": {
          "id": 10,
          "fullName": "John Lecturer"
        },
        "isActive": true,
        "createdAt": "2024-10-17T08:15:30Z",
        "updatedAt": "2024-10-17T08:15:30Z"
      }
    ],
    "createdAt": "2024-10-17T08:00:00Z",
    "updatedAt": "2024-10-17T08:15:30Z"
  }
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'",
  "code": "INVALID_FIELD_TYPE"
}

404-Attendance record not found:
{
  "status": 404,
  "message": "Attendance record not found: 501",
  "code": "ATTENDANCE_RECORD_NOT_FOUND"
}

=======================================================================================================================
======================================= Manual update attendance status ===============================================

3. PUT /api/v1/attendance-records/{id}
Permission: ATTENDANCE_STATUS_UPDATE_MANUAL
Description: Manually update attendance status. Remark is optional when changing status.

Path Parameters:
| Parameter | Type | Required | Description
| id        | long | Yes      | Attendance record ID

Request Body:
{
  "status": "absent",
  "remark": "Student was sick, provided medical certificate"
}

Request Schema:
| Field  | Type   | Required | Validation
|--------|--------|----------|-----------
| status | string | Yes      | Must be: not_yet, present, absent
| remark | string | No       | Optional, max 1000 chars

Business Rules:
- Remark is optional for manual status changes
- Before 23:59:59 UTC of slot date, assigned staff can edit
- After 23:59:59 UTC of slot date, only Data Operator can edit
- Status transition rules apply
- Method is automatically set to 'manual'
- recordedAt is updated to current timestamp
- Audit log is created

Time-Based Edit Window Validation:
1. Get slot.start_time from attendance record
2. Calculate cutoff: slot_date 23:59:59 UTC
3. If current_time <= cutoff:
   - Check if user is assigned staff (slot.staff_user_id = current_user_id)
   - If yes: allow edit
   - If no: 403 Forbidden
4. If current_time > cutoff:
   - Check if user has ATTENDANCE_STATUS_UPDATE_MANUAL permission (Data Operator)
   - If yes: allow edit
   - If no: 403 Forbidden

200-Success Response:
{
  "status": 200,
  "message": "Attendance status updated successfully",
  "data": {
    "id": 501,
    "student": {
      "userId": 201,
      "fullName": "Tran Thi B",
      "rollNumber": "HE180314",
      "email": "tranthib@fpt.edu.vn",
      "major": {
        "name": "Software Engineering"
      },
      "baseUrl": null
    },
    "slot": {
      "id": 1,
      "title": "Introduction to Software Development",
      "startTime": "2024-10-17T08:00:00Z",
      "endTime": "2024-10-17T10:00:00Z",
      "slotCategory": "LECTURE"
    },
    "status": "absent",
    "method": "manual",
    "recordedAt": "2024-10-19T14:30:00Z",
    "remarks": [
      {
        "id": 1002,
        "remark": "Student was sick, provided medical certificate",
        "createdBy": {
          "id": 10,
          "fullName": "John Lecturer"
        },
        "createdAt": "2024-10-19T14:30:00Z"
      },
      {
        "id": 1001,
        "remark": "Recognized by camera 1 with 95% confidence",
        "createdBy": {
          "id": 10,
          "fullName": "John Lecturer"
        },
        "createdAt": "2024-10-17T08:15:30Z"
      }
    ],
    "createdAt": "2024-10-17T08:00:00Z",
    "updatedAt": "2024-10-19T14:30:00Z"
  }
}

400-Fields required:
{
  "status": 400,
  "message": "Status is required / Remark is required for manual status changes",
  "code": "STATUS_REQUIRED" | "REMARK_REQUIRED"
}

400-Invalid status value:
{
  "status": 400,
  "message": "Invalid status value. Must be: not_yet, present, absent",
  "code": "INVALID_STATUS_VALUE"
}

400-Empty remark:
{
  "status": 400,
  "message": "Remark must not be blank when manually changing attendance status",
  "code": "REMARK_CANNOT_BE_EMPTY"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'",
  "code": "INVALID_FIELD_TYPE"
}

403-Edit window expired:
{
  "status": 403,
  "message": "Edit window has expired. Only Data Operator can edit attendance after 23:59:59 UTC of slot date",
  "code": "EDIT_WINDOW_EXPIRED"
}

403-Not assigned to slot:
{
  "status": 403,
  "message": "You are not assigned to this slot and cannot edit attendance",
  "code": "NOT_ASSIGNED_TO_SLOT"
}

404-Attendance record not found:
{
  "status": 404,
  "message": "Attendance record not found: 501",
  "code": "ATTENDANCE_RECORD_NOT_FOUND"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
===================================== Python callback: Recognition result ============================================

4. POST /api/v1/attendance/recognition-result
Authentication: API Key (X-API-Key header)
Description: Callback endpoint for Python recognition service to send face recognition results. Updates attendance status and stores evidence images.

Request Headers:
| Header    | Type   | Required | Description
| X-API-Key | string | Yes      | API key for Python service authentication

Request Body:
{
  "slotId": 1,
  "recognitions": [
    {
      "studentUserId": 201,
      "confidence": 0.95,
      "timestamp": "2024-10-19T08:15:30Z",
      "cameraId": 1,
      "evidence": {
        "regularImageUrl": "/uploads/evidence/regular/evidence_501.jpg",
        "examImageUrl": "/uploads/evidence/exam/evidence_1001.jpg"
      }
    },
    {
      "studentUserId": 202,
      "confidence": 0.92,
      "timestamp": "2024-10-19T08:15:31Z",
      "cameraId": 1,
      "evidence": {
        "regularImageUrl": "/uploads/evidence/regular/evidence_502.jpg",
        "examImageUrl": null
      }
    }
  ]
}

Request Schema:
| Field                                   | Type    | Required | Validation
|-----------------------------------------|---------|----------|-----------
| slotId                                  | integer | Yes      | Must exist
| recognitions                            | array   | Yes      | Not empty, max 100 items per request
| recognitions[].studentUserId            | integer | Yes      | Must exist and be enrolled in slot's class
| recognitions[].confidence               | float   | Yes      | 0.0 to 1.0
| recognitions[].timestamp                | string  | Yes      | ISO 8601 format
| recognitions[].cameraId                 | short   | Yes      | Must exist
| recognitions[].evidence                 | object  | No       | Contains URLs for evidence images
| recognitions[].evidence.regularImageUrl | string  | No       | URL/path to the regular attendance evidence image
| recognitions[].evidence.examImageUrl    | string  | No       | URL/path to the exam attendance evidence image

Business Rules:
- When face is recognized, update status to 'present'
- Only update if current status is 'not_yet' or 'present' (don't override 'absent')
- Set method = 'auto'
- Set recordedAt = recognition timestamp
- Create audit log for each update
- Concurrent update handling: Last Write Wins

Processing Logic:
1. Authenticate API Key.
2. Find slot by slotId and check its slotCategory.
3. For each recognition in the payload:
   a. If `slotCategory` is 'LECTURE' or 'LECTURE_WITH_PT':
      - Find `attendance_records` by (slot_id, student_user_id).
      - If found and status is not 'absent', update status to 'present', method to 'auto', and recordedAt.
      - If `evidence.regularImageUrl` is provided, create a new record in `regular_attendance_evidences`.
   b. If `slotCategory` is 'LECTURE_WITH_PT' or 'FINAL_EXAM':
      - Find `exam_attendance` by (slot_id, student_user_id).
      - If found and status is not 'absent', update status to 'present', method to 'auto', and recordedAt.
      - If `evidence.examImageUrl` is provided, create a new record in `exam_attendance_evidences`.
4. Return a summary of processed results.

200-Success Response:
{
  "status": 200,
  "message": "Recognition results processed successfully",
  "data": {
    "slotId": 1,
    "totalRecognitions": 2,
    "successCount": 2,
    "skippedCount": 0,
    "results": [
      {
        "studentUserId": 201,
        "status": "updated",
        "details": "Updated both regular and exam attendance."
      },
      {
        "studentUserId": 202,
        "status": "updated",
        "details": "Updated regular attendance only."
      }
    ]
  }
}

200-Success Response (with skipped):
{
  "status": 200,
  "message": "Recognition results processed with some skipped",
  "data": {
    "slotId": 1,
    "totalRecognitions": 3,
    "successCount": 2,
    "skippedCount": 1,
    "results": [
      {
        "studentUserId": 201,
        "status": "updated",
        "details": "Updated both regular and exam attendance."
      },
      {
        "studentUserId": 202,
        "status": "updated",
        "details": "Updated regular attendance only."
      },
      {
        "studentUserId": 203,
        "status": "skipped",
        "reason": "Current status is 'absent', manual override detected"
      }
    ]
  }
}

Response Schema:
| Field                   | Type    | Description
|-------------------------|---------|-----------
| slotId                  | integer | Slot ID
| totalRecognitions       | integer | Total recognition items in request
| successCount            | integer | Number of successfully updated records
| skippedCount            | integer | Number of skipped records
| results                 | array   | Processing result for each recognition
| results[].studentUserId | integer | Student user ID
| results[].status        | string  | updated, skipped, error
| results[].details       | string  | Description of what was updated (e.g., "Updated both regular and exam attendance.")
| results[].previousStatus| string  | Status before update (if updated)
| results[].newStatus     | string  | Status after update (if updated)
| results[].reason        | string  | Reason for skip/error (if applicable)

400-Fields required:
{
  "status": 400,
  "message": "Slot ID is required / Recognitions array is required",
  "code": "SLOT_ID_REQUIRED" | "RECOGNITIONS_REQUIRED"
}

400-Empty recognitions array:
{
  "status": 400,
  "message": "Recognitions array must not be empty",
  "code": "RECOGNITIONS_EMPTY"
}

400-Too many recognitions:
{
  "status": 400,
  "message": "Maximum 100 recognitions per request",
  "code": "TOO_MANY_RECOGNITIONS"
}

400-Invalid confidence value:
{
  "status": 400,
  "message": "Confidence must be between 0.0 and 1.0",
  "code": "INVALID_CONFIDENCE_VALUE"
}

401-Invalid API key:
{
  "status": 401,
  "message": "Invalid or missing API key",
  "code": "INVALID_API_KEY"
}

404-Slot not found:
{
  "status": 404,
  "message": "Slot not found: 1",
  "code": "SLOT_NOT_FOUND"
}

400-Malformed JSON:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
====================================================== Notes ==========================================================

Data Types:
- Attendance Record ID: Long (BIGINT)
- Remark ID: Long (BIGINT)
- Student User ID: Integer
- Slot ID: Integer
- Camera ID: Short
- All timestamps: ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SSZ

Attendance Status Values:
- not_yet: Initial state, student not yet marked
- present: Student is present (auto or manual)
- absent: Student is absent (manual only)

Method Values:
- auto: Status set by face recognition (Python service)
- manual: Status set by lecturer/supervisor manually
- system_finalize: Status set during slot finalization

Remark Management:
- Remarks are managed via dedicated endpoints: /api/v1/attendance-records/{attendanceRecordId}/remarks
- See regular_attendance_remarks.txt for full API documentation
- Multiple remarks per attendance record
- Soft delete (is_active = false)
- Only active remarks shown in responses
- Sorted by createdAt DESC (newest first)
- Creator can update/delete their own remarks
- Data Operators can update/delete any remark
- Database table: regular_attendance_remarks

Time-Based Edit Window:
- Cutoff: 23:59:59 UTC of slot date (based on slot.start_time)
- Before cutoff: Assigned staff can edit
- After cutoff: Only Data Operator can edit
- Calculation: Extract date from slot.start_time → add 23:59:59 UTC

Concurrent Update Handling:
- Strategy: Last Write Wins
- Python auto update + Lecturer manual update → Manual wins (later timestamp)
- No optimistic locking, no version field
- Audit logs track all changes

Python Callback Authentication:
- Method: API Key in X-API-Key header
- No JWT, no user context needed
- API key configured in system_configurations table
- Key rotation supported

Recognition Result Processing:
- Batch update: Up to 100 recognitions per request
- Skip if current status = 'absent' (manual override)
- Update if current status = 'not_yet' or 'present'
- Create audit log for each update
- Return detailed results (updated/skipped/error)

Permissions:
- ATTENDANCE_ROSTER_READ: View attendance records (Lecturer, Supervisor, Data Operator)
- ATTENDANCE_STATUS_UPDATE_MANUAL: Manual update status (Lecturer, Supervisor, Data Operator)
- ATTENDANCE_REMARK_MANAGE: Add/edit/delete remarks (Lecturer, Supervisor, Data Operator)

Business Rules:
- Face Recognition Status Update
- Same-Day Edit Window
- Post-Day Edit Restrictions
- Manual Edit Remark Requirement
- Attendance Status Transition Rules

Audit Trail:
- All status changes logged to operational_audit_logs
- Includes: actor_user_id, action_type, target_entity, target_id, changes (before/after)
- Python auto updates also logged (actor = system service account)

Related API Documentation:
- regular_attendance_remarks.txt: Remark management for regular attendance
- exam_attendance.txt: Exam attendance management (LECTURE_WITH_PT, FINAL_EXAM)
- slots.txt: Slot management and finalization

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters)
- 401: Unauthorized (invalid API key for Python callback)
- 403: Forbidden (edit window expired, not assigned to slot)
- 404: Not Found (attendance record, slot not found)
- 500: Internal Server Error
