POST   	| /student-profiles 	   			     
GET    	| /student-profiles 	   			     
GET    	| /student-profiles/{id} 		     
PUT    	| /student-profiles/{id} 			   
DELETE 	| /student-profiles/{id}
POST   	| /student-profiles/import 			  
GET    	| /student-profiles/{id}/classes
GET    	| /student-profiles/{id}/attendance-history

=================================================== Search student profiles ==================================================

2. GET /api/v1/student-profiles
Permission: USER_READ_LIST
Query Parameters:
| Parameter 	| Type 		      | Required 	| Default | Validation 
| page 		    | integer 	    | No 		    | 1 		  | 1-50 
| pageSize 	  | integer 	    | No 		    | 10 		  | 1-50 
| sort 		    | string 	      | No 		    | asc 		| asc/desc 
| sortBy 	    | string 	      | No		    | fullName | fullName, rollNumber, email, majorName
| search 	    | string 	      | No 		    | "" 		  | Search in fullName, rollNumber, email
| majorId 	  | short         | No 		    | null 		| Filter by major
| isActive    | boolean      | No        | null    | Filter by active status

200-Success Response
{
  "status": 200,
  "data": {
    "items": [
      {
        "userId": 201,
        "fullName": "Tran Thi B",
        "email": "tranthib@fpt.edu.vn",
        "username": "HE180314",
        "rollNumber": "HE180314",
        "major": {
          "id": 1,
          "name": "Software Engineering",
          "code": "SE",
          "isActive": true
        },
        "baseUrl": "/identity/student_201_photo.jpg",
        "isActive": true,
        "createdAt": "2025-10-27T06:09:54.697234Z",
        "updatedAt": "2025-10-27T06:09:54.697234Z"
      },
	...
    ],
    "totalPages": 5,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 45
  }
}

Response Schema (items):
| Field      | Type          | Description
| userId     | integer       | User ID (same as user_id in users table)
| fullName   | string        | Student full name
| email      | string        | Student email address
| username   | string        | Login username (distinct from rollNumber)
| rollNumber | string        | Student roll number (e.g., HE180314)
| major      | object        | Major object (nested)
| major.id   | short         | Major ID
| major.name | string        | Major name
| major.code | string        | Major code (e.g., SE, IA, IOT)
| major.isActive | boolean   | Major active status
| baseUrl    | string        | Path to student's identity photo (e.g., "/identity/student_201_photo.jpg"), nullable if not uploaded
| isActive   | boolean       | Account active status
| createdAt  | string        | Creation timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)
| updatedAt  | string        | Last update timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, Invalid sort parameter...",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY"
}
=======================================================================================================================
=================================================== Get student profile by id ================================================

3. GET /api/v1/student-profiles/{id}
Permission: USER_READ_DETAIL
| Parameter 	| Type 	| Required 	| Description
| id 		| int   | Yes 		| Student Profile ID (user_id)

200-Success Response:
{
  "status": 200,
  "message": null,
  "data": {
    "userId": 201,
    "fullName": "Tran Thi B",
    "email": "tranthib@fpt.edu.vn",
    "username": "HE180314",
    "rollNumber": "HE180314",
    "major": {
      "id": 1,
      "name": "Software Engineering",
      "code": "SE",
      "isActive": true
    },
    "roles": ["STUDENT"],
    "baseUrl": "/identity/student_201_photo.jpg",
    "isActive": true,
    "hasActiveEmbedding": true,
    "canUseFaceRecognition": true,
    "createdAt": "2025-10-27T07:53:36.176219800Z",
    "updatedAt": "2025-10-27T07:53:36.176219800Z"
  }
}

Response Schema:
| Field      | Type          | Description
| userId     | integer       | User ID (same as user_id in users table)
| fullName   | string        | Student full name
| email      | string        | Student email address
| username   | string        | Login username (distinct from rollNumber)
| rollNumber | string        | Student roll number (e.g., HE180314)
| major      | object        | Major object (nested)
| major.id   | short         | Major ID
| major.name | string        | Major name
| major.code | string        | Major code (e.g., SE, IA, IOT)
| major.isActive | boolean   | Major active status
| roles      | array[string] | Always ["STUDENT"]
| baseUrl    | string        | Path to student's identity photo (e.g., "/identity/student_201_photo.jpg"), nullable if not uploaded
| isActive   | boolean       | Account active status
| hasActiveEmbedding | boolean | Indicates if the student has an active face vector in the 'face_embeddings' table
| canUseFaceRecognition | boolean | Derived logic. True if 'hasActiveEmbedding' is true
| createdAt  | string        | Creation timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)
| updatedAt  | string        | Last update timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Student profile not found:
{
  "status": 404,
  "message": "Student profile not found: 1",
  "code": "STUDENT_PROFILE_NOT_FOUND"
}

=======================================================================================================================
================================================ Create a new student profile ================================================
1. POST /api/v1/student-profiles
Permission: USER_CREATE

Request Body:
{
  "fullName": "Tran Thi B",
  "email": "tranthib@fpt.edu.vn",
  "username": "HieuNDHE180314",
  "rollNumber": "HE180314",
  "majorId": 1
}

Request Body Schema:
| Field      | Type          | Required | Validation 
| fullName   | string        | Yes      | Not blank, max 150 chars
|           |              |         | Pattern: ^[A-Za-z]+( [A-Za-z]+)*$ (letters and spaces only)
|           |              |         | No leading/trailing/multiple spaces
| email     | string        | Yes      | Valid email format, max 128 chars, unique
| username  | string        | Yes      | Unique login username; not equal to rollNumber (e.g., HieuNDHE180314)
| rollNumber| string        | Yes      | Not blank, max 20 chars, unique
|           |               |          | Pattern: ^[A-Z]{2}\d{6}$ (two uppercase letters + 6 digits; e.g., HE180314, HS181259, BE170843)
| majorId   | short         | Yes      | Valid major ID, must exist and be active

Notes:
- Response items also return `username` (login identifier) and `baseUrl` (path to identity photo) for convenience.
- Major is returned as a nested object for consistency with other endpoints.

201-Success Response:
{
  "status": 201,
  "data": {
    "userId": 201,
    "fullName": "Tran Thi B",
    "email": "tranthib@fpt.edu.vn",
    "username": "HieuNDHE180314",
    "rollNumber": "HE180314",
    "major": {
      "id": 1,
      "name": "Software Engineering",
      "code": "SE",
      "isActive": true
    },
    "roles": ["STUDENT"],
    "baseUrl": null,
    "isActive": true,
    "hasActiveEmbedding": false,
    "canUseFaceRecognition": false,
    "createdAt": "2025-10-27T07:53:36.176219800Z",
    "updatedAt": "2025-10-27T07:53:36.176219800Z"
  }
}

Response Schema:
| Field 	      | Type 		      | Description 
| userId 	      | int 	        | User ID (same as user_id in users table)
| fullName 	    | string 	      | Student full name 
| email 		    | string 	      | Student email address 
| username       | string        | Login username (distinct from rollNumber)
| rollNumber 	  | string        | Student roll number (e.g., HE180314)
| major          | object        | Major object (nested)
| major.id       | short         | Major ID
| major.name     | string        | Major name
| major.code     | string        | Major code (e.g., SE, IA, IOT)
| major.isActive | boolean       | Major active status
| roles 	      | array[string] | Always ["STUDENT"]
| baseUrl        | string        | Path to student's identity photo, null initially (not yet uploaded). Note: Create response may omit baseUrl field entirely if not set.
| isActive 	    | boolean 	    | Account active status
| hasActiveEmbedding | boolean | Indicates if the student has an active face vector in the 'face_embeddings' table
| canUseFaceRecognition | boolean | Derived logic. True if 'hasActiveEmbedding' is true
| createdAt 	  | string 	      | YYYY-MM-DDTHH:mm:SS.sssZ (with milliseconds/microseconds)
| updatedAt 	  | string 	      | YYYY-MM-DDTHH:mm:SS.sssZ (with milliseconds/microseconds)

400-Missing fields required:
{
  "status": 400,
  "message": "Full name must not be blank/Email required/Roll number required/Major ID required...",
  "code": "FULL_NAME_REQUIRED" | "EMAIL_REQUIRED" | "ROLL_NUMBER_REQUIRED" | "MAJOR_ID_REQUIRED"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Invalid email format/Invalid roll number format...",
  "code": "INVALID_EMAIL_FORMAT" | "INVALID_ROLL_NUMBER_FORMAT"
}

400-Fields existed:
{
  "status": 400,
  "message": "Email/Roll number already exists: tranthib@fpt.edu.vn",
  "code": "EMAIL_EXISTS" | "ROLL_NUMBER_EXISTS"
}

400-Invalid reference:
{
  "status": 400,
  "message": "Major not found: 1",
  "code": "MAJOR_NOT_FOUND"
}

400-Malformed request body:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}
=======================================================================================================================
=================================================== Update student profile ===================================================
Note:
- When setting isActive = false: Student account will be deactivated (soft delete)
- When setting isActive = true: Student account will be reactivated
- Role is always STUDENT and cannot be changed

4. PUT /api/v1/student-profiles/{id}
Permission: USER_UPDATE_INFO, USER_UPDATE_STATUS

Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| id 		      | int   | Yes 		  | Student Profile ID (user_id)

Request Body:
{
  "fullName": "Tran Thi B - Updated",
  "email": "tranthib.updated@fpt.edu.vn",
  "username": "HieuNDHE180314",
  "rollNumber": "HE180314",
  "majorId": 1,
  "isActive": true
}

Request body schema:
| Field     | Type     | Required  | Validation
| fullName  | string   | Yes       | Not blank, max 150 chars
|           |          |           | Pattern: ^[A-Za-z]+( [A-Za-z]+)*$ (letters and spaces only)
|           |          |           | No leading/trailing/multiple spaces
| email     | string   | Yes       | Valid email format, max 128 chars, unique
| username  | string   | Yes       | Unique login username; not equal to rollNumber
| rollNumber| string   | Yes       | Not blank, max 20 chars, unique
|           |          |           | Pattern: ^[A-Z]{2}\d{6}$ (two uppercase letters + 6 digits)
| majorId   | short    | Yes       | Valid major ID, must exist and be active
| isActive  | boolean  | Yes       | Not null

200-Success Response:
{
  "status": 200,
  "data": {
    "userId": 201,
    "fullName": "Tran Thi B - Updated",
    "email": "tranthib.updated@fpt.edu.vn",
    "username": "HE180314",
    "rollNumber": "HE180314",
    "major": {
      "id": 1,
      "name": "Software Engineering",
      "code": "SE",
      "isActive": true
    },
    "roles": ["STUDENT"],
    "baseUrl": "/identity/student_201_photo.jpg",
    "isActive": true,
    "hasActiveEmbedding": true,
    "canUseFaceRecognition": true,
    "createdAt": "2025-10-27T07:53:36.176220Z",
    "updatedAt": "2025-10-27T07:53:36.176220Z"
  }
}

Response Schema:
| Field      | Type          | Description
| userId     | integer       | User ID (same as user_id in users table)
| fullName   | string        | Student full name
| email      | string        | Student email address
| username   | string        | Login username (distinct from rollNumber, cannot be changed)
| rollNumber | string        | Student roll number (e.g., HE180314)
| major      | object        | Major object (nested)
| major.id   | short         | Major ID
| major.name | string        | Major name
| major.code | string        | Major code (e.g., SE, IA, IOT)
| major.isActive | boolean   | Major active status
| roles      | array[string] | Always ["STUDENT"]
| baseUrl    | string        | Path to student's identity photo, nullable if not uploaded
| isActive   | boolean       | Account active status
| hasActiveEmbedding | boolean | Indicates if the student has an active face vector in the 'face_embeddings' table
| canUseFaceRecognition | boolean | Derived logic. True if 'hasActiveEmbedding' is true
| createdAt  | string        | Creation timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)
| updatedAt  | string        | Last update timestamp (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)

Other errors are similar to Create Student Profile plus the following:
404-Student profile not found:
{
  "status": 404,
  "message": "Student profile not found: 1",
  "code": "STUDENT_PROFILE_NOT_FOUND"
}
=======================================================================================================================
=================================================== Delete student profile ===================================================

5. DELETE /api/v1/student-profiles/{id}
Permission: USER_DELETE_HARD
Path Parameters:
| Parameter 	| Type 	| Required | Description
| id 		      | int   | Yes 		 | Student Profile ID (user_id)

200-Success Response:
{
  "status": 200,
  "message": "Delete student profile successfully"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Student profile not found:
{
  "status": 404,
  "message": "Student profile not found: 1",
  "code": "STUDENT_PROFILE_NOT_FOUND"
}

409 - Conflict (foreign key constraint):
{
  "status": 409,
  "message": "Cannot delete student profile with enrollment history or attendance records",
  "code": "FOREIGN_KEY_CONSTRAINT_VIOLATION"
}

=======================================================================================================================
============================================ Bulk Import Student Profiles =============================================
Note:
- This API implements "Upsert" logic based on 'rollNumber' as the key and supports 'Interactive Import Flow'.
- API processes with 'Partial Success' pattern. Creates new users and corresponding profiles.

6. POST /api/v1/student-profiles/import
Permission: USER_IMPORT

Request Body: (Content-Type: multipart/form-data)
| Part Name | Type        | Required | Validation / Description
| file      | file (.csv) | Yes      | CSV file containing student data.
| mode      | string      | Yes      | Import mode: 'AddOnly' or 'AddAndUpdate'.

Business Rules:
- Business key is 'rollNumber'. Username is independent from rollNumber.
- If mode = 'AddOnly': Skip rows where 'rollNumber' or 'email' already exists.
- If mode = 'AddAndUpdate': Update rows where 'rollNumber' already exists (fullName, email, majorId). Does not update password.

200-Success Response (Returns only error list):
(Always returns 200 OK. 'data' is an ARRAY containing error rows. Empty array '[]' means all rows in this batch succeeded.)
{
  "status": 200,
  "message": "Import processed.",
  "data": [
    {
      "rowNumber": 3,
      "errorCode": "ROLL_NUMBER_EXISTS",
      "message": "Duplicate 'rollNumber' (HE123456) in 'AddOnly' mode."
    },
    {
      "rowNumber": 5,
      "errorCode": "EMAIL_EXISTS",
      "message": "Email 'existing.email@fpt.edu.vn' already exists."
    },
    {
      "rowNumber": 7,
      "errorCode": "MAJOR_NOT_FOUND",
      "message": "Major ID '99' not found or inactive."
    },
    {
      "rowNumber": 8,
      "errorCode": "INVALID_ROLL_NUMBER_FORMAT",
      "message": "Roll number 'SE123456' does not match pattern '^HE\\d{6}$'."
    }
  ]
}

Response Schema:
| Field      | Type          | Description
| status     | integer       | Always 200 for processed requests
| message    | string        | "Import processed."
| data       | array[object] | Array of error objects (empty if all rows succeeded)

Error Object Schema:
| Field      | Type    | Description
| rowNumber  | integer | Row number in CSV file (1-based, excluding header)
| errorCode  | string  | Error code identifier
| message    | string  | Human-readable error message

Possible Error Codes in data array:
- ROLL_NUMBER_EXISTS: Duplicate rollNumber in AddOnly mode
- EMAIL_EXISTS: Email already exists
- MAJOR_NOT_FOUND: Major ID not found or inactive
- INVALID_ROLL_NUMBER_FORMAT: Roll number format validation failed
- FULL_NAME_REQUIRED: Full name field is blank
- EMAIL_REQUIRED: Email field is blank
- ROLL_NUMBER_REQUIRED: Roll number field is blank
- MAJOR_ID_REQUIRED: Major ID field is blank
- INVALID_EMAIL_FORMAT: Email format validation failed
- INVALID_FIELD_FORMAT: Field format validation failed

400-Bad Request (File or Mode missing/invalid):
{
  "status": 400,
  "message": "Required part 'file' is not present / Invalid import mode.",
  "code": "INVALID_MULTIPART_REQUEST" | "INVALID_IMPORT_MODE"
}

400-Invalid file format:
{
  "status": 400,
  "message": "Invalid CSV format / Missing required columns",
  "code": "INVALID_CSV_FORMAT" | "MISSING_CSV_COLUMNS"
}

403-Forbidden:
{
  "status": 403,
  "message": "Permission USER_IMPORT is required.",
  "code": "FORBIDDEN"
}

=======================================================================================================================
============================================ Get classes by student profile id ===============================================
Note: 
- Get classes where this student is enrolled

7. GET /api/v1/student-profiles/{studentId}/classes
Permission: CLASS_READ
Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| studentId 	| int   | Yes 		  | Student Profile ID (user_id)

Query Parameters:
| Parameter 	| Type 		| Required| Default | Validation
| page 		    | integer | No 		  | 1 		  | 1-50
| pageSize 	  | integer | No 		  | 10 		  | 1-50
| sort 		    | string 	| No 		  | asc 		| asc/desc
| sortBy 	    | string 	| No 		  | code 		| code
| search 	    | string 	| No 		  | "" 		  | Search in class code and subject name
| semesterId  | short   | No      | null    | Filter by semester
| enrollmentStatus | boolean | No | null   | Filter by enrollment status (true=enrolled, false=withdrawn)
| isActive    | boolean | No      | null    | Filter by active status

200-Success Response: 
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "code": "SE1801",
        "subject": {
          "id": 1,
          "name": "Java Programming",
          "code": "PRJ301",
          "isActive": true
        },
        "semester": {
          "id": 1,
          "name": "Fall 2024",
          "code": "FA24",
          "isActive": true
        },
        "enrollmentStatus": true,
        "isActive": true,
        "createdAt": "2025-10-27T06:09:54.697234Z",
        "updatedAt": "2025-10-27T06:09:54.697234Z"
      },
	    ...
    ],
    "totalPages": 2,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 12
  }
}

Class Object Schema:
| Field            | Type    | Description
| id               | integer | Class ID (Short type in DB)
| code             | string  | Class code
| subject          | object  | Subject object (id, name, code, isActive)
| semester         | object  | Semester object (id, name, code, isActive)
| enrollmentStatus | boolean | Student enrollment status (true=enrolled, false=withdrawn)
| isActive         | boolean | Class active status
| createdAt        | string  | YYYY-MM-DDTHH:mm:SS.sssZ (with milliseconds/microseconds)
| updatedAt        | string  | YYYY-MM-DDTHH:mm:SS.sssZ (with milliseconds/microseconds)

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, Invalid sort parameter...",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Student profile not found:
{
  "status": 404,
  "message": "Student profile not found: 1",
  "code": "STUDENT_PROFILE_NOT_FOUND"
}




=======================================================================================================================
======================================= Get attendance history by student id ==========================================

8. GET /api/v1/student-profiles/{id}/attendance-history
Permission:
- OWN_ATTENDANCE_HISTORY_READ (for students viewing their own history)
- REPORT_READ_SYSTEM_WIDE (for Data Operators viewing any student's history)

Description:
Returns complete attendance history including LECTURE, LECTURE_WITH_PT, and FINAL_EXAM records
with smart filtering and comprehensive statistics. This unified API combines data from both
attendance_records and exam_attendance tables.

Business Rules:
- Returns a paginated list of ALL attendance records (class-based + exam-based) for a specific student
- Students can only access their own history. Data Operators can access any student's history
- Provides comprehensive summary statistics with breakdown by type and category
- Smart filtering logic handles different attendance types automatically

Path Parameters:
| Parameter | Type | Required | Description
| id        | int  | Yes      | Student Profile ID (user_id)

Query Parameters:
| Parameter        | Type    | Required | Default  | Validation
| page             | integer | No       | 1        | 1-50
| pageSize         | integer | No       | 10       | 1-50
| sort             | string  | No       | desc     | asc/desc
| sortBy           | string  | No       | slotDate | slotDate, className, subjectName, slotCategory
| semesterId       | short   | No       | null     | Filter by a specific semester
| classId          | short   | No       | null     | Filter by class (excludes FINAL_EXAM if set)
| subjectId        | integer | No       | null     | Filter by subject (includes FINAL_EXAM)
| slotCategory     | string  | No       | null     | Filter by: LECTURE, LECTURE_WITH_PT, FINAL_EXAM
| attendanceType   | string  | No       | all      | Filter by: class, exam, all
| attendanceStatus | string  | No       | null     | Filter by status: present, absent, not_yet
| startDate        | string  | No       | null     | Filter slots from date (YYYY-MM-DD)
| endDate          | string  | No       | null     | Filter slots to date (YYYY-MM-DD)

Smart Filter Logic:
- attendanceType = "class"  → Returns LECTURE + LECTURE_WITH_PT (class-based attendance only)
- attendanceType = "exam"   → Returns LECTURE_WITH_PT + FINAL_EXAM (exam attendance only)
- attendanceType = "all"    → Returns everything (default, most flexible)
- If classId is set         → Automatically excludes FINAL_EXAM (since they have no class)
- If subjectId is set       → Includes FINAL_EXAM records matching that subject
- slotCategory filter       → Precise control over which categories to include

200-Success Response:
{
  "status": 200,
  "data": {
    "items": [
      {
        "recordId": "ATT_501",
        "recordType": "regular",
        "slotId": 101,
        "slotDate": "2024-10-15",
        "slotTime": "08:00-09:30",
        "slotCategory": "LECTURE",
        "subjectCode": "PRJ301",
        "subjectName": "Java Programming",
        "className": "SE1801",
        "lecturerName": "Nguyen Van A",
        "roomName": "Room 101",
        "attendanceStatus": "present",
        "method": "auto",
        "remarks": null,
        "finalizedAt": "2024-10-15T10:00:00Z"
      },
      {
        "recordId": "EXAM_1001",
        "recordType": "exam",
        "slotId": 201,
        "slotDate": "2024-12-15",
        "slotTime": "08:00-10:00",
        "slotCategory": "FINAL_EXAM",
        "subjectCode": "SWP391",
        "subjectName": "Software Development Project",
        "className": null,
        "lecturerName": "Tran Van B",
        "roomName": "Room 301",
        "attendanceStatus": "present",
        "method": "auto",
        "remarks": "Recognized by camera 2",
        "finalizedAt": "2024-12-15T10:30:00Z"
      },
      {
        "recordId": "EXAM_1002",
        "recordType": "exam",
        "slotId": 102,
        "slotDate": "2024-10-12",
        "slotTime": "10:00-11:30",
        "slotCategory": "LECTURE_WITH_PT",
        "subjectCode": "PRJ301",
        "subjectName": "Java Programming",
        "className": "SE1801",
        "lecturerName": "Nguyen Van A",
        "roomName": "Room 101",
        "attendanceStatus": "absent",
        "method": "system_finalize",
        "remarks": "Student did not attend the exam.",
        "finalizedAt": "2024-10-12T12:00:00Z"
      }
    ],
    "totalPages": 5,
    "currentPage": 1,
    "pageSize": 20,
    "totalItems": 93,
    "summary": {
      "overall": {
        "totalSlots": 93,
        "presentCount": 85,
        "absentCount": 8,
        "notYetCount": 0,
        "attendanceRate": 91.40
      },
      "byType": {
        "class": {
          "totalSlots": 68,
          "presentCount": 63,
          "absentCount": 5,
          "notYetCount": 0,
          "attendanceRate": 92.65
        },
        "exam": {
          "totalSlots": 25,
          "presentCount": 22,
          "absentCount": 3,
          "notYetCount": 0,
          "attendanceRate": 88.0
        }
      },
      "byCategory": {
        "LECTURE": {
          "totalSlots": 53,
          "presentCount": 49,
          "absentCount": 4,
          "notYetCount": 0,
          "attendanceRate": 92.45
        },
        "LECTURE_WITH_PT": {
          "totalSlots": 15,
          "presentCount": 14,
          "absentCount": 1,
          "notYetCount": 0,
          "attendanceRate": 93.33
        },
        "FINAL_EXAM": {
          "totalSlots": 10,
          "presentCount": 8,
          "absentCount": 2,
          "notYetCount": 0,
          "attendanceRate": 80.0
        }
      }
    }
  }
}

Response Schema (items):
| Field            | Type   | Description
| recordId         | string | Unique identifier across both tables (e.g., "ATT_501", "EXAM_1001")
| recordType       | string | "regular" (from attendance_records) or "exam" (from exam_attendance)
| slotId           | int    | ID of the slot
| slotDate         | string | Date of the slot (YYYY-MM-DD)
| slotTime         | string | Time range of the slot (HH:mm-HH:mm)
| slotCategory     | string | LECTURE, LECTURE_WITH_PT, or FINAL_EXAM
| subjectCode      | string | Subject code (e.g., "PRJ301", "SWP391")
| subjectName      | string | Name of the subject
| className        | string | Code of the class (null for FINAL_EXAM slots)
| lecturerName     | string | Full name of the assigned lecturer/supervisor
| roomName         | string | Name of the room
| attendanceStatus | string | "present", "absent", or "not_yet"
| method           | string | How status was recorded: "auto", "manual", "system_finalize"
| remarks          | string | Any remarks added for this attendance record (null if none)
| finalizedAt      | string | Timestamp when the slot was finalized (YYYY-MM-DDTHH:mm:SS.sssZ with milliseconds/microseconds)

Response Schema (summary):
| Field                          | Type   | Description
| overall                        | object | Overall attendance statistics
| overall.totalSlots             | int    | Total number of all slots
| overall.presentCount           | int    | Count of 'present' statuses
| overall.absentCount            | int    | Count of 'absent' statuses
| overall.notYetCount            | int    | Count of 'not_yet' statuses
| overall.attendanceRate         | float  | Overall percentage (presentCount / totalSlots * 100)
| byType                         | object | Breakdown by attendance type
| byType.class                   | object | Statistics for class-based attendance (LECTURE + LECTURE_WITH_PT)
| byType.class.totalSlots        | int    | Total class attendance slots
| byType.class.presentCount      | int    | Present count for class attendance
| byType.class.absentCount       | int    | Absent count for class attendance
| byType.class.notYetCount       | int    | Not yet count for class attendance
| byType.class.attendanceRate    | float  | Class attendance rate percentage
| byType.exam                    | object | Statistics for exam attendance (LECTURE_WITH_PT + FINAL_EXAM exams)
| byType.exam.totalSlots         | int    | Total exam slots
| byType.exam.presentCount       | int    | Present count for exams
| byType.exam.absentCount        | int    | Absent count for exams
| byType.exam.notYetCount        | int    | Not yet count for exams
| byType.exam.attendanceRate     | float  | Exam attendance rate percentage
| byCategory                     | object | Breakdown by slot category
| byCategory.LECTURE             | object | Statistics for LECTURE slots only
| byCategory.LECTURE_WITH_PT     | object | Statistics for LECTURE_WITH_PT slots only
| byCategory.FINAL_EXAM          | object | Statistics for FINAL_EXAM slots only

Note: Each category object (LECTURE, LECTURE_WITH_PT, FINAL_EXAM) contains:
- totalSlots, presentCount, absentCount, notYetCount, attendanceRate

Usage Examples:

Example 1 - Get all class-based attendance for a semester:
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&attendanceType=class

Example 2 - Get all exam attendance (progress tests + final exams):
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&attendanceType=exam

Example 3 - Get only final exam attendance:
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&slotCategory=FINAL_EXAM

Example 4 - Get attendance for specific class (excludes FINAL_EXAM automatically):
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&classId=10

Example 5 - Get FINAL_EXAM attendance for specific subject:
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&subjectId=5&slotCategory=FINAL_EXAM

Example 6 - Get all attendance with date range:
GET /api/v1/student-profiles/201/attendance-history?startDate=2024-10-01&endDate=2024-12-31

Example 7 - Get only absent records:
GET /api/v1/student-profiles/201/attendance-history?semesterId=1&attendanceStatus=absent

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must be >= 1 / Invalid attendance status / Invalid slot category / Invalid attendance type",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY" | 
          "INVALID_ATTENDANCE_STATUS" | "INVALID_SLOT_CATEGORY" | "INVALID_ATTENDANCE_TYPE" | 
          "INVALID_DATE_FORMAT" | "INVALID_DATE_RANGE"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'",
  "code": "INVALID_FIELD_TYPE"
}

403 - Forbidden:
{
  "status": 403,
  "message": "You are not authorized to view this student's attendance history",
  "code": "FORBIDDEN"
}

404 - Student profile not found:
{
  "status": 404,
  "message": "Student profile not found: 1",
  "code": "STUDENT_PROFILE_NOT_FOUND"
}
=======================================================================================================================
====================================================== Notes ==========================================================

- Student Profile ID is of type Integer (same as user_id)
- All timestamps are in ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SS.sssZ (with milliseconds/microseconds)
- Search parameter searches in fullName, rollNumber, and email fields
- Pagination is 1-based (page=1 is the first page)
- Default sort is by id in ascending order
- Soft delete is done via PUT endpoint by setting isActive = false
- Hard delete via DELETE endpoint is permanent and may fail if student has enrollment/attendance history
- Roll number and email must be unique
- Username is provided by FE and must be unique; it is not auto-derived from rollNumber. Username cannot be changed after creation via admin API
- Students always have STUDENT role only
- hasActiveEmbedding indicates if student has face vector in face_embeddings table
- canUseFaceRecognition is derived: true if hasActiveEmbedding is true
- Import endpoint supports 'Interactive Import Flow' with partial success pattern
- Import mode 'AddOnly' skips existing students (by rollNumber), 'AddAndUpdate' updates them
- Import always returns 200 OK with error array (empty array means all rows succeeded)

Attendance Status Values:
- not_yet: Student has not been marked (initial state)
- present: Student is present (detected by face recognition or manually marked)
- absent: Student is absent (manually marked or finalized as absent)

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters, duplicate email/rollNumber)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found (student profile not found)
- 409: Conflict (foreign key constraint violation)
- 500: Internal Server Error

