POST   	| /semesters 	   			     
GET    	| /semesters 	   			     
GET    	| /semesters/{id} 		     
PUT    	| /semesters/{id} 			   
DELETE 	| /semesters/{id} 			  
GET    	| /semesters/{id}/classes
GET    	| /semesters/{id}/subjects
GET    	| /semesters/{id}/students
POST   	| /semesters/import

=================================================== Search semesters ==================================================
Note: tất cả các field không hợp lệ cho về default

2. GET /api/v1/semesters
Permission: SEMESTER_READ
Query Parameters:
| Parameter 	| Type 		      | Required 	| Default | Validation 
| page 		    | integer 	    | No 		    | 1 		  | 1-50 
| pageSize 	  | integer 	    | No 		    | 10 		  | 1-50 
| sort 		    | string 	      | No 		    | asc 		| asc/desc 
| sortBy 	    | string 	      | No		    | id 		  | name, code, startDate, endDate
| search 	    | string 	      | No 		    | "" 		  | Search in name and code
| isActive  | boolean | No | null | Filter by active status

200-Success Response
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "name": "Fall 2024",
        "code": "FA24",
        "startDate": "2024-09-01",
        "endDate": "2024-12-31",
        "isActive": true,
        "totalClass": 15,
        "createdAt": "2024-10-16T11:00:00Z",
        "updatedAt": "2024-10-16T11:00:00Z"
      },
	...
    ],
    "totalPages": 2,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 15
  }
}

=======================================================================================================================
=================================================== Get semester by id ================================================

3. GET /api/v1/semesters/{id}
Permission: SEMESTER_READ
| Parameter 	| Type 	| Required 	| Description
| id 		      | short | Yes 		  | Semester ID

200-Success Response:
{
  "status": 200,
  "message": null,
  "data": {
    "id": 1,
    "name": "Fall 2024",
    "code": "FA24",
    "startDate": "2024-09-01",
    "endDate": "2024-12-31",
    "isActive": true,
    "totalClass": 15,
    "createdAt": "2024-10-16T11:00:00Z",
    "updatedAt": "2024-10-16T11:00:00Z"
  }
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

=======================================================================================================================
================================================ Create a new semester ================================================
Business Rules:
1. Date Range Uniqueness: 
   - The combination (startDate, endDate) must be unique across ALL semesters
   - This rule applies regardless of semester status (active or inactive)
   - Prevents duplicate time periods in the system
   
2. Date Validation:
   - startDate must be before endDate
   - Both dates must be in YYYY-MM-DD format
   
3. Default Status:
   - New semesters are created with isActive = true by default

1. POST /api/v1/semesters
Permission: SEMESTER_CREATE
Request Body:
{
  "name": "Fall2024",		
  "code": "FA24",		
  "startDate": "2024-09-01",	
  "endDate": "2024-12-31"	
}

Request Body Schema:
| Field      | Type          | Required | Validation 
| name       | string        | Yes      | Not blank, max 20 chars, unique, allows letters/digits/spaces
|            |               |          | Pattern: ^[A-Za-z0-9]+( [A-Za-z0-9]+)*$
|            |               |          | No leading/trailing/multiple spaces. Examples: "Fall 2024", "Spring2025"
| code       | string        | Yes      | Not blank, max 10 chars, unique, allows letters/digits only (NO spaces)
|            |               |          | Pattern: ^[A-Za-z0-9]+$, Examples: "FA24", "SP2025"
| startDate  | string (date) | Yes      | YYYY-MM-DD, start date < end date, (start date + end date)-> unique
| endDate    | string (date) | Yes      | YYYY-MM-DD, start date < end date, (start date + end date)-> unique

201-Success Response:
{
  "status": 201,
  "data": {
    "id": 1,
    "name": "Fall2024",
    "code": "FA24",
    "startDate": "2024-09-01",
    "endDate": "2024-12-31",
    "isActive": true,
    "createdAt": "2024-10-16T11:00:00Z",
    "updatedAt": "2024-10-16T11:00:00Z"
  }
}

Response Schema:
| Field 	    | Type 		      | Description 
| id 		      | short 	      | Short type in DB
| name 		    | string 	      | Semester name 
| code 		    | string 	      | Semester code 
| startDate 	| string (date) | YYYY-MM-DD
| endDate 	  | string (date) | YYYY-MM-DD
| isActive 	  | boolean 	    | Semester active status
| totalClass 	| short  	      | Number of classes in this semester
| createdAt 	| string 	      | YYYY-MM-DDTHH:mm:SSZ
| updatedAt 	| string 	      | YYYY-MM-DDTHH:mm:SSZ

400-Missing fields required:
{
  "status": 400,
  "message": "Name must not be blank/Start Date required/ ...",
  "code": "SEMESTER_NAME_REQUIRED" | "SEMESTER_CODE_REQUIRED" | "SEMESTER_START_DATE_REQUIRED" | "SEMESTER_END_DATE_REQUIRED"
}

400-Invalid field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

400-Fields existed:
{
  "status": 400,
  "message": "Semester code/name already exists: FA24",
  "code": "SEMESTER_NAME_EXISTS" | "SEMESTER_CODE_EXISTS"
}

400-Invalid date format:
{
  "status": 400,
  "message": "Invalid date format for field 'start/endDate'. Expected 'YYYY-MM-DD'",
  "code": "INVALID_START/END_DATE_FORMAT"
}

400-Invalid date range:
{
  "status": 400,
  "message": "Start date must be before end date",
  "code": "SEMESTER_INVALID_DATE_RANGE"
}

400-Malformed request body:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

400-Semester date range existed:
{
  "status": 400,
  "message": "A semester with this start and end date already exists",
  "code": "SEMESTER_DATE_RANGE_EXISTS"
}
=======================================================================================================================
=============================================== Bulk Import Semesters =================================================
Note:
- This API implements "Upsert" logic (Add or Update) based on Business Rule BR-44 and supports the 'Interactive Import Flow'.
- API processes using 'Partial Success' strategy (saves valid rows, returns error rows).

9. POST /api/v1/semesters/import
Permission: SEMESTER_IMPORT

Request Body: (Content-Type: multipart/form-data)
| Part Name | Type          | Required | Validation / Description                                           |
| file      | file (.csv)   | Yes      | CSV file containing semester data, following BR-44 format.        |
| mode      | string        | Yes      | Import mode. Must be one of: 'AddOnly' or 'AddAndUpdate'. |

Business Rules:
- Reference BR-44 (Bulk Import Semesters CSV Format and Validation) from system_context.yaml.
- If mode = 'AddOnly': Skip (SKIP) rows with existing 'code'.
- If mode = 'AddAndUpdate': Update (UPDATE) rows with existing 'code'.

200-Success Response (Returns only error list):
(Always returns 200 OK. 'data' is an ARRAY containing only error rows. Empty array '[]' means all rows in this batch succeeded.)
{
  "status": 200,
  "message": "Import processed.",
  "data": [
    {
      "rowNumber": 5,
      "errorCode": "SEMESTER_CODE_EXISTS",
      "message": "Duplicate 'code' (FA23) in 'AddOnly' mode."
    },
    {
      "rowNumber": 7,
      "errorCode": "SEMESTER_INVALID_DATE_RANGE",
      "message": "Start date must be before end date."
    }
  ]
}

400-Bad Request (File or Mode missing/invalid):
{
  "status": 400,
  "message": "Required part 'file' is not present.",
  "code": "INVALID_MULTIPART_REQUEST"
}

400-Bad Request (Invalid Mode):
{
  "status": 400,
  "message": "Invalid import mode. Must be 'AddOnly' or 'AddAndUpdate'.",
  "code": "INVALID_IMPORT_MODE"
}

403-Forbidden:
{
  "status": 403,
  "message": "Permission SEMESTER_IMPORT is required.",
  "code": "FORBIDDEN"
}

=======================================================================================================================
=================================================== Update semester ===================================================
Note:
- When setting isActive = false: Thì không cho set false nếu count class active > 0
- Kỳ đang diễn ra thì chỉ update code, name(TODO: check lại)

4. PUT /api/v1/semesters/{id}
Permission: SEMESTER_UPDATE

Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| id 		      | short | Yes 		  | Semester ID

Request Body:
{
  "name": "Fall2024 - Updated",
  "code": "FA24",
  "startDate": "2024-09-01",
  "endDate": "2024-12-31",
  "isActive": true
}

Request body schema:
| Field     | Type          | Required  | Validation
| name      | string        | Yes       | Not blank, max 20 chars, unique, allows letters/digits/spaces
|           |               |           | Pattern: ^[A-Za-z0-9]+( [A-Za-z0-9]+)*$
|           |               |           | No leading/trailing/multiple spaces
| code      | string        | Yes       | Not blank, max 10 chars, unique, allows letters/digits only (NO spaces)
|           |               |           | Pattern: ^[A-Za-z0-9]+$
| startDate | string (date) | Yes       | YYYY-MM-DD, start date < end date, (start date + end date)-> unique
| endDate   | string (date) | Yes       | YYYY-MM-DD, start date < end date, (start date + end date)-> unique
| isActive  | boolean       | Yes       | Not null

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1,
    "name": "Fall 2024 - Updated",
    "code": "FA24",
    "startDate": "2024-09-01",
    "endDate": "2024-12-31",
    "isActive": true,
    "createdAt": "2024-10-16T11:00:00Z",
    "updatedAt": "2024-10-16T12:30:00Z"
  }
}

Các lỗi khác tương tự Create Semester + thêm các lỗi sau:
404-Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}
409 - Cannot Deactivate Active Semester:
{
  "status": 409,
  "message": "Cannot deactivate semester with ongoing classes, deactivate classes first",
  "code": "SEMESTER_HAS_ACTIVE_CLASSES"
}
=======================================================================================================================
=================================================== Delete semester ===================================================

5. DELETE /api/v1/semesters/{id}
Permission: SEMESTER_DELETE_HARD
Path Parameters:
| Parameter 	| Type 	| Required | Description
| id 		      | short | Yes 		 | Semester ID

200-Success Response:
{
  "status": 200,
  "message": "Delete semester successfully"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

409 - Conflict (foreign key constraint):
{
  "status": 409,
  "message": "Delete all class associate with this semester first",
  "code": "FOREIGN_KEY_CONSTRAINT_VIOLATION"
}

=======================================================================================================================
============================================ Get classes by semester id ===============================================
Note: 
- Returns classes with their associated subject information
- sortBy can be combined with multiple fields
/api/v1/semesters/{id}/classes
6. GET 
Permission: CLASS_READ
Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| id 	        | short | Yes 		  | Semester ID

Query Parameters:
| Parameter 	| Type 		| Required| Default | Validation
| page 		    | integer | No 		  | 1 		  | 1-50
| pageSize 	  | integer | No 		  | 10 		  | 1-50
| sort 		    | string 	| No 		  | asc 		| asc/desc
| sortBy 	    | string 	| No 		  | id 		  | id, code, subject.name, subject.code
| search 	    | string 	| No 		  | "" 		  | Search in class code and subject name/code
| isActive    | boolean | No      | null    | Filter by active status

200-Success Response: 
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "code": "SE1234",
        "subject": {
          "id": 10,
          "name": "Software Engineering",
          "code": "SE"
        },
        "isActive": true,
        "totalStudents": 45,
        "createdAt": "2024-10-16T11:00:00Z",
        "updatedAt": "2024-10-16T12:30:00Z"
      },
	    ...
    ],
    "totalPages": 3,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 25
  }
}

Response Schema:
| Field                | Type    | Description
| id                   | short   | Class ID
| code                 | string  | Class code
| subject              | object  | Subject information
| subject.id           | short   | Subject ID
| subject.name         | string  | Subject name
| subject.code         | string  | Subject code
| isActive             | boolean | Class active status
| totalStudents        | integer | Number of enrolled students (computed field)
| createdAt            | string  | ISO 8601 timestamp
| updatedAt            | string  | ISO 8601 timestamp

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

=======================================================================================================================
========================================= Get subjects by semester id =================================================
Note: 
- Returns subjects that have at least one active class in this semester
- Useful for filtering subjects when assigning to exam slots
- Only returns subjects with classes.is_active = true
7. GET /api/v1/semesters/{semesterId}/subjects
Permission: SUBJECT_READ
Path Parameters:
| Parameter  	| Type 	| Required 	| Description
| semesterId 	| short | Yes 		  | Semester ID

Query Parameters:
| Parameter 	| Type 		| Required| Default | Validation
| page 		    | integer | No 		  | 1 		  | 1-50
| pageSize 	  | integer | No 		  | 10 		  | 1-50
| sort 		    | string 	| No 		  | asc 		| asc/desc
| sortBy 	    | string 	| No 		  | code 		| code, name
| search 	    | string 	| No 		  | "" 		  | Search in subject name and code
| isActive    | boolean | No      | null    | Filter by subject active status (true/false/null)

200-Success Response: 
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "name": "Software Development Project",
        "code": "SWP391",
        "majors": [
          {
            "id": 1,
            "name": "Software Engineering",
            "code": "SE",
            "isActive": true
          }
        ],
        "totalClassInSemester": 3,
        "totalActiveClassInSemester": 2,
        "isActive": true,
        "createdAt": "2024-10-16T11:30:00Z",
        "updatedAt": "2024-10-16T11:30:00Z"
      },
      {
        "id": 2,
        "name": "Database Systems",
        "code": "DBI202",
        "majors": [
          {
            "id": 1,
            "name": "Software Engineering",
            "code": "SE",
            "isActive": true
          },
          {
            "id": 2,
            "name": "Information Assurance",
            "code": "IA",
            "isActive": true
          }
        ],
        "totalClassInSemester": 5,
        "totalActiveClassInSemester": 5,
        "isActive": true,
        "createdAt": "2024-10-16T11:35:00Z",
        "updatedAt": "2024-10-16T11:35:00Z"
      }
    ],
    "totalPages": 2,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 12
  }
}

Response Schema:
| Field                       | Type    | Description
| id                          | short   | Subject ID
| name                        | string  | Subject name
| code                        | string  | Subject code
| majors                      | array   | Array of major objects (id, name, code, isActive)
| totalClassInSemester        | integer | Total number of classes (active + inactive) in this semester
| totalActiveClassInSemester  | integer | Number of active classes only in this semester
| isActive                    | boolean | Subject active status
| createdAt                   | string  | ISO 8601 timestamp
| updatedAt                   | string  | ISO 8601 timestamp

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, Invalid sort parameter...",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

=======================================================================================================================
========================================= Get students by semester id =================================================
Note: 
- Returns students who have at least one active enrollment (is_enrolled=true) in this semester
- Useful for adding participants to exam slots - shows only students eligible for exams in this semester
- Can filter by subject to show only students enrolled in specific subject
- Includes student's enrollment information (classes, subjects they're taking)
8. GET /api/v1/semesters/{semesterId}/students
Permission: USER_READ_LIST
Path Parameters:
| Parameter  	| Type 	| Required 	| Description
| semesterId 	| short | Yes 		  | Semester ID

Query Parameters:
| Parameter 	| Type 		| Required| Default | Validation
| page 		    | integer | No 		  | 1 		  | 1-50
| pageSize 	  | integer | No 		  | 10 		  | 1-50
| sort 		    | string 	| No 		  | asc 		| asc/desc
| sortBy 	    | string 	| No 		  | fullName| fullName, rollNumber
| search 	    | string 	| No 		  | "" 		  | Search in student name, rollNumber, email
| subjectId   | short   | No      | null    | Filter by subject ID (shows students enrolled in this subject)
| majorId     | short   | No      | null    | Filter by major ID
| isActive    | boolean | No      | true    | Filter by student active status (true/false/null)

200-Success Response: 
{
  "status": 200,
  "data": {
    "semester": {
      "id": 1,
      "name": "Fall 2024",
      "code": "FA24"
    },
    "items": [
      {
        "userId": 201,
        "fullName": "Tran Thi B",
        "email": "tranthib@fpt.edu.vn",
        "rollNumber": "HE180314",
        "majorId": 1,
        "majorName": "Software Engineering",
        "majorCode": "SE",
        "isActive": true,
        "totalEnrollmentsInSemester": 5,
        "activeEnrollmentsInSemester": 5,
        "enrolledSubjects": [
          {
            "subjectId": 1,
            "subjectCode": "SWP391",
            "subjectName": "Software Development Project"
          },
          {
            "subjectId": 2,
            "subjectCode": "DBI202",
            "subjectName": "Database Systems"
          }
        ],
        "createdAt": "2024-10-16T11:00:00Z",
        "updatedAt": "2024-10-16T11:00:00Z"
      },
      {
        "userId": 202,
        "fullName": "Le Van C",
        "email": "levanc@fpt.edu.vn",
        "rollNumber": "HE180315",
        "majorId": 1,
        "majorName": "Software Engineering",
        "majorCode": "SE",
        "isActive": true,
        "totalEnrollmentsInSemester": 4,
        "activeEnrollmentsInSemester": 3,
        "enrolledSubjects": [
          {
            "subjectId": 1,
            "subjectCode": "SWP391",
            "subjectName": "Software Development Project"
          },
          {
            "subjectId": 3,
            "subjectCode": "WEB201",
            "subjectName": "Web Development"
          }
        ],
        "createdAt": "2024-10-16T11:05:00Z",
        "updatedAt": "2024-10-16T11:05:00Z"
      }
    ],
    "totalPages": 3,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 25
  }
}

Response Schema:
| Field                        | Type    | Description
| semester                     | object  | Semester information (id, name, code)
| items                        | array   | List of students
| totalPages                   | integer | Total pages
| currentPage                  | integer | Current page number
| pageSize                     | integer | Items per page
| totalItems                   | integer | Total students

Student Object Schema:
| Field                        | Type    | Description
| userId                       | integer | Student user ID
| fullName                     | string  | Student full name
| email                        | string  | Student email
| rollNumber                   | string  | Student roll number (e.g., HE180314)
| majorId                      | short   | Major ID
| majorName                    | string  | Major name
| majorCode                    | string  | Major code
| isActive                     | boolean | Student active status
| totalEnrollmentsInSemester   | integer | Total enrollments (active + withdrawn) in this semester
| activeEnrollmentsInSemester  | integer | Active enrollments (is_enrolled=true) in this semester
| enrolledSubjects             | array   | List of subjects student is enrolled in (with active classes)
| createdAt                    | string  | ISO 8601 timestamp
| updatedAt                    | string  | ISO 8601 timestamp

Enrolled Subject Object Schema:
| Field        | Type    | Description
| subjectId    | short   | Subject ID
| subjectCode  | string  | Subject code
| subjectName  | string  | Subject name

Business Rules:
- Only students with at least one is_enrolled=true enrollment in the semester are returned
- If subjectId filter is provided, only students enrolled in that specific subject are returned
- enrolledSubjects array only includes subjects where student has active enrollment (is_enrolled=true)
- Students with all enrollments withdrawn (is_enrolled=false) are excluded by default
- Can override with isActive filter to include inactive students

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, Invalid sort parameter...",
  "code": "INVALID_PAGE" | "INVALID_PAGE_SIZE" | "INVALID_SORT" | "INVALID_SORT_BY"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Semester not found:
{
  "status": 404,
  "message": "Semester not found: 1",
  "code": "SEMESTER_NOT_FOUND"
}

404 - Subject not found (when subjectId filter is provided):
{
  "status": 404,
  "message": "Subject not found: 5",
  "code": "SUBJECT_NOT_FOUND"
}

=======================================================================================================================
====================================================== Notes ==========================================================

- Semester ID is of type Short (max value: 32,767)
- All timestamps are in ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SSZ
- Dates are in ISO 8601 date format: YYYY-MM-DD
- Search parameter searches in both name and code fields
- Pagination is 1-based (page=1 is the first page)
- Default sort is by id in ascending order
- Soft delete is done via PUT endpoint by setting isActive = false
- Hard delete via DELETE endpoint is permanent and may fail if semester has classes
- Semester code and name must be unique
- Start date + end date combination must be unique
- Start date must be < end date
-  = Modified

Relationship Notes:
- GET /semesters/{id}/classes: Returns all classes in this semester (existing endpoint)
- GET /semesters/{id}/subjects: Returns subjects that have active classes in this semester (NEW endpoint)
  - Useful for filtering subjects when creating exam slots
  - Shows class count per subject within the semester
- GET /semesters/{id}/students: Returns students with active enrollments in this semester (NEW endpoint)
  - Useful for adding participants to exam slots
  - Can filter by subject to show students enrolled in specific subject
  - Includes list of subjects each student is enrolled in

Use Cases for New Endpoints:
- GET /semesters/{id}/subjects:
  - Use Case: When assigning subjects to FINAL_EXAM slots, show only subjects that have classes in this semester
  - Better UX: Instead of showing all active subjects, show only relevant ones
  
- GET /semesters/{id}/students:
  - Use Case: When adding participants to exam slots, show students enrolled in the exam's semester
  - Can filter by subjectId to show only students enrolled in a specific subject
  - Provides context: Shows which subjects each student is taking in this semester

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters, duplicate code/name)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found (semester, subject, or student not found)
- 409: Conflict (foreign key constraint violation)
- 500: Internal Server Error

Permissions:
- SEMESTER_CREATE: Create semesters (DATA_OPERATOR)
- SEMESTER_READ: View semesters, classes, subjects, students (All admin roles)
- SEMESTER_UPDATE: Update semesters (DATA_OPERATOR)
- SEMESTER_DELETE_HARD: Delete semesters (DATA_OPERATOR)
- SEMESTER_IMPORT: Bulk import semesters via CSV (DATA_OPERATOR)
- CLASS_READ: View classes (required for /semesters/{id}/classes)
- SUBJECT_READ: View subjects (required for /semesters/{id}/subjects)
- USER_READ_LIST: View student list (required for /semesters/{id}/students)
