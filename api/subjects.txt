POST   	| /subjects 	   		| Create new subject 	| SUBJECT_CREATE 
GET    	| /subjects 	   		| Get all subjects 		| SUBJECT_READ 
GET    	| /subjects/{id} 		| Get subject by id 	| SUBJECT_READ 
PUT    	| /subjects/{id} 		| Update subject 		  | SUBJECT_UPDATE 
DELETE 	| /subjects/{id} 		| Delete subject 		  | SUBJECT_DELETE_HARD

================================================ Create a new subject =================================================
Business Rules:
1. Subject-Major Relationship: Many-to-Many
   - A subject can belong to multiple majors
   - A major can have multiple subjects
   - Managed through subject_majors junction table

2. Major Validation:
   - All specified majors must exist and be active
   - At least one major must be provided

1. POST /api/v1/subjects
Permission: SUBJECT_CREATE
Request Body:
{
  "name": "Software Development Project",
  "code": "SWP391",
  "majorIds": [1, 2]
}

Request Schema:
| Field    | Type          | Required | Validation 
| name     | string        | Yes      | Not blank, max 150 chars, unique, allows letters/digits/spaces
|          |               |          | Pattern: ^[A-Za-z0-9]+( [A-Za-z0-9]+)*$
|          |               |          | No leading/trailing/multiple spaces. Examples: "Software Development Project"
| code     | string        | Yes      | Not blank, max 20 chars, unique, UPPERCASE letters/digits only (NO spaces)
|          |               |          | Pattern: ^[A-Z0-9]+$, Examples: "SWP391", "DBI202"
| majorIds | array[short]  | Yes      | At least 1 major, all majors must exist and be active

201-Success Response:
{
  "status": 201,
  "data": {
    "id": 1,
    "name": "Software Development Project",
    "code": "SWP391",
    "majors": [
      {
        "id": 1,
        "name": "Software Engineering",
        "code": "SE",
        "isActive": true
      },
      {
        "id": 2,
        "name": "Information Assurance",
        "code": "IA",
        "isActive": true
      }
    ],
    "totalClass": 0,
    "totalActiveClass": 0,
    "isActive": true,
    "createdAt": "2024-10-16T11:30:00Z",
    "updatedAt": "2024-10-16T11:30:00Z"
  }
}

Response Schema:
| Field            | Type          | Description 
| id               | integer       | Short type in DB
| name             | string        | Subject name 
| code             | string        | Subject code
| majors           | array[object] | Array of major objects (id, name, code, isActive)
| totalClass       | integer       | Total number of classes (active + inactive)
| totalActiveClass | integer       | Number of active classes only
| isActive         | boolean       | Active status
| createdAt        | string        | YYYY-MM-DDTHH:mm:SSZ
| updatedAt        | string        | YYYY-MM-DDTHH:mm:SSZ

400-Fields required:
{
  "status": 400,
  "message": "Name must not be blank / Code must not be blank / Major IDs required",
  "code": "SUBJECT_NAME_REQUIRED" | "SUBJECT_CODE_REQUIRED" | "SUBJECT_MAJOR_IDS_REQUIRED"
}

400-Empty major IDs array:
{
  "status": 400,
  "message": "At least one major must be specified",
  "code": "SUBJECT_MAJOR_IDS_EMPTY"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

400-Fields existed:
{
  "status": 400,
  "message": "Subject code/name already exists: SWP391",
  "code": "SUBJECT_NAME_EXISTS" | "SUBJECT_CODE_EXISTS"
}

404-Major not found:
{
  "status": 404,
  "message": "Major not found: 1",
  "code": "MAJOR_NOT_FOUND"
}

400-Inactive major not allowed:
{
  "status": 400,
  "message": "Cannot assign subject to inactive major (Major ID: 3, Code: AI)",
  "code": "INACTIVE_MAJOR_NOT_ALLOWED"
}

HttpMessageNotReadableException:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

=======================================================================================================================
================================================== Search subjects ====================================================

2. GET /api/v1/subjects
Permission: SUBJECT_READ
Query Parameters:
| Parameter 	| Type 		| Required 	| Default 	| Validation 
| page 		  | integer 	| No 		| 1 		| 1-50 
| pageSize 	| integer 	| No 		| 10 		| 1-50 
| sort 		| string 	| No 		| asc 		| asc/desc 
| sortBy 	| string 	| No		| id 		| name, code
| search 	| string 	| No 		| "" 		| Search in name and code
| isActive 	| boolean 	| No 		| - 		| Filter by active status (true/false)
| majorId 	| short 	| No 		| - 		| Filter subjects by major ID 

200-Success Response
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "name": "Software Development Project",
        "code": "SWP391",
        "majors": [
          {
            "id": 1,
            "name": "Software Engineering",
            "code": "SE",
            "isActive": true
          },
          {
            "id": 2,
            "name": "Information Assurance",
            "code": "IA",
            "isActive": true
          }
        ],
        "totalClass": 8,
        "totalActiveClass": 5,
        "isActive": true,
        "createdAt": "2024-10-16T11:30:00Z",
        "updatedAt": "2024-10-16T11:30:00Z"
      },
	...
    ],
    "totalPages": 5,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 45
  }
}

400-Invalid query parameters:
{
  "status": 400,
  "message": "Page must >= 1, ...",
  "code": "INVALID_PAGE_SIZE/PAGE/SORT/SORT_BY"
}
=======================================================================================================================
=================================================== Get subject by id =================================================

3. GET /api/v1/subjects/{id}
Permission: SUBJECT_READ
| Parameter 	| Type 	| Required 	| Description
| id 		| short | Yes 		| Subject ID

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1,
    "name": "Software Development Project",
    "code": "SWP391",
    "majors": [
      {
        "id": 1,
        "name": "Software Engineering",
        "code": "SE",
        "isActive": true
      },
      {
        "id": 2,
        "name": "Information Assurance",
        "code": "IA",
        "isActive": true
      }
    ],
    "totalClass": 8,
    "totalActiveClass": 5,
    "isActive": true,
    "createdAt": "2024-10-16T11:30:00Z",
    "updatedAt": "2024-10-16T11:30:00Z"
  }
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

=======================================================================================================================
==================================================== Update subject ===================================================
Business Rules:
1. Major Assignment:
   - Can add or remove majors at any time
   - All specified majors must exist and be active
   - At least one major must remain assigned

2. Deactivation:
   - Cannot deactivate subject if there are active classes
   - Inactive classes don't block deactivation

4. PUT /api/v1/subjects/{id}
Permission: SUBJECT_UPDATE

Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| id 		| short | Yes 		| Subject ID

Request Body:
{
  "name": "Software Development Project - Updated",
  "code": "SWP391",
  "majorIds": [2, 3],
  "isActive": true
}

Request Schema:
| Field     | Type          | Required | Validation
| name      | string        | Yes      | Not blank, max 150 chars, unique, allows letters/digits/spaces
|           |               |          | Pattern: ^[A-Za-z0-9]+( [A-Za-z0-9]+)*$
|           |               |          | No leading/trailing/multiple spaces
| code      | string        | Yes      | Not blank, max 20 chars, unique, UPPERCASE letters/digits only
|           |               |          | Pattern: ^[A-Z0-9]+$
| majorIds  | array[short]  | Yes      | At least 1 major, all majors must exist and be active
| isActive  | boolean       | Yes      | Not null

200-Success Response:
{
  "status": 200,
  "data": {
    "id": 1,
    "name": "Software Development Project - Updated",
    "code": "SWP391",
    "majors": [
      {
        "id": 2,
        "name": "Information Assurance",
        "code": "IA",
        "isActive": true
      },
      {
        "id": 3,
        "name": "Artificial Intelligence",
        "code": "AI",
        "isActive": true
      }
    ],
    "totalClass": 8,
    "totalActiveClass": 5,
    "isActive": true,
    "createdAt": "2024-10-16T11:30:00Z",
    "updatedAt": "2024-10-16T12:45:00Z"
  }
}

404-Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

400-Fields required:
{
  "status": 400,
  "message": "Name must not be blank / Code must not be blank / Major IDs required",
  "code": "SUBJECT_NAME_REQUIRED" | "SUBJECT_CODE_REQUIRED" | "SUBJECT_MAJOR_IDS_REQUIRED"
}

400-Empty major IDs array:
{
  "status": 400,
  "message": "At least one major must be specified",
  "code": "SUBJECT_MAJOR_IDS_EMPTY"
}

400-Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

400-Fields existed:
{
  "status": 400,
  "message": "Subject code/name already exists: SWP391",
  "code": "SUBJECT_NAME_EXISTS" | "SUBJECT_CODE_EXISTS"
}

404-Major not found:
{
  "status": 404,
  "message": "Major not found: 2",
  "code": "MAJOR_NOT_FOUND"
}

400-Invalid Json format
HttpMessageNotReadableException:
{
  "status": 400,
  "message": "Malformed JSON request",
  "code": "MALFORMED_JSON"
}

400-Inactive major not allowed:
{
  "status": 400,
  "message": "Cannot assign subject to inactive major (Major ID: 3, Code: AI)",
  "code": "INACTIVE_MAJOR_NOT_ALLOWED"
}

409-Cannot deactivate subject with active classes:
{
  "status": 409,
  "message": "Cannot deactivate subject. Found 5 active classes",
  "code": "SUBJECT_HAS_ACTIVE_CLASSES"
}

=======================================================================================================================
==================================================== Delete subject ===================================================

5. DELETE /api/v1/subjects/{id}
Permission: SUBJECT_DELETE_HARD
Path Parameters:
| Parameter 	| Type 	| Required 	| Description
| id 		| short | Yes 		| Subject ID

200-Success Response:
{
  "status": 200,
  "message": "Delete subject successfully"
}

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

409 - Conflict (has dependencies):
{
  "status": 409,
  "message": "Cannot delete subject. Found 8 classes. Please delete them first",
  "code": "SUBJECT_HAS_DEPENDENCIES"
}

=======================================================================================================================
=========================================== Get classes by subject id =================================================
Note:
- Returns classes for this subject across all semesters
- Class code is unique within subject+semester combination

6. GET /api/v1/subjects/{id}/classes
Permission: CLASS_READ
Path Parameters:
| Parameter  | Type  | Required | Description
| id         | short | Yes      | Subject ID

Query Parameters:
| Parameter  | Type    | Required | Default | Validation
| page       | integer | No       | 1       | 1-50
| pageSize   | integer | No       | 10      | 1-50
| sort       | string  | No       | asc     | asc/desc
| sortBy     | string  | No       | id      | id, code
| search     | string  | No       | ""      | Search in class code
| isActive   | boolean | No       | null    | Filter by active status
| semesterId | short   | No       | null    | Filter by semester

200-Success Response:
{
  "status": 200,
  "data": {
    "items": [
      {
        "id": 1,
        "code": "SE1801",
        "subject": {
          "id": 1,
          "name": "Software Development Project",
          "code": "SWP391",
          "isActive": true
        },
        "semester": {
          "id": 1,
          "name": "Fall 2024",
          "code": "FA24"
        },
        "isActive": true,
        "createdAt": "2024-10-16T11:00:00Z",
        "updatedAt": "2024-10-16T11:00:00Z"
      },
      {
        "id": 2,
        "code": "SE1802",
        "subject": {
          "id": 1,
          "name": "Software Development Project",
          "code": "SWP391",
          "isActive": true
        },
        "semester": {
          "id": 1,
          "name": "Fall 2024",
          "code": "FA24"
        },
        "isActive": true,
        "createdAt": "2024-10-16T11:05:00Z",
        "updatedAt": "2024-10-16T11:05:00Z"
      }
    ],
    "totalPages": 2,
    "currentPage": 1,
    "pageSize": 10,
    "totalItems": 15
  }
}

Class Object Schema:
| Field     | Type    | Description 
| id        | integer | Class ID (Short type in DB)
| code      | string  | Class code
| subject   | object  | Subject object (id, name, code, isActive)
| semester  | object  | Semester object (id, name, code)
| isActive  | boolean | Class active status
| createdAt | string  | YYYY-MM-DDTHH:mm:SSZ
| updatedAt | string  | YYYY-MM-DDTHH:mm:SSZ

400 - Invalid Field type:
{
  "status": 400,
  "message": "Failed to convert value of type 'java.lang.String' to required type 'java.lang.Short'",
  "code": "INVALID_FIELD_TYPE"
}

404 - Subject not found:
{
  "status": 404,
  "message": "Subject not found: 1",
  "code": "SUBJECT_NOT_FOUND"
}

=======================================================================================================================
====================================================== Notes ==========================================================

- Subject ID is of type Short (max value: 32,767)
- Major ID is also of type Short
- All timestamps are in ISO 8601 format (UTC): YYYY-MM-DDTHH:mm:SSZ
- Search parameter searches in both name and code fields
- Pagination is 1-based (page=1 is the first page)
- Default sort is by id in ascending order
- Response includes nested majors array with major details (id, name, code, isActive)
- Soft delete is done via PUT endpoint by setting isActive = false
- Hard delete via DELETE endpoint is permanent and may fail if subject has classes
- Subject code and name must be unique
- Subject-Major relationship is Many-to-Many via subject_majors junction table
- Subject-Class relationship is One-to-Many (one subject can have multiple classes)
- totalClass: Total number of classes (active + inactive)
- totalActiveClass: Number of active classes only (used for deactivation validation)
-  = Modified

Validation Patterns:
- Subject name: ^[A-Za-z0-9]+( [A-Za-z0-9]+)*$ (letters, digits, spaces, no leading/trailing/multiple spaces, max 150 chars)
- Subject code: ^[A-Z0-9]+$ (UPPERCASE letters and digits only, no spaces, max 20 chars)

Common Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid parameters, duplicate code/name)
- 401: Unauthorized (missing or invalid token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found (subject or major not found)
- 409: Conflict (foreign key constraint violation)
- 500: Internal Server Error