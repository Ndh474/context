# Business Rules Specification
# FUACS Requirements - Version 1.0

metadata:
  version: "1.1"
  total_business_rules: 37
  domains_covered:
    [
      Authentication,
      Roles,
      Identity,
      Academic,
      Attendance,
      System,
      Audit,
      Infrastructure,
    ]
  last_updated: "2025-10-24"

business_rules:
  # Authentication & User Management (BR-01 to BR-07)
  authentication:
    BR-01:
      title: "Primary Login Identifier"
      description: "The primary login identifier username for a user must be their Student ID (for Students) or Staff ID (for Staff)."
      domain: "Authentication"
      priority: "High"
      related_use_cases: ["UC-01", "UC-34"]
      validation_points: ["User creation", "Login process"]

    BR-02:
      title: "Google Login Email Lookup"
      description: "When a user logs in via Google, the system must use the email address provided by Google to look up the corresponding user account."
      domain: "Authentication"
      priority: "High"
      related_use_cases: ["UC-01"]
      validation_points: ["Google OAuth callback"]

    BR-03:
      title: "Inactive Account Access Denial"
      description: "If a user account is found but is inactive (is_active = false), access must be denied."
      domain: "Authentication"
      priority: "High"
      related_use_cases: ["UC-01", "UC-38"]
      validation_points: ["Login process", "Account status check"]

    BR-04:
      title: "Unique Username and Email"
      description: "Each username and email must be unique across the entire system."
      domain: "Authentication"
      priority: "High"
      related_use_cases: ["UC-01", "UC-34"]
      validation_points: ["User creation", "User update"]

    BR-05:
      title: "Role Assignment Constraints"
      description: "A user with the STUDENT role cannot be concurrently assigned the LECTURER or SUPERVISOR role."
      domain: "Roles"
      priority: "High"
      related_use_cases: ["UC-34", "UC-37"]
      validation_points: ["Role assignment", "Role update"]

    BR-06:
      title: "Password Reset Token Security"
      description: "A password reset token must be unique, have an expiration time, and must be invalidated immediately after successful use."
      domain: "Authentication"
      priority: "High"
      related_use_cases: ["UC-04", "UC-05"]
      validation_points:
        ["Token generation", "Token validation", "Password reset"]

    BR-07:
      title: "User Profile Requirement"
      description: "A new user account must be linked to a specialized profile (student_profiles or staff_profiles) to define its specific attributes."
      domain: "User Management"
      priority: "High"
      related_use_cases: ["UC-34"]
      validation_points: ["User creation workflow"]

  # Academic Catalog (BR-12 to BR-17)
  academic_catalog:
    BR-12:
      title: "Unique Academic Identifiers"
      description: "Each Major, Subject, and Class must have a unique identifier (code or name)."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-42", "UC-46", "UC-50", "UC-54"]
      validation_points: ["Academic entity creation", "Academic entity update"]

    BR-13:
      title: "Single Class Enrollment"
      description: "A student can only be enrolled in a specific class once."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-62"]
      validation_points: ["Student enrollment"]

    BR-14:
      title: "Enrollment History Preservation"
      description: "When a student is unenrolled from a class (enrollments.is_enrolled = false), they must not appear in the roster for future slots of that class, but their past attendance history must be preserved."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-63"]
      validation_points:
        [
          "Student unenrollment",
          "Roster generation",
          "Attendance history queries",
        ]

    BR-15:
      title: "Slot Room Assignment"
      description: "Each lecture/exam slot must be associated with a specific room."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-25", "UC-58", "UC-60"]
      validation_points: ["Slot creation", "Slot update"]

    BR-16:
      title: "Camera Room Validation"
      description: "All active cameras in the slot's assigned room are automatically used for attendance monitoring. No manual camera selection is required."
      domain: "Infrastructure"
      priority: "High"
      related_use_cases: ["UC-25", "UC-58", "UC-60"]
      validation_points: ["Slot creation", "Camera availability check"]

    BR-17:
      title: "Single Staff Assignment"
      description: "Each lecture/exam slot must be assigned to one and only one staff member (Lecturer or Supervisor) at a time."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-15", "UC-25", "UC-28", "UC-58", "UC-60"]
      validation_points: ["Slot creation", "Slot update", "Staff assignment"]

  # Attendance Management (BR-18 to BR-24)
  attendance_management:
    BR-18:
      title: "Attendance Session Authorization"
      description: "An automated attendance session can only be initiated by the staff member assigned to that slot who has the SLOT_SESSION_START permission."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-15", "UC-28"]
      validation_points: ["Session initiation", "Permission check"]

    BR-19:
      title: "Face Recognition Status Update"
      description: "When a face is recognized, the system updates the student's attendance status to PRESENT. The final status and timestamp are recorded in the attendance record."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-16", "UC-17", "UC-29"]
      validation_points: ["Face recognition processing", "Status update logic"]

    BR-20:
      title: "Unrecognized Face Handling"
      description: "If a face is not recognized, the system takes no action, and the student's attendance status remains unchanged during that scan."
      domain: "Attendance"
      priority: "Medium"
      related_use_cases: ["UC-16"]
      validation_points: ["Face recognition processing"]

    BR-21:
      title: "Finalization Rules Setup"
      description: "When finalizing a slot, the system must display a 'Finalization Rules Setup' screen. The lecturer must then make a bulk decision for each group of students with intermediate status (e.g., NOT_YET) to convert their final status to either PRESENT or ABSENT."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-21", "UC-32"]
      validation_points: ["Slot finalization workflow"]

    BR-22:
      title: "Same-Day Edit Window"
      description: "The assigned Lecturer/Supervisor can manually edit the attendance results for a slot until 23:59:59 UTC on the day of the slot (based on slot.start_time date in UTC)."
      domain: "Attendance"
      priority: "Medium"
      related_use_cases: ["UC-19", "UC-30"]
      validation_points:
        ["Attendance edit authorization", "Time-based access control"]

    BR-23:
      title: "Post-Day Edit Restrictions"
      description: "After 23:59:59 UTC on the day of the slot (based on slot.start_time date in UTC), only a user with permissions such as ATTENDANCE_STATUS_UPDATE_MANUAL can edit the attendance results, typically a Data Operator."
      domain: "Attendance"
      priority: "Medium"
      related_use_cases: ["UC-19", "UC-30"]
      validation_points:
        ["Attendance edit authorization", "Time-based access control"]

    BR-24:
      title: "Unique Attendance Record"
      description: "An attendance record for a student in a specific slot must be unique."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-15", "UC-16", "UC-28"]
      validation_points: ["Attendance record creation"]

  # System Administration (BR-25 to BR-27)
  system_administration:
    BR-25:
      title: "System Configuration Permissions"
      description: "Actions to modify core system configurations and manage role-permission mappings must be protected by distinct permissions (e.g., SYSTEM_CONFIG_UPDATE, ROLE_PERMISSION_MAPPING_UPDATE). By default, these permissions are granted only to the SYSTEM_ADMIN role."
      domain: "System"
      priority: "Critical"
      related_use_cases: ["UC-76", "UC-77", "UC-80", "UC-81"]
      validation_points:
        ["System configuration access", "Role-permission management"]

    BR-26:
      title: "User Management Permissions"
      description: "User account management (creating, updating, assigning roles, etc.) must be controlled by a granular set of permissions (e.g., USER_CREATE, USER_UPDATE_STATUS, USER_ASSIGN_ROLES). By default, these permissions are granted to the DATA_OPERATOR role."
      domain: "User Management"
      priority: "High"
      related_use_cases: ["UC-34", "UC-35", "UC-36", "UC-37", "UC-38"]
      validation_points: ["User management operations", "Permission validation"]

    BR-27:
      title: "Audit Trail Requirement"
      description: "Critical business data changes (e.g., finalizing attendance, updating student information) must be logged in the operational audit trail (operational_audit_logs)."
      domain: "Audit"
      priority: "High"
      related_use_cases:
        [
          "UC-21",
          "UC-25",
          "UC-26",
          "UC-32",
          "UC-36",
          "UC-37",
          "UC-38",
          "UC-40",
          "UC-41",
          "UC-44",
          "UC-45",
          "UC-48",
          "UC-49",
          "UC-52",
          "UC-53",
          "UC-56",
          "UC-57",
          "UC-60",
          "UC-61",
          "UC-63",
          "UC-68",
          "UC-69",
          "UC-72",
          "UC-73",
          "UC-78",
          "UC-79",
          "UC-81",
          "UC-85",
        ]
      validation_points: ["All critical data modifications"]

  # Attendance Data Integrity (BR-28 to BR-30)
  attendance_data_integrity:
    BR-28:
      title: "Manual Edit Remark Requirement"
      description: "Any manual edit of a student's attendance status requires a non-empty remark explaining the reason for the change. The system must prevent saving the change if the remark is empty."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-19", "UC-20", "UC-30", "UC-31"]
      validation_points: ["Manual status update", "Remark validation"]

    BR-29:
      title: "Final Status Requirement"
      description: "After a slot is finalized, the primary status for all attendance records must be either PRESENT or ABSENT."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-21", "UC-32"]
      validation_points: ["Slot finalization", "Status validation"]

    BR-30:
      title: "Hard Delete Dependency Check"
      description: "Any request to permanently delete a resource (e.g., Major, Semester, Room) must be rejected with a user-friendly error message if the resource has dependent child resources (e.g., Subjects, Classes, Cameras)."
      domain: "Data Integrity"
      priority: "Critical"
      related_use_cases:
        ["UC-45", "UC-49", "UC-53", "UC-57", "UC-61", "UC-69", "UC-73"]
      validation_points: ["All hard delete operations in the backend services"]

  # Attendance Status Management (BR-31 to BR-32)
  attendance_status_management:
    BR-31:
      title: "Attendance Status Transition Rules"
      description: "Defines valid state transitions for attendance records and time-based edit restrictions. Before finalization, all transitions are allowed. After finalization, assigned staff can edit until 23:59:59 UTC of the slot date. After that, only Data Operators can edit."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-19", "UC-21", "UC-30", "UC-32"]
      validation_points:
        [
          "Attendance edit API",
          "Permission middleware",
          "Time-based access control",
        ]
      rules:
        valid_transitions:
          before_finalization:
            - "not_yet → present (auto or manual)"
            - "not_yet → absent (manual only)"
            - "present → absent (manual with remark)"
            - "absent → present (manual with remark)"
          after_finalization_same_day:
            - "All transitions allowed until 23:59:59 UTC of slot date"
            - "Must have ATTENDANCE_STATUS_UPDATE_MANUAL permission"
            - "Remark is mandatory for all manual changes"
          after_finalization_next_day:
            - "Lecturer/Supervisor: NO edit permission"
            - "Data Operator: Can edit with appropriate permissions"
            - "All changes must be logged in operational_audit_logs"
        time_boundary:
          calculation: "Based on slot.start_time date in server timezone (UTC)"
          cutoff: "23:59:59 UTC of the slot date"
          example: "If slot starts 2024-10-19 14:00 UTC, edit window closes 2024-10-19 23:59:59 UTC"

    BR-32:
      title: "Face Embedding Version Management"
      description: "Rules for managing face embedding versions when identity data is updated via the Bulk Import flow. Each successful import generates a new embedding with incremented version. Only one embedding per student can be active at a time."
      domain: "Identity"
      priority: "High"
      related_use_cases: ["UC-75"]
      validation_points:
        ["Bulk Identity Import processing job", "Face recognition query"]
      rules:
        version_increment:
          - "Each successful bulk import for a student generates a new embedding with version = max(existing_version) + 1"
          - "Initial import: version = 1"
          - "First re-import: version = 2, etc."
        active_embedding:
          - "Only ONE embedding per student can have is_active = true"
          - "When new embedding is imported, old embedding is set to is_active = false"
          - "System uses only the active embedding for face recognition"
        retention_policy:
          - "Keep last 3 versions for audit and rollback purposes"
          - "Older versions can be archived or deleted after 1 year"

  # Academic Data Management (BR-33 to BR-34)
  academic_data_management:
    BR-33:
      title: "Class Enrollment Status and Roster Visibility"
      description: "When generating a roster for a class-based slot (LECTURE, LECTURE_WITH_PT), only include students where enrollments.is_enrolled = true. Historical attendance records are preserved even after unenrollment. This rule does not apply to independent final exams."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-29", "UC-62", "UC-63"]
      validation_points:
        [
          "Roster query API",
          "Attendance record creation",
          "Student unenrollment workflow",
        ]
      rules:
        roster_generation:
          - "When generating roster for a slot, only include students where enrollments.is_enrolled = true"
          - "This applies to ALL slots, regardless of their status (upcoming, ongoing, finalized)"
        attendance_record_handling:
          - "If attendance_record already exists before unenrollment, it is preserved (not deleted)"
          - "Student will not appear in roster UI, but their historical record remains in database"
          - "Reports can still show historical attendance for unenrolled students"
        edge_case_handling:
          - "If student is unenrolled AFTER slot is finalized, their attendance record is preserved"
          - "If student is unenrolled BEFORE slot starts, no attendance record is created"

    BR-34:
      title: "Slot Category Validation and Roster Logic"
      description: "Defines the core validation logic for creating/updating slots and determines the source of the student roster. This logic must be enforced at the application layer."
      domain: "Academic"
      priority: "Critical"
      related_use_cases: ["UC-24", "UC-25", "UC-26", "UC-58", "UC-60"]
      validation_points:
        ["Slot creation API", "Slot update API", "Attendance processing logic"]
      rules:
        class_based_slots:
          categories: ["LECTURE", "LECTURE_WITH_PT"]
          validation: "The 'class_id' field MUST NOT be NULL."
          roster_source: "The student roster is derived from the 'enrollments' table based on the slot's 'class_id'."
        independent_exam_slots:
          categories: ["FINAL_EXAM"]
          validation: "The 'class_id' field MUST be NULL, and the 'semester_id' field MUST NOT be NULL."
          roster_source: "The student roster is derived from the 'exam_slot_participants' table based on the slot's 'id'."

    BR-35:
      title: "Lecturer Can Update Slot Category"
      description: "Lecturers can update slot_category between LECTURE and LECTURE_WITH_PT for their assigned slots, subject to certain constraints."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-24", "UC-25", "UC-26"]
      validation_points: ["Slot update API"]
      rules:
        can_update_category_if:
          - "Slot belongs to lecturer's assigned class"
          - "Slot has not been finalized yet"
          - "Current user has SLOT_UPDATE_CATEGORY permission"
          - "Update is between LECTURE and LECTURE_WITH_PT only"

        can_change_to_lecture_with_pt:
          - "Current slot_category is 'LECTURE'"
          - "All general conditions above are met"

        can_change_to_lecture:
          - "Current slot_category is 'LECTURE_WITH_PT'"
          - "No exam_attendance records exist for this slot"
          - "All general conditions above are met"

        cannot_update_if:
          - "Slot category is 'FINAL_EXAM' (only DOP can manage)"
          - "Trying to change to/from 'FINAL_EXAM'"
          - "Slot already finalized"
          - "Slot is in the past (after 23:59:59 UTC of slot date)"
          - "Exam attendance records exist (for LECTURE_WITH_PT → LECTURE)"

  # Time-Based Rules (BR-36)
  time_based_rules:
    BR-36:
      title: "Time-Based Edit Window Calculation"
      description: "Defines how the 23:59:59 cutoff time is calculated for attendance editing. All timestamps are in UTC, cutoff is based on slot start_time date."
      domain: "Attendance"
      priority: "High"
      related_use_cases: ["UC-19", "UC-21", "UC-30", "UC-32"]
      validation_points: ["Attendance edit API", "Permission middleware"]
      rules:
        timezone_standard:
          - "All timestamps stored in database are in UTC"
          - "Edit window cutoff is calculated based on slot.start_time date in UTC"
          - "UI displays times in user's local timezone for convenience"
        cutoff_calculation:
          - "Extract date from slot.start_time (in UTC)"
          - "Cutoff = {slot_date} 23:59:59 UTC"
          - "Example: slot starts 2024-10-19 14:00:00 UTC → cutoff is 2024-10-19 23:59:59 UTC"
        permission_check_logic:
          - "When user attempts to edit attendance:"
          - "1. Check if user is assigned staff (staff_user_id = current_user_id)"
          - "2. Check if current_time <= slot_date 23:59:59 UTC"
          - "3. If both true: allow edit"
          - "4. If time expired: check if user has DATA_OPERATOR role"
          - "5. If DATA_OPERATOR: allow edit, else deny"

  # Bulk Operations (BR-37)
  bulk_operations:
    BR-37:
      title: "Bulk Class Enrollment CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk student enrollment into classes. This rule does not apply to independent final exams."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-79"]
      validation_points: ["CSV upload API", "Bulk enrollment processing"]
      csv_format:
        encoding: "UTF-8 with BOM (for Excel compatibility)"
        delimiter: "comma (,)"
        header_row: "Required (first row)"
        columns:
          - name: "student_id"
            type: "string"
            required: true
            description: "Student's username (Student ID)"
          - name: "class_code"
            type: "string"
            required: true
            description: "Class code (not class_id)"
          - name: "semester_code"
            type: "string"
            required: true
            description: "Semester code to identify the class"
      validation_rules:
        file_level:
          - "File size must not exceed 5MB"
          - "Maximum 10,000 rows (excluding header)"
          - "Must have exactly 3 columns"
          - "Header row must match exactly: student_id,class_code,semester_code"
        row_level:
          - "student_id must exist in users table and have STUDENT role"
          - "class_code + semester_code must uniquely identify a class"
          - "Student must not already be enrolled in the class"
          - "Student must be active (users.is_active = true)"
          - "Class must be active (classes.is_active = true)"
        duplicate_handling:
          - "Within file: If same student_id + class_code appears multiple times, keep first occurrence and warn"
          - "With database: If enrollment already exists, skip and report as warning (not error)"
        error_reporting:
          - "PARTIAL SUCCESS strategy: Import valid rows, skip invalid rows"
          - "Return 200 with summary even if some rows failed"
          - "Provide detailed error list for failed rows"
          - "Provide warning list for skipped rows (duplicates, already enrolled)"

    BR-38:
      title: "Exam Slot Participant Uniqueness"
      description: "A student can only be added to the participant list of a specific independent final exam slot once."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-64", "UC-65"]
      validation_points:
        ["Exam participant creation", "Bulk exam participant import"]

    BR-39:
      title: "Exam Participant Roster Visibility"
      description: "When generating the roster for an independent final exam slot (slot_category = 'FINAL_EXAM'), the system must only include students from the 'exam_slot_participants' table who are linked to that slot_id and have their 'is_enrolled' status set to true."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-29", "UC-64"]
      validation_points:
        ["Roster query API for exam slots", "Exam attendance processing"]

    BR-40:
      title: "Bulk Exam Participant CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk registering participants to an independent final exam slot. This file assigns students to specific subjects within that slot."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-65"]
      validation_points:
        [
          "CSV upload API for exam participants",
          "Bulk exam participant processing",
        ]
      csv_format:
        encoding: "UTF-8 with BOM"
        delimiter: "comma (,)"
        header_row: "Required (first row)"
        columns:
          - name: "student_id"
            type: "string"
            required: true
            description: "Student's username (Student ID)"
          - name: "subject_code"
            type: "string"
            required: true
            description: "Subject code that the student will take the exam for"
      validation_rules:
        pre_upload: "The Data Operator must select a target independent final exam slot before uploading the file."
        file_level:
          - "File size must not exceed 1MB"
          - "Maximum 5,000 rows (excluding header)"
          - "Must have exactly 2 columns"
          - "Header row must match exactly: student_id,subject_code"
        row_level:
          - "student_id must exist in users table and have STUDENT role"
          - "subject_code must exist in subjects table"
          - "The pair (slot_id, subject_id) must exist in exam_slot_subjects table (i.e., the subject has been assigned to this slot)"
          - "Business constraint: Student must be enrolled (is_enrolled=true) in a class of that subject (subject_id) within the same semester (semester_id) as the exam slot"
          - "Student must not already be a participant for this subject in this slot"
          - "Student must be active (users.is_active = true)"
        duplicate_handling:
          - "Within file: If same (student_id, subject_code) pair appears multiple times, keep first occurrence and warn"
          - "With database: If participant already exists for that subject in the slot, skip and report as warning (not error)"
        error_reporting:
          - "PARTIAL SUCCESS strategy: Import valid rows, skip invalid rows"
          - "Return 200 with summary even if some rows failed"
          - "Provide detailed error list for failed rows"
          - "Provide warning list for skipped rows (duplicates, already enrolled)"

    BR-41:
      title: "Bulk Identity Data CSV/ZIP Format and Validation"
      description: "Defines the file formats and validation rules for bulk importing student identity data (base photos and generating vectors)."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-75"]
      validation_points:
        ["CSV/ZIP upload API for identity data", "Bulk identity processing job"]
      csv_format:
        encoding: "UTF-8"
        delimiter: "comma (,)"
        header_row: "Required (first row)"
        columns:
          - name: "student_id"
            type: "string"
            required: true
            description: "Student's username (Student ID)"
      zip_format:
        description: "A .ZIP file containing all base photos. File names must match the 'student_id' in the CSV (e.g., 'HE180001.jpg', 'HE180002.png')."
      validation_rules:
        file_level:
          - "Must upload 1 CSV and 1 ZIP simultaneously."
          - "Maximum 2000 rows in CSV (excluding header)."
          - "ZIP file size must not exceed 100MB."
        row_level:
          - "'student_id' from CSV must exist in the 'users' table and have the 'STUDENT' role."
          - "A matching image file (e.g., 'student_id.jpg' or 'student_id.png') must be found inside the ZIP file."
          - "The image file must be successfully processed by the 'recognition_service' (Python)."
        error_reporting:
          - "PARTIAL SUCCESS strategy: Import valid rows, skip invalid rows."
          - "The background job must log all errors (e.g., 'HE180001: file not found in ZIP', 'HE180002: invalid user', 'HE180003: face not detected in image')."
          - "DOP can download this error log from the UI."

    BR-42:
      title: "Bulk Import Majors CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk importing Majors."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-82"]
      validation_points:
        ["CSV upload API for Majors", "Bulk catalog processing job"]
      csv_format:
        encoding: "UTF-8"
        header_row: "Required"
        columns:
          - name: "code"
            type: "string"
            required: true
            description: "Major code (e.g., 'SE')"
          - name: "name"
            type: "string"
            required: true
            description: "Major name (e.g., 'Software Engineering')"
      validation_rules:
        row_level:
          - "'code' will be used as the business key."
          - "Depending on the 'Import Mode' selected by DOP:"
          - "  - 'Add Only' mode: If 'code' already exists, this row will be SKIPPED and reported as 'Duplicate'."
          - "  - 'Add and Update' mode: If 'code' already exists, the system will UPDATE the 'name' field of the existing record. If 'code' does not exist, the system will CREATE NEW (INSERT)."
          - "'name' must be valid and not empty (applies to both create and update)."
        error_reporting:
          - "PARTIAL SUCCESS: The system will process all valid rows (create or update) and report detailed errors for failed rows (e.g., 'name' is empty, or duplicate in 'Add Only' mode)."

    BR-43:
      title: "Bulk Import Subjects CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk importing Subjects."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-83"]
      validation_points:
        ["CSV upload API for Subjects", "Bulk catalog processing job"]
      csv_format:
        encoding: "UTF-8"
        header_row: "Required"
        columns:
          - name: "code"
            type: "string"
            required: true
            description: "Subject code (e.g., 'SWP391')"
          - name: "name"
            type: "string"
            required: true
            description: "Subject name (e.g., 'Application Development Project')"
          - name: "major_code"
            type: "string"
            required: true
            description: "Major code that this subject belongs to (references majors.code)"
      validation_rules:
        row_level:
          - "'code' will be used as the business key."
          - "Depending on the 'Import Mode' selected by DOP:"
          - "  - 'Add Only' mode: If 'code' already exists, this row will be SKIPPED and reported as 'Duplicate'."
          - "  - 'Add and Update' mode: If 'code' already exists, the system will UPDATE the fields (name, major_code) of the existing record and automatically update the relationships in the 'subject_majors' table. If 'code' does not exist, the system will CREATE NEW (INSERT)."
          - "'major_code' must exist in the 'majors' table (applies to both create and update). If not found, report error."
          - "'name' must be valid and not empty (applies to both create and update)."
        error_reporting:
          - "PARTIAL SUCCESS: The system will process all valid rows (create or update) and report detailed errors for failed rows (e.g., 'major_code' does not exist, or duplicate in 'Add Only' mode)."

    BR-44:
      title: "Bulk Import Semesters CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk importing Semesters."
      domain: "Academic"
      priority: "Medium"
      related_use_cases: ["UC-84"]
      validation_points:
        ["CSV upload API for Semesters", "Bulk catalog processing job"]
      csv_format:
        encoding: "UTF-8"
        header_row: "Required"
        columns:
          - name: "code"
            type: "string"
            required: true
            description: "Semester code (e.g., 'FA24')"
          - name: "name"
            type: "string"
            required: true
            description: "Semester name (e.g., 'Fall 2024')"
          - name: "start_date"
            type: "string (YYYY-MM-DD)"
            required: true
            description: "Start date"
          - name: "end_date"
            type: "string (YYYY-MM-DD)"
            required: true
            description: "End date"
      validation_rules:
        row_level:
          - "'code' will be used as the business key."
          - "Depending on the 'Import Mode' selected by DOP:"
          - "  - 'Add Only' mode: If 'code' already exists, this row will be SKIPPED and reported as 'Duplicate'."
          - "  - 'Add and Update' mode: If 'code' already exists, the system will UPDATE the fields (name, start_date, end_date) of the existing record. If 'code' does not exist, the system will CREATE NEW (INSERT)."
          - "'start_date' must be a valid date and must be before 'end_date' (applies to both create and update)."
        error_reporting:
          - "PARTIAL SUCCESS: The system will process all valid rows (create or update) and report detailed errors for failed rows (e.g., 'start_date' is invalid, or duplicate in 'Add Only' mode)."

    BR-45:
      title: "Bulk Import Classes CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk importing Classes."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-85"]
      validation_points:
        ["CSV upload API for Classes", "Bulk catalog processing job"]
      csv_format:
        encoding: "UTF-8"
        header_row: "Required"
        columns:
          - name: "code"
            type: "string"
            required: true
            description: "Class code (e.g., 'SE1801')"
          - name: "subject_code"
            type: "string"
            required: true
            description: "Subject code (references subjects.code)"
          - name: "semester_code"
            type: "string"
            required: true
            description: "Semester code (references semesters.code)"
      validation_rules:
        row_level:
          - "'code' will be used as the business key."
          - "Depending on the 'Import Mode' selected by DOP:"
          - "  - 'Add Only' mode: If 'code' already exists, this row will be SKIPPED and reported as 'Duplicate'."
          - "  - 'Add and Update' mode: If 'code' already exists, the system will UPDATE the fields (subject_code, semester_code) of the existing record. If 'code' does not exist, the system will CREATE NEW (INSERT)."
          - "'subject_code' must exist in the 'subjects' table (applies to both create and update)."
          - "'semester_code' must exist in the 'semesters' table (applies to both create and update)."
        error_reporting:
          - "PARTIAL SUCCESS: The system will process all valid rows (create or update) and report detailed errors for failed rows (e.g., 'subject_code' does not exist, or duplicate in 'Add Only' mode)."

    BR-46:
      title: "Bulk Import Slots CSV Format and Validation"
      description: "Defines the CSV file format and validation rules for bulk importing Slots. This is the most complex flow, requiring Class, Staff, and Room data to exist beforehand."
      domain: "Academic"
      priority: "High"
      related_use_cases: ["UC-86"]
      validation_points:
        ["CSV upload API for Slots", "Bulk catalog processing job"]
      csv_format:
        encoding: "UTF-8"
        header_row: "Required"
        columns:
          - name: "class_code"
            type: "string"
            required: false
            description: "Class code. Required if slot_category is LECTURE/LECTURE_WITH_PT."
          - name: "semester_code"
            type: "string"
            required: true
            description: "Semester code. Used to find 'class_id' (together with class_code) or 'semester_id' (for FINAL_EXAM)."
          - name: "staff_username"
            type: "string"
            required: true
            description: "Username (Staff ID) of the lecturer/supervisor (references users.username)."
          - name: "room_name"
            type: "string"
            required: true
            description: "Room name (references rooms.name)."
          - name: "start_time"
            type: "string (YYYY-MM-DD HH:MM:SS)"
            required: true
            description: "Start time (ISO format or similar, UTC timezone)."
          - name: "end_time"
            type: "string (YYYY-MM-DD HH:MM:SS)"
            required: true
            description: "End time (ISO format or similar, UTC timezone)."
          - name: "slot_category"
            type: "string"
            required: true
            description: "Must be one of: 'LECTURE', 'LECTURE_WITH_PT', 'FINAL_EXAM'."
          - name: "title"
            type: "string"
            required: false
            description: "Title (e.g., 'Progress Test 1')."
      validation_rules:
        row_level:
          - "Slot does not have a simple business key like 'code'. Instead, the combination (class_code, semester_code, start_time, room_name, staff_username) will be used to identify a unique slot."
          - "Depending on the 'Import Mode' selected by DOP:"
          - "  - 'Add Only' mode: If a matching slot is found (same combination), this row will be SKIPPED and reported as 'Duplicate'."
          - "  - 'Add and Update' mode: If a matching slot is found, the system will UPDATE the fields (end_time, slot_category, title). If not found, the system will CREATE NEW (INSERT)."
          - "'staff_username' must exist in the 'users' table and have role LECTURER or SUPERVISOR (applies to both create and update)."
          - "'room_name' must exist in the 'rooms' table (applies to both create and update)."
          - "'start_time' must be before 'end_time' (applies to both create and update)."
          - "'slot_category' must be a valid value ('LECTURE', 'LECTURE_WITH_PT', 'FINAL_EXAM') (applies to both create and update)."
          - "Validation logic (BR-34) (applies to both create and update):"
          - "  - If 'slot_category' is 'LECTURE' or 'LECTURE_WITH_PT': 'class_code' and 'semester_code' must be provided and must find a valid 'class_id'."
          - "  - If 'slot_category' is 'FINAL_EXAM': 'class_code' must be empty and 'semester_code' must find a valid 'semester_id'."
        error_reporting:
          - "PARTIAL SUCCESS: The system will process all valid rows (create or update) and report detailed errors for failed rows (e.g., 'staff_username' not found, BR-34 logic failed, or duplicate in 'Add Only' mode)."

# Rule Dependencies and Relationships
rule_relationships:
  authentication_flow:
    primary_rules: ["BR-01", "BR-02", "BR-03", "BR-04"]
    description: "Rules governing user authentication and account validation"

  attendance_lifecycle:
    primary_rules:
      ["BR-18", "BR-19", "BR-21", "BR-28", "BR-29", "BR-31", "BR-36", "BR-37"]
    description: "Rules governing the complete attendance management lifecycle"

  data_integrity:
    primary_rules: ["BR-12", "BR-13", "BR-24", "BR-27"]
    description: "Rules ensuring data consistency and audit trail"

  academic_data_management:
    primary_rules: ["BR-34", "BR-35", "BR-38", "BR-39", "BR-40"]
    description: "Rules for academic data management including slot categories, lecturer permissions, and exam participant management"

  permission_control:
    primary_rules: ["BR-05", "BR-25", "BR-26"]
    description: "Rules controlling access and permission management"

# Validation Matrix
validation_requirements:
  critical_validations:
    - rule: "BR-01"
      validation_type: "Format validation"
      implementation: "Username format check against Student/Staff ID pattern"

    - rule: "BR-05"
      validation_type: "Business logic validation"
      implementation: "Role compatibility check before assignment"

    - rule: "BR-21"
      validation_type: "Workflow validation"
      implementation: "Finalization rules UI with mandatory status conversion"

    - rule: "BR-27"
      validation_type: "Audit validation"
      implementation: "Automatic audit log creation for critical operations"

    - rule: "BR-28"
      validation_type: "Input validation"
      implementation: "Non-empty remark validation for manual attendance edits"

  runtime_validations:
    - rule: "BR-16"
      validation_type: "Referential integrity"
      implementation: "Camera-room relationship validation during slot creation"
