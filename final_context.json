{
  "fuacs_complete_context": {
    "metadata": {
      "generated_at": "2025-10-17T22:46:35.955974",
      "version": "1.0",
      "description": "Complete FUACS system context - merged from all documentation files"
    },
    "system_context": {
      "project_info": {
        "project_code": "FUACS",
        "project_name": "FU Attendance Checking Smart"
      },
      "project_overview": {
        "background": "An independent attendance and academic management system. FUACS serves as the Single Source of Record for all data related to classes, students, lecturers, and attendance results.",
        "goal": "Support login via Google and system accounts (username/password), class schedules, exam schedules, and smart attendance to assist lecturers."
      },
      "platform_definitions": {
        "platform_types": {
          "MOBILE_APP": "Mobile platform for iOS and Android",
          "GENERAL_WEB": "Web platform",
          "ADMIN_PORTAL": "Web platform (Admin Portal)"
        },
        "role_platform_mapping": {
          "Student": "MOBILE_APP",
          "Lecturer": "GENERAL_WEB",
          "Supervisor": "GENERAL_WEB",
          "Data_Operator": "ADMIN_PORTAL",
          "System_Admin": "ADMIN_PORTAL"
        }
      },
      "authentication_and_role_mapping": {
        "mapping_method": "System Native",
        "description": "Users are created and role-managed directly in the system by Data Operators. The primary login identifier (username) is defined as the Student ID or Employee ID. The system supports Google login (for email verification) and direct login using username/password. The system uses specialized profiles (student_profiles, staff_profiles) to manage specific attributes.",
        "role_assignment_rules": "SUPERVISOR or LECTURER roles cannot be assigned to users with the STUDENT role.",
        "access_control": {
          "on_missing_user": "deny_access_403",
          "on_inactive_status": "deny_access_403"
        }
      },
      "master_permission_catalog": {
        "USER_MANAGEMENT": {
          "USER_CREATE": "Create a new user account.",
          "USER_READ_LIST": "View the list of all users.",
          "USER_READ_DETAIL": "View detailed information of a user.",
          "USER_UPDATE_INFO": "Update user personal information (name, email).",
          "USER_UPDATE_STATUS": "Deactivate or activate user account (soft delete).",
          "USER_DELETE_HARD": "Permanently delete user account (dangerous action, requires consideration).",
          "USER_ASSIGN_ROLES": "Assign or revoke roles from a user.",
          "CREATE_SYSTEM_ADMIN": "Create an account with System Admin role (extremely sensitive permission, only for system setup purposes)."
        },
        "IDENTITY_MANAGEMENT": {
          "IDENTITY_SUBMISSION_READ_QUEUE": "View the list of pending identity verification requests.",
          "IDENTITY_SUBMISSION_READ_DETAIL": "View details of an identity verification request (video, ID card).",
          "IDENTITY_SUBMISSION_APPROVE": "Approve an identity verification request.",
          "IDENTITY_SUBMISSION_REJECT": "Reject an identity verification request."
        },
        "ACADEMIC_CATALOG_MANAGEMENT": {
          "SEMESTER_CREATE": "Create a new semester.",
          "SEMESTER_READ": "View the list and details of semesters.",
          "SEMESTER_UPDATE": "Update semester information, including deactivating or activating it.",
          "SEMESTER_DELETE_HARD": "Permanently delete a semester. This action cannot be undone and will fail if related data (classes, etc.) still exists.",
          "MAJOR_CREATE": "Create a new major.",
          "MAJOR_READ": "View the list and details of majors.",
          "MAJOR_UPDATE": "Update major information, including deactivating or activating it.",
          "MAJOR_DELETE_HARD": "Permanently delete a major. This action cannot be undone and will fail if related data (subjects, etc.) still exists.",
          "SUBJECT_CREATE": "Create a new subject.",
          "SUBJECT_READ": "View the list and details of subjects.",
          "SUBJECT_UPDATE": "Update subject information, including deactivating or activating it.",
          "SUBJECT_DELETE_HARD": "Permanently delete a subject. This action cannot be undone and will fail if related data (classes, etc.) still exists.",
          "CLASS_CREATE": "Create a new class.",
          "CLASS_READ": "View the list and details of classes.",
          "CLASS_UPDATE": "Update class information, including deactivating or activating it.",
          "CLASS_DELETE_HARD": "Permanently delete a class. This action cannot be undone and will fail if related data (slots, enrollments, etc.) still exists.",
          "SLOT_CREATE": "Create a new lecture/exam slot.",
          "SLOT_READ": "View the list and details of lecture/exam slots.",
          "SLOT_UPDATE": "Update lecture/exam slot information, including cancelling (deactivating) it.",
          "SLOT_DELETE_HARD": "Permanently delete a lecture/exam slot. This action is dangerous and cannot be undone.",
          "ENROLLMENT_MANAGE": "Add or remove students from a class.",
          "SLOT_CREATE_PROGRESS_TEST": "Create a new slot classified as a Progress Test.",
          "SLOT_UPDATE_PROGRESS_TEST": "Update the details of an existing Progress Test slot.",
          "SLOT_DELETE_HARD_PROGRESS_TEST": "Permanently delete a Progress Test slot",
          "SLOT_CREATE_FINAL_EXAM": "Create a new slot classified as a Final Exam.",
          "SLOT_UPDATE_FINAL_EXAM": "Update the details of an existing Final Exam slot.",
          "SLOT_DELETE_HARD_FINAL_EXAM": "Permanently delete a Final Exam slot."
        },
        "INFRASTRUCTURE_MANAGEMENT": {
          "ROOM_CREATE": "Create a new room.",
          "ROOM_READ": "View the list and details of rooms.",
          "ROOM_UPDATE": "Update room information, including deactivating or activating it.",
          "ROOM_DELETE_HARD": "Permanently delete a room. This action cannot be undone and will fail if related data (cameras, slots, etc.) still exists.",
          "CAMERA_CREATE": "Create a new camera and assign it to a room.",
          "CAMERA_READ": "View the list and details of cameras.",
          "CAMERA_UPDATE": "Update camera information, including deactivating or activating it.",
          "CAMERA_DELETE_HARD": "Permanently delete a camera. This action cannot be undone."
        },
        "ATTENDANCE_MANAGEMENT": {
          "OWN_SCHEDULE_READ": "View personal schedule (teaching/exam/learning).",
          "SLOT_SESSION_START": "Start an automated attendance session for a slot.",
          "SLOT_SESSION_RESCAN": "Trigger a re-scan for attendance.",
          "SLOT_SESSION_FINALIZE": "Finalize and complete the attendance session.",
          "ATTENDANCE_ROSTER_READ": "View the roster and real-time attendance status of a slot.",
          "ATTENDANCE_STATUS_UPDATE_MANUAL": "Manually update attendance status for students.",
          "ATTENDANCE_REMARK_MANAGE": "Add, edit, delete attendance remarks.",
          "SLOT_ANNOUNCEMENT_MANAGE": "Manage (create/delete) slot announcements.",
          "PRE_SLOT_MESSAGE_READ": "Read pre-slot messages sent by students.",
          "PRE_SLOT_MESSAGE_ACKNOWLEDGE": "Mark student messages as read/acknowledged."
        },
        "REPORTING_AND_DATA": {
          "REPORT_READ_OWN_SLOT": "View attendance reports for slots under own responsibility.",
          "REPORT_EXPORT_OWN_SLOT": "Export report files for slots under own responsibility.",
          "REPORT_READ_CLASS_SUMMARY": "View comprehensive attendance summary report for a class.",
          "REPORT_READ_SYSTEM_WIDE": "View system-wide summary reports.",
          "REPORT_EXPORT_ACADEMIC_DATA": "Export academic data (class lists, attendance results, etc.).",
          "AUDIT_LOG_READ": "View audit logs of important business data changes."
        },
        "SYSTEM_ADMINISTRATION": {
          "SYSTEM_CONFIG_READ": "View system configurations.",
          "SYSTEM_CONFIG_UPDATE": "Modify system configurations.",
          "ROLE_PERMISSION_MAPPING_READ": "View role-permission mapping matrix.",
          "ROLE_PERMISSION_MAPPING_UPDATE": "Edit role-permission mapping matrix.",
          "SYSTEM_LOG_READ": "View technical system activity logs.",
          "NOTIFICATION_TEMPLATE_MANAGE": "Manage system notification templates.",
          "ROLE_CREATE": "Create a new user role.",
          "ROLE_UPDATE": "Update a role's information, including its name and description.",
          "ROLE_DELETE_HARD": "Permanently delete a role. This action is dangerous and will fail if the role is assigned to any user.",
          "PERMISSION_CREATE": "Create a new permission in the system's master catalog.",
          "PERMISSION_UPDATE": "Update the details of an existing permission.",
          "PERMISSION_DELETE_HARD": "Permanently delete a permission from the master catalog. Extremely dangerous action that can break role assignments."
        },
        "STUDENT_PERMISSIONS": {
          "OWN_ATTENDANCE_HISTORY_READ": "View own attendance history.",
          "OWN_IDENTITY_SUBMIT": "Submit identity registration or update request.",
          "PRE_SLOT_MESSAGE_CREATE": "Send pre-slot message to lecturer."
        },
        "GENERAL_PERMISSIONS": {
          "OWN_PROFILE_READ": "View own personal profile information.",
          "OWN_PASSWORD_UPDATE": "Change own password."
        }
      },
      "role_definitions": {
        "SYSTEM_ADMIN": {
          "role_name": "System Administrator",
          "description": "The highest technical role, responsible for defining policies, system configuration, and managing the permission structure of roles. Does not manage user accounts or intervene in daily operations.",
          "platform": "ADMIN_PORTAL",
          "permissions": [
            "SYSTEM_CONFIG_READ",
            "SYSTEM_CONFIG_UPDATE",
            "ROLE_PERMISSION_MAPPING_READ",
            "ROLE_PERMISSION_MAPPING_UPDATE",
            "SYSTEM_LOG_READ",
            "NOTIFICATION_TEMPLATE_MANAGE",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROLE_CREATE",
            "ROLE_UPDATE",
            "ROLE_DELETE_HARD",
            "PERMISSION_CREATE",
            "PERMISSION_UPDATE",
            "PERMISSION_DELETE_HARD"
          ]
        },
        "DATA_OPERATOR": {
          "role_name": "Data Operations Staff",
          "description": "The main operational role, responsible for all academic data and user account lifecycle management.",
          "platform": "ADMIN_PORTAL",
          "permissions": [
            "USER_CREATE",
            "USER_READ_LIST",
            "USER_READ_DETAIL",
            "USER_UPDATE_INFO",
            "USER_UPDATE_STATUS",
            "USER_ASSIGN_ROLES",
            "IDENTITY_SUBMISSION_READ_QUEUE",
            "IDENTITY_SUBMISSION_READ_DETAIL",
            "IDENTITY_SUBMISSION_APPROVE",
            "IDENTITY_SUBMISSION_REJECT",
            "SEMESTER_CREATE",
            "SEMESTER_READ",
            "SEMESTER_UPDATE",
            "MAJOR_CREATE",
            "MAJOR_READ",
            "MAJOR_UPDATE",
            "SUBJECT_CREATE",
            "SUBJECT_READ",
            "SUBJECT_UPDATE",
            "CLASS_CREATE",
            "CLASS_READ",
            "CLASS_UPDATE",
            "SLOT_CREATE",
            "SLOT_READ",
            "SLOT_UPDATE",
            "ENROLLMENT_MANAGE",
            "SLOT_CREATE_FINAL_EXAM",
            "SLOT_UPDATE_FINAL_EXAM",
            "SLOT_DELETE_HARD_FINAL_EXAM",
            "ROOM_CREATE",
            "ROOM_READ",
            "ROOM_UPDATE",
            "CAMERA_CREATE",
            "CAMERA_READ",
            "CAMERA_UPDATE",
            "REPORT_READ_SYSTEM_WIDE",
            "REPORT_EXPORT_ACADEMIC_DATA",
            "AUDIT_LOG_READ",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE"
          ]
        },
        "LECTURER": {
          "role_name": "Lecturer",
          "description": "Responsible for managing lecture sessions, monitoring class rosters, and finalizing attendance results.",
          "platform": "GENERAL_WEB",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "SLOT_SESSION_START",
            "SLOT_SESSION_RESCAN",
            "SLOT_SESSION_FINALIZE",
            "ATTENDANCE_ROSTER_READ",
            "ATTENDANCE_STATUS_UPDATE_MANUAL",
            "ATTENDANCE_REMARK_MANAGE",
            "SLOT_ANNOUNCEMENT_MANAGE",
            "PRE_SLOT_MESSAGE_READ",
            "PRE_SLOT_MESSAGE_ACKNOWLEDGE",
            "REPORT_READ_OWN_SLOT",
            "REPORT_EXPORT_OWN_SLOT",
            "REPORT_READ_CLASS_SUMMARY",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "CAMERA_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ",
            "SLOT_CREATE_PROGRESS_TEST",
            "SLOT_UPDATE_PROGRESS_TEST",
            "SLOT_DELETE_HARD_PROGRESS_TEST"
          ]
        },
        "SUPERVISOR": {
          "role_name": "Exam Supervisor",
          "description": "Responsible for supervising exam sessions, initiating and finalizing attendance results for exams.",
          "platform": "GENERAL_WEB",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "SLOT_SESSION_START",
            "SLOT_SESSION_RESCAN",
            "SLOT_SESSION_FINALIZE",
            "ATTENDANCE_ROSTER_READ",
            "ATTENDANCE_STATUS_UPDATE_MANUAL",
            "ATTENDANCE_REMARK_MANAGE",
            "REPORT_READ_OWN_SLOT",
            "REPORT_EXPORT_OWN_SLOT",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "CAMERA_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ"
          ]
        },
        "STUDENT": {
          "role_name": "Student",
          "description": "Uses the system to track schedules, view attendance history, and send notifications.",
          "platform": "MOBILE_APP",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "OWN_ATTENDANCE_HISTORY_READ",
            "OWN_IDENTITY_SUBMIT",
            "PRE_SLOT_MESSAGE_CREATE",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ"
          ]
        }
      },
      "function_catalog": {
        "common_functions": [
          "Role-based access control",
          "Import/Export data",
          "System notifications",
          "Search & filter",
          "Role-based dashboard",
          "Activity logs",
          "Reports & file export"
        ],
        "student_functions": [
          "Send pre-slot message (text + URL) to lecturer/TA before T0"
        ],
        "lecturer_functions": [
          "Attach announcements to slots",
          "View & mark pre-slot messages from students as read",
          "View comprehensive attendance reports by class/semester"
        ],
        "data_operator_functions": [
          "Manage Semesters",
          "Manage academic catalogs",
          "Receive and export attendance reports",
          "Query & reconcile data",
          "Manage & Review identity registration submissions",
          "Manage user accounts",
          "Manage slot enrollment",
          "Export academic data",
          "Manage Camera and Room catalogs",
          "View operational activity logs",
          "Manage Majors",
          "Manage bulk student enrollments via CSV import"
        ],
        "system_admin_functions": [
          "Configure system (AI model, similarity threshold, etc.)",
          "Monitor logs and anomalous data",
          "Manage permission catalog & Role-Permission mapping",
          "Manage system notification templates"
        ]
      },
      "screen_catalog": {
        "mobile_student_screens": {
          "SCR_STUDENT_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_STUDENT_DASHBOARD": {
            "title": "Home Screen/Dashboard",
            "features": [
              "View upcoming lecture/exam slots",
              "Shortcuts to main functions"
            ]
          },
          "SCR_STUDENT_SCHEDULE": {
            "title": "Schedule Screen",
            "features": [
              "Semester selector",
              "Filter Lecture/Exam schedule",
              "View schedule in week/month format"
            ]
          },
          "SCR_STUDENT_SLOT_DETAILS": {
            "title": "Slot Details Screen",
            "features": [
              "View detailed slot information (including slot type: LECTURE or EXAM)",
              "View notes from lecturer (read-only)",
              "Form to 'Send pre-slot message (text + URL) to lecturer/TA' (only available for slot_type = LECTURE and before T0)",
              "Note: Pre-slot message does NOT change attendance status; it is only a communication channel before T0. The system will display a warning about this before sending."
            ]
          },
          "SCR_STUDENT_IDENTITY_REG": {
            "title": "Identity Registration Screens",
            "features": [
              "Identity registration instructions",
              "Face video recording interface",
              "ID card photo capture interface",
              "Waiting screen/approval result notification"
            ]
          },
          "SCR_STUDENT_PROFILE": {
            "title": "Profile Screen",
            "features": [
              "'Request Identity Update' button",
              "'Change Password' function"
            ]
          },
          "SCR_STUDENT_NOTIFICATIONS": {
            "title": "Notifications Inbox",
            "features": [
              "Combined feed: System notifications + Slot announcements (from lecturer) + Tab to view 'Messages you sent'",
              "Filters: All | System notifications | Slot notifications (from lecturer) | Messages you sent | Identity requests",
              "Unread indicator at notification level and filter level",
              "View notification details"
            ]
          },
          "SCR_STUDENT_FORGOT_PASSWORD": {
            "title": "Forgot Password Screen",
            "features": [
              "Email input form to receive reset link",
              "'Send Request' button"
            ]
          },
          "SCR_STUDENT_RESET_PASSWORD": {
            "title": "Reset Password Screen",
            "features": [
              "New password and confirm password input form",
              "'Reset Password' button"
            ]
          }
        },
        "web_lecturer_screens": {
          "SCR_LECTURER_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_LECTURER_SCHEDULE": {
            "title": "Schedule & Slots",
            "features": [
              "View teaching schedule and exam supervision schedule by semester on a unified interface",
              "Advanced filters to filter lecture/exam slots by multiple criteria, including 'Type' (slot_type: LECTURE, EXAM)",
              "Open/Close/Finalize slot"
            ]
          },
          "SCR_LECTURER_ROSTER": {
            "title": "Roster & Attendance",
            "features": [
              "Interface displays appropriate functions based on role (Lecturer, Supervisor) and slot type (LECTURE, EXAM)",
              "Display camera name and connection status of the room assigned to the slot",
              "Interface updates attendance status in real-time from recognition service results",
              "Review/edit status",
              "Add/Edit attendance remarks for each student",
              "Update student notification status (acknowledge/read) (only for Lecturer & LECTURE slot)",
              "'Pre-slot Inbox' tab (view/search, mark as read/ack) (only for Lecturer & LECTURE slot)",
              "Multi-state 'Start Attendance / Re-scan' button to trigger scan sessions",
              "Detail window displays attendance history (timeline) for each student when requested",
              "Manual attendance edit window, requires mandatory reason (remark) input when changing status",
              "'Finalization Rules Setup' screen displays when finalizing slot to batch process undetermined statuses"
            ]
          },
          "SCR_LECTURER_SLOT_DETAILS": {
            "title": "Slot Details",
            "features": [
              "'Announcements' tab (create/edit/delete announcements attached to slot) (only for Lecturer & LECTURE slot)"
            ]
          },
          "SCR_LECTURER_REPORTS": {
            "title": "Slot Reports",
            "features": [
              "View/Export reports by slot/class",
              "Includes pre-slot message log (reference) separated from attendance table"
            ]
          },
          "SCR_LECTURER_CLASS_REPORT": {
            "title": "Class Attendance Report Screen",
            "features": [
              "Filter to select Semester and Class",
              "Display summary report in table (matrix) format: students by rows, slots by columns",
              "Display attendance status (Present/Absent) in table cells",
              "Display calculated absence rate (%) for each student (based on LECTURE slots only)",
              "Display exam eligibility status (e.g., 'Eligible', 'Ineligible') based on the system-configured rule",
              "Visually highlight students who are ineligible for the exam",
              "Function to export summary report to file (CSV, Excel)"
            ],
            "notes": [
              "IMPORTANT: This entire screen/report is only accessible after ALL slots (both LECTURE and EXAM) for the selected class have been finalized by the responsible staff."
            ]
          }
        },
        "web_admin_portal_screens": {
          "SCR_ADMIN_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_ADMIN_DASHBOARD": {
            "title": "Admin Dashboard",
            "features": [
              "Overview charts",
              "Semester filter",
              "Permission-based display"
            ]
          },
          "SCR_ADMIN_EXPORT": {
            "title": "Data Export Screen (Data Operator)",
            "features": [
              "Interface to configure and execute academic data export (CSV, JSON, etc.)",
              "View export history"
            ]
          },
          "SCR_ADMIN_CRUD_ACADEMIC": {
            "title": "CRUD Screens (Data Operator)",
            "features": [
              "Manage Classes, Subjects, Lecture/Exam Schedules (including slot_type and room_id attributes)",
              "Add/Remove students from a class (Roster Management)",
              "Manage Majors"
            ]
          },
          "SCR_ADMIN_REPORTING": {
            "title": "Reporting & Lookup Screen (Data Operator)",
            "features": [
              "Advanced search filters",
              "View and export custom reports"
            ]
          },
          "SCR_ADMIN_AUDIT_LOGS": {
            "title": "Operational Audit Log Viewer (Data Operator)",
            "features": [
              "View history of business data changes (who, what, when)",
              "Filter by actor, action type, and time range"
            ]
          },
          "SCR_ADMIN_IDENTITY_QUEUE": {
            "title": "Identity Registration Approval Queue (Data Operator)",
            "features": [
              "List of pending identity registration/update requests",
              "Interface to compare information (new photo, old photo, ID card)",
              "Approve/Reject buttons (with reason)"
            ]
          },
          "SCR_ADMIN_USER_MGMT": {
            "title": "User & Role Management (Data Operator)",
            "features": [
              "Add/Edit/Delete accounts",
              "Assign one or more roles to users (LECTURER, SUPERVISOR, STUDENT); includes constraint check to not assign SUPERVISOR/LECTURER to STUDENT",
              "Does NOT edit permission catalog or Role-Permission mapping",
              "Create specialized profiles (Student/Staff)"
            ]
          },
          "SCR_ADMIN_INFRA_MGMT": {
            "title": "Camera & Room Management (Data Operator)",
            "features": [
              "Add/Edit/Delete room information",
              "Add/Edit/Delete camera information (Name, RTSP connection string, Status)",
              "Assign a camera to a room",
              "View list of all cameras and rooms in the system"
            ]
          },
          "SCR_SYSADMIN_CONFIG": {
            "title": "System Configuration (System Admin)",
            "features": [
              "Configure AI model",
              "Configure business rule parameters (e.g., max absence percentage for students)",
              "Manage permission catalog & Role-Permission mapping"
            ]
          },
          "SCR_SYSADMIN_LOGS": {
            "title": "System Logs Viewer (System Admin)",
            "features": [
              "View and filter system logs"
            ]
          },
          "SCR_SYSADMIN_NOTIF_TEMPLATES": {
            "title": "Notification Template Management (System Admin)",
            "features": [
              "CRUD system notification templates"
            ]
          },
          "SCR_ADMIN_BULK_ENROLLMENT": {
            "title": "Bulk Student Enrollment Management Screen",
            "features": [
              "Semester selector to choose the target semester.",
              "Interface to upload a CSV file containing enrollment data (e.g., columns: student_id, class_id).",
              "Button to download a CSV template file to ensure correct formatting.",
              "A preview table to display data parsed from the uploaded file.",
              "Validation feedback area to show errors found in the file (e.g., invalid student ID, non-existent class).",
              "A 'Confirm Enrollment' button to execute the bulk creation of enrollment records."
            ]
          }
        }
      },
      "complex_component_catalog": {
        "COMPLEX_SEMESTER_DATATABLE": {
          "description": "A reusable data table for displaying and managing semesters. Includes sorting, filtering, and pagination.",
          "required_features": [
            "CRUD operations on Semester data"
          ]
        }
      },
      "attendance_system": {
        "attendance_mode": {
          "description": "The only attendance mode, activated by Lecturer (for lecture slots) or Supervisor (for exam slots). The system uses IP cameras pre-installed in classrooms to automatically recognize and record student presence. A Python middleware service processes video streams and sends results back to the system."
        },
        "face_recognition": {
          "decision_flow_summary": "Face scan has 2 possible outcomes only",
          "outcomes": {
            "match": "set attendance = present",
            "no_match": "no-op (person in charge marks attendance manually)"
          }
        },
        "attendance_statuses": [
          "not_yet",
          "present",
          "absent",
          "absent_after_present"
        ],
        "status_notes": "The system does not distinguish between 'excused absence' and 'unexcused absence' at the status level. All absences are recorded as 'absent'. Lecturers or Supervisors can use the remark function to provide context when necessary.",
        "slot_control": {
          "open_by": "Lecturer/Supervisor",
          "finalize_by": "Lecturer/Supervisor",
          "finalization_logic": "When a lecturer finalizes a slot, the system displays a 'Finalization Rules Setup' screen. This screen allows the lecturer to batch decide how students with intermediate statuses (Not Yet, Absent After Present) will be converted to final statuses (Present or Absent).",
          "editability_rules": "After the first finalization (first_submission), Lecturer/Supervisor can edit attendance results until 23:59:59 of that day. After this time, the data will be locked for them. Exception cases need to be handled by Data Operator.",
          "finalization_audit_trail_note": "Information about the user who performed the finalization action (finalize_by) is comprehensively recorded in the 'operational_audit_logs' table. This design adheres to the Single Source of Truth principle, avoids data duplication, and provides complete history of actions (finalize, reopen, re-finalize) instead of just storing the final state in the 'slots' table."
        },
        "lecturer_ui_rules": {
          "description": "Rules on the lecturer/supervisor attendance screen.",
          "real_time_update": "Attendance status is updated in real-time as soon as the recognition service sends successful results.",
          "finalization_confirmation": "The system must display a warning dialog and request confirmation if the user finalizes a lecture/exam slot while there are still students in 'not_yet' status."
        }
      },
      "technical_flows": {
        "identity_registration_flow": "A one-time process for students to register their identity. Students record a face video and take an ID card photo. The data is then sent to Data Operator for manual approval. Approved data becomes the base image.",
        "identity_re_registration_flow": "Students can submit a request to update their identity photo (only need to record face video, no ID card needed). This request also requires Data Operator approval. During the waiting period, the system still uses the old photo for attendance.",
        "identity_submission_rejection_flow": "When Data Operator rejects an identity registration/update request, the system automatically sends a system notification to the student. This notification includes the rejection reason and will appear in the student's Notification Inbox.",
        "face_identification_flow": "When a lecturer starts a scan session, the system retrieves the student list and assigned cameras. The Python service processes video streams and calls the Backend API to record results. For each scan, the system adds a new event to the student's history record and updates the displayed status on the interface based on the latest result. This process does not overwrite old data.",
        "data_export_flow": "This is a manual flow performed by Data Operator. The user accesses the 'Data Export' screen on the Admin Portal, selects data type (e.g., attendance results), file format (CSV, JSON), and necessary filters. The system then generates the file and allows the user to download it for import into external systems like SIS/LMS.",
        "authentication_flow": "Users on all platforms (Web, Mobile) can log in with Google. Upon successful authentication, Google provides an email address. The FUACS system uses this email address to directly look up the corresponding user account that already exists in the system. If an active account with a matching email is found, the system grants a session token with the permissions assigned to that user. This flow is entirely based on email matching.",
        "system_notification_flow": "When a business event occurs (e.g., identity rejection), the system finds an appropriate notification template, creates a delivery record for the target user, and sends a push notification.",
        "username_password_auth_flow": "User enters username and password. Backend finds user by username, then uses a hashing algorithm (e.g., bcrypt) to compare the entered password with the password_hash stored in the database. If matched, grants session token.",
        "password_reset_flow": "User enters email. System creates a unique, time-limited reset token, saves it to the database, and sends an email containing the reset link. When the user accesses the link, the system validates the token, allows them to enter a new password, hashes and updates the password_hash, then invalidates the used token.",
        "daily_absence_calculation_flow": {
          "title": "Daily Absence Calculation and Notification Flow",
          "description": "A scheduled job that runs automatically every day after midnight to ensure data consistency and timely notifications based on finalized attendance records from the previous day.",
          "steps": [
            "1. Trigger: The job is automatically triggered by a scheduler (e.g., cron) at a fixed time daily (e.g., 00:05 AM).",
            "2. Read Configuration: The job first reads the value of 'attendance.max_absence_percentage' from the system_configurations table to get the current threshold.",
            "3. Scan for Finalized Slots: The job queries the database to find all lecture slots (slot_type = 'LECTURE') that were finalized within the previous calendar day (from 00:00:00 to 23:59:59).",
            "4. Recalculate Absence Rates: For each class associated with the found slots, the job recalculates the current absence percentage for every enrolled student.",
            "5. Check Thresholds and Notify: The job checks if any student has crossed the 10%, 20%, or the configured maximum absence thresholds for the first time. If so, it generates and delivers a system notification to that student."
          ]
        }
      },
      "information_flows": [
        "Student ↔ System: view schedule/slots; send messages to lecturer; view status",
        "Lecturer ↔ System: open/finalize slots; start automated attendance session; read/ack pre-slot messages from students; review/edit status before finalizing",
        "Supervisor ↔ System: open/finalize exam slots; start automated attendance session; review/edit status",
        "System → External systems (SIS/LMS): export academic data and attendance results on demand",
        "System ↔ Python Recognition Service: send session start request; receive attendance results",
        "System ↔ Data Operations Staff: attendance reports, catalog management and data synchronization; approve identity registrations; manage user accounts; manage rooms and cameras; review activity history",
        "System ↔ System Administrator: monitor and configure system",
        "System ↔ Google: login & basic profile"
      ],
      "integrations": {
        "outbound_integrations": {
          "description": "FUACS shares data with external systems via manual export. API integration is a planned item for the future.",
          "methods": {
            "manual_export": {
              "formats": [
                "CSV",
                "JSON"
              ],
              "data_scopes": [
                "attendance_summary",
                "full_roster",
                "academic_catalogs"
              ]
            },
            "api": {
              "status": "planned",
              "endpoints": [
                "get_roster",
                "get_attendance_by_class"
              ]
            }
          }
        },
        "integration_points": [
          "Dedicated IP camera system in classrooms (receive video stream via RTSP)",
          "Python recognition service (communicate via API)",
          "Google: login and basic profile",
          "External systems (if any): Receive data from FUACS (currently export; API planned)"
        ],
        "integration_method": "The system operates independently and is the source of original data. Data is shared with other systems via export function; API integration is planned for the future."
      },
      "data_policies": {
        "conflict_resolution": {
          "strategy": "Last-Write-Wins",
          "granularity": "field-level",
          "description": "The later updated value (by import or in-system operation) wins for each field. Priority rules between FUACS data and external systems will be discussed in detail later."
        }
      },
      "data_model": {
        "slot_entity_definition": {
          "description": "Additional definition for the Slot entity to support business classification.",
          "fields": {
            "slot_type": {
              "type": "Varchar",
              "required": true,
              "description": "Classifies a slot as a lecture ('LECTURE') or exam ('EXAM'). The value is stored directly in the slots table to simplify the data model, adhering to the current database schema."
            },
            "room_id": {
              "type": "Reference",
              "target_entity": "Room",
              "required": true,
              "description": "ID of the room where this slot takes place. Used to determine which camera to use."
            },
            "title": {
              "type": "Varchar",
              "required": false,
              "description": "The display name for the slot. Especially useful for exams to give them a specific title like 'Progress Test 1 - Chapter 1-3'."
            },
            "description": {
              "type": "Text",
              "required": false,
              "description": "Optional detailed information or instructions about the slot, visible to students and staff."
            },
            "exam_subcategory": {
              "type": "Varchar",
              "required": false,
              "description": "When slot_type is 'EXAM', this field further classifies the exam (e.g., 'PROGRESS_TEST', 'FINAL_EXAM') to apply specific business logic and permissions."
            },
            "external_exam_url": {
              "type": "Varchar",
              "required": false,
              "description": "An optional URL that links to an external examination system where the actual test is conducted."
            }
          }
        },
        "enrollment_entity_definition": {
          "description": "Definition of enrollment record.",
          "fields": {
            "status": {
              "type": "Boolean",
              "default": true,
              "description": "Acts as a 'soft delete switch'. When a student withdraws from a course, this field is updated to 'false'. This hides the student from future slots but preserves all enrollment and attendance history data for reporting and audit purposes."
            }
          }
        }
      },
      "idempotency_policies": {
        "unique_constraints": [
          "enrollments: (class_id, student_user_id) is unique",
          "attendance_records: (student_user_id, slot_id) is unique"
        ],
        "keys": {
          "slot_enrollment": "class_id + student_user_id",
          "attendance": "student_user_id + slot_id",
          "slot_announcement": "id (bigint)",
          "pre_slot_message": "id (bigint)"
        }
      },
      "assumptions": {
        "reconciliation_report": true,
        "idempotency_key": "slot_id + student_id",
        "base_image_quality": "The system assumes that students will provide identity video/photos with sufficient quality for recognition. The system does not have input quality enforcement mechanisms.",
        "single_slot_assignment": "In the current version, each slot is assigned to one and only one staff member (Lecturer or Supervisor)."
      },
      "terminology_notes": {
        "principles": [
          "UI uses Vietnamese as primary; first occurrence in each screen/section may include English terminology in parentheses",
          "Permissions use UPPER_SNAKE_CASE; concepts use snake_case"
        ],
        "dictionary": {
          "slot": {
            "ui_label": "Buổi học/thi (Slot)",
            "concept_key": "slot",
            "description": "A unit of lecture or exam session in the schedule."
          },
          "roster": {
            "ui_label": "Danh sách lớp (Roster)",
            "concept_key": "roster",
            "description": "Student list of a slot used to monitor and review attendance status."
          },
          "supervisor": {
            "ui_label": "Giám thị (Supervisor)",
            "concept_key": "supervisor",
            "description": "Person responsible for supervising and taking attendance for an exam slot."
          },
          "pre_slot_message": {
            "ui_label": "Tin nhắn trước buổi học (Pre-slot Message)",
            "concept_key": "pre_slot_message",
            "description": "Student sends privately to lecturer/TA of the slot (text + URL), only before T0. This function does not affect attendance status in any form and is only for providing reference information to the lecturer."
          },
          "slot_announcement": {
            "ui_label": "Thông báo của buổi học (Slot Announcement)",
            "concept_key": "slot_announcement",
            "description": "Announcement (title + text) attached to a slot by lecturer/TA; displayed to all students enrolled in the slot; can be pinned."
          },
          "system_notification": {
            "ui_label": "Thông báo hệ thống (System Notification)",
            "concept_key": "system_notification",
            "description": "Notification issued by the system to target users."
          },
          "automated_attendance": {
            "ui_label": "Điểm danh tự động (Automated Attendance)",
            "description": "System automatically takes attendance via IP cameras."
          },
          "attendance_status_values": {
            "ui_label": "Trạng thái điểm danh (Attendance Statuses)",
            "values": [
              "not_yet",
              "present",
              "absent"
            ]
          }
        },
        "mappings": [
          {
            "ui_label": "Update student notification status",
            "permission": "ACKNOWLEDGE_STUDENT_NOTIFICATION"
          },
          {
            "ui_label": "Send message to lecturer",
            "concept": "pre_slot_message"
          },
          {
            "ui_label": "Slot announcement",
            "concept": "slot_announcement"
          },
          {
            "ui_label": "System notification",
            "concept": "system_notification"
          }
        ]
      },
      "tech_stack": {
        "frontend": {
          "web": {
            "description": "Web platform for Lecturers, Supervisors, and Admin",
            "technology": "Next.js",
            "ui_library": "shadcn/ui"
          },
          "mobile_app": {
            "description": "Mobile application for Students",
            "technology": "React Native"
          }
        },
        "backend": {
          "main_service": {
            "description": "Main service handling business logic",
            "technology": "Java (Spring Boot)",
            "runtime": "JDK 21+"
          },
          "recognition_service": {
            "description": "Service handling face recognition",
            "technology": "Python (FastAPI)"
          }
        },
        "database": {
          "primary_database": {
            "technology": "PostgreSQL",
            "extensions": [
              "pgvector"
            ]
          }
        }
      },
      "to_be_discussed_or_backlog": [
        "Dashboard Design: Finalize KPIs displayed for each role",
        "Standardize reasons/forms: If upgrading 'Slot Announcement' to a standardized approval (request) flow in the future",
        "API Integration: Define scope/security/throttling/response format for planned endpoints",
        "Conflict resolution with external systems (SIS/LMS): Priority rules for data overwrite when importing",
        "Identity Re-registration details: Consider policy 'only 1 pending request per type' and related UX",
        "Mobile for Lecturers: Evaluate needs and scope if expanding",
        "Upgrade Backend-Service communication mechanism: Research and transition communication mechanism from 'Direct API Call' to 'Message Queue' (e.g., RabbitMQ) to increase reliability and scalability of the system when deployed at large scale"
      ],
      "notes": [
        "All data is managed and filtered by Semester",
        "The primary platform for Lecturers & Supervisors is Web. Mobile app development for these roles is being considered to optimize experience",
        "User accounts are created and managed directly in the system by Data Operator. Google login is used for email verification"
      ],
      "in_scope_functions": {
        "slot_interactions": "Lecturers/TAs add remarks & attach announcements to slots; Students view announcements/remarks from lecturers and can send pre-slot messages (text + URL) up to T0."
      }
    },
    "database": {
      "tables": {
        "users": {
          "primary_key": "id",
          "description": "Core user accounts table",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique user identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "username": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Login username (Student ID or Employee ID)"
            },
            "email": {
              "type": "varchar(128)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "User email address"
            },
            "full_name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "User's full name"
            },
            "password_hash": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "Hashed password (nullable for Google-only accounts)"
            }
          }
        },
        "password_reset_tokens": {
          "primary_key": "id",
          "description": "Password reset tokens for account recovery",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique token identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Token creation timestamp"
            },
            "expires_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Token expiration timestamp"
            },
            "email": {
              "type": "varchar(128)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Email address for password reset"
            },
            "token_hash": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Hashed reset token"
            }
          }
        },
        "roles": {
          "primary_key": "id",
          "description": "System roles definition",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique role identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Role name (e.g., STUDENT, LECTURER, SYSTEM_ADMIN)"
            }
          }
        },
        "permissions": {
          "primary_key": "id",
          "description": "System permissions catalog",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique permission identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Permission name (e.g., USER_CREATE, SLOT_READ)"
            }
          }
        },
        "user_roles": {
          "primary_key": [
            "user_id",
            "role_id"
          ],
          "description": "Many-to-many relationship between users and roles",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user"
            },
            "role_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "roles",
                "column": "id"
              },
              "description": "Reference to role"
            }
          }
        },
        "role_permissions": {
          "primary_key": [
            "role_id",
            "permission_id"
          ],
          "description": "Many-to-many relationship between roles and permissions",
          "columns": {
            "role_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "roles",
                "column": "id"
              },
              "description": "Reference to role"
            },
            "permission_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "permissions",
                "column": "id"
              },
              "description": "Reference to permission"
            }
          }
        },
        "majors": {
          "primary_key": "id",
          "description": "Academic majors/programs",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique major identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Major name"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Major code"
            }
          }
        },
        "semesters": {
          "primary_key": "id",
          "description": "Academic semesters",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique semester identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Semester name"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Semester code"
            },
            "start_date": {
              "type": "date",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Semester start date"
            },
            "end_date": {
              "type": "date",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Semester end date"
            }
          }
        },
        "subjects": {
          "primary_key": "id",
          "description": "Academic subjects/courses",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique subject identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "major_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "majors",
                "column": "id"
              },
              "description": "Reference to major"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Subject name"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Subject code"
            }
          }
        },
        "classes": {
          "primary_key": "id",
          "description": "Class instances (subject + semester combination)",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique class identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "subject_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "subjects",
                "column": "id"
              },
              "description": "Reference to subject"
            },
            "semester_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "semesters",
                "column": "id"
              },
              "description": "Reference to semester"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Class name"
            }
          },
          "indexes": [
            {
              "name": "classes_subject_id_semester_id_name_idx",
              "columns": [
                "subject_id",
                "semester_id",
                "name"
              ],
              "unique": true,
              "description": "Unique constraint for class within subject and semester"
            }
          ]
        },
        "enrollments": {
          "primary_key": [
            "class_id",
            "student_user_id"
          ],
          "description": "Student enrollment in classes",
          "columns": {
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Enrollment creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Enrollment last update timestamp"
            },
            "class_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "classes",
                "column": "id"
              },
              "description": "Reference to class"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to student user"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Enrollment status (soft delete for withdrawals)"
            }
          }
        },
        "student_profiles": {
          "primary_key": "user_id",
          "description": "Extended profile information for student users",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user account"
            },
            "major_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "majors",
                "column": "id"
              },
              "description": "Student's major/program"
            },
            "roll_number": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Student's unique roll number (e.g., HE180314)"
            }
          }
        },
        "staff_profiles": {
          "primary_key": "user_id",
          "description": "Extended profile information for staff users (lecturers, supervisors, etc.)",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user account"
            },
            "staff_code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Staff's unique employee code"
            }
          }
        },
        "rooms": {
          "primary_key": "id",
          "description": "Physical rooms/classrooms",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique room identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Room availability status"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Room name/identifier"
            },
            "location": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "Room location description"
            }
          }
        },
        "cameras": {
          "primary_key": "id",
          "description": "IP cameras installed in rooms for attendance monitoring",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique camera identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "room_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "rooms",
                "column": "id"
              },
              "description": "Room where camera is installed"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Camera operational status"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Camera name/identifier"
            },
            "rtsp_url": {
              "type": "varchar(512)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "RTSP stream URL for video access"
            }
          }
        },
        "slot_cameras": {
          "primary_key": [
            "slot_id",
            "camera_id"
          ],
          "description": "Assignment of cameras to specific slots for attendance monitoring",
          "columns": {
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Reference to slot"
            },
            "camera_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "cameras",
                "column": "id"
              },
              "description": "Reference to camera"
            }
          }
        },
        "slots": {
          "primary_key": "id",
          "description": "Lecture or exam sessions",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique slot identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "start_time": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Slot start time"
            },
            "end_time": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Slot end time"
            },
            "finalized_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When attendance was finalized (null if not finalized)"
            },
            "class_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "classes",
                "column": "id"
              },
              "description": "Reference to class"
            },
            "room_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "rooms",
                "column": "id"
              },
              "description": "Room where slot takes place"
            },
            "staff_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Lecturer or supervisor responsible for the slot"
            },
            "slot_type": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of slot: 'LECTURE' or 'EXAM'"
            },
            "title": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "The specific name of the slot, especially for an exam (e.g., 'Progress Test 1')."
            },
            "description": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "General notes or instructions for the slot, visible to participants."
            },
            "exam_subcategory": {
              "type": "varchar(30)",
              "constraints": [
                null
              ],
              "description": "Sub-category for exam slots to distinguish them, e.g., 'PROGRESS_TEST', 'FINAL_EXAM'."
            },
            "external_exam_url": {
              "type": "varchar(2048)",
              "constraints": [
                null
              ],
              "description": "Optional URL linking to the actual exam on an external platform."
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Slot status (cancelled slots marked inactive)"
            }
          },
          "notes": [
            "slot_type determines available functions (LECTURE allows announcements, pre-slot messages)",
            "finalized_at tracks when attendance was completed by staff"
          ]
        },
        "attendance_records": {
          "primary_key": "id",
          "description": "Individual student attendance records for slots",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique attendance record identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "recorded_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "When attendance status was recorded"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to student"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Reference to slot"
            },
            "status": {
              "type": "varchar(30)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Attendance status: 'not_yet', 'present', 'absent', 'absent_after_present'"
            },
            "method": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "How status was determined: 'auto', 'manual', 'system_finalize'"
            },
            "history": {
              "type": "jsonb",
              "constraints": [
                null
              ],
              "description": "JSON array of status changes with timestamps"
            }
          },
          "indexes": [
            {
              "name": "attendance_records_student_user_id_slot_id_idx",
              "columns": [
                "student_user_id",
                "slot_id"
              ],
              "unique": true,
              "description": "One attendance record per student per slot"
            }
          ],
          "notes": [
            "Status 'not_yet' is initial state before any attendance check",
            "Status 'present' indicates student was detected/marked present",
            "Status 'absent' is final absent status",
            "Status 'absent_after_present' indicates student left after being marked present",
            "Method 'auto' for face recognition results",
            "Method 'manual' for lecturer/supervisor manual updates",
            "Method 'system_finalize' for batch status updates during finalization"
          ]
        },
        "attendance_remarks": {
          "primary_key": "id",
          "description": "Additional comments/notes on attendance records",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique remark identifier"
            },
            "attendance_record_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "attendance_records",
                "column": "id"
              },
              "description": "Reference to attendance record"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Remark creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark last update timestamp"
            },
            "created_by_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Staff member who created the remark"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Remark status (soft delete)"
            },
            "remark": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark content/explanation"
            }
          },
          "notes": [
            "Used for explaining attendance status changes or special circumstances",
            "Multiple remarks can be added to the same attendance record",
            "Remarks are required when manually changing attendance status"
          ]
        },
        "identity_submissions": {
          "primary_key": "id",
          "description": "Student identity registration and update requests",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique submission identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Submission creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Submission last update timestamp"
            },
            "reviewed_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When submission was reviewed (null if pending)"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Student submitting identity request"
            },
            "reviewed_by_user_id": {
              "type": "int",
              "constraints": [
                null
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Data operator who reviewed the submission"
            },
            "status": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Submission status: 'pending', 'approved', 'rejected'"
            },
            "submission_type": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of submission: 'initial', 'update'"
            },
            "rejection_reason": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "Reason for rejection (required if status is 'rejected')"
            }
          },
          "notes": [
            "Initial submissions require both face video and ID card",
            "Update submissions only require face video",
            "Approved submissions trigger face embedding generation"
          ]
        },
        "identity_assets": {
          "primary_key": "id",
          "description": "Files uploaded as part of identity submissions",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique asset identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Asset creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Asset last update timestamp"
            },
            "submission_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "identity_submissions",
                "column": "id"
              },
              "description": "Reference to identity submission"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Asset status"
            },
            "asset_type": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of asset: 'face_video' or 'id_card'"
            },
            "storage_url": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "URL/path to stored file"
            }
          },
          "notes": [
            "Each submission can have multiple assets",
            "Face videos are processed to generate embeddings",
            "ID cards are used for manual verification by data operators"
          ]
        },
        "face_embeddings": {
          "primary_key": "id",
          "description": "Vector embeddings generated from approved face videos for recognition",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique embedding identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Embedding creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Embedding last update timestamp"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Student this embedding belongs to"
            },
            "generated_from_asset_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "identity_assets",
                "column": "id"
              },
              "description": "Source asset used to generate this embedding"
            },
            "version": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Embedding version (incremented on updates)"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": false,
              "description": "Whether this embedding is currently used for recognition"
            },
            "embedding_vector": {
              "type": "vector(512)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "512-dimensional face embedding vector"
            }
          },
          "notes": [
            "Requires pgvector extension for vector operations",
            "Only one embedding per student should be active at a time",
            "New embeddings replace old ones when identity is updated",
            "Vector similarity search is used for face recognition"
          ]
        },
        "slot_announcements": {
          "primary_key": "id",
          "description": "Announcements created by lecturers for specific slots",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique announcement identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Announcement creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Announcement last update timestamp"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Slot this announcement belongs to"
            },
            "created_by_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Lecturer who created the announcement"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Announcement status (soft delete)"
            },
            "title": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Announcement title"
            },
            "content": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Announcement content/message"
            }
          },
          "notes": [
            "Only available for LECTURE type slots",
            "Visible to all students enrolled in the slot",
            "Can be created, edited, or deleted by the slot's lecturer"
          ]
        },
        "pre_slot_messages": {
          "primary_key": "id",
          "description": "Messages sent by students to lecturers before slot starts",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique message identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Message creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Message last update timestamp"
            },
            "acknowledged_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When lecturer acknowledged/read the message"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Slot this message is about"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Student who sent the message"
            },
            "content": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Message content"
            },
            "url": {
              "type": "varchar(2048)",
              "constraints": [
                null
              ],
              "description": "Optional URL attachment"
            }
          },
          "notes": [
            "Only available for LECTURE type slots",
            "Can only be sent before slot start time (T0)",
            "Does not affect attendance status - purely informational",
            "Lecturers can mark messages as acknowledged"
          ]
        },
        "system_notifications": {
          "primary_key": "id",
          "description": "System-generated notifications for users",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique notification identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Notification creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Notification status"
            },
            "notification_type": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of notification (e.g., 'identity_rejected', 'slot_cancelled')"
            },
            "title": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification title"
            },
            "content": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification content/message"
            }
          },
          "notes": [
            "Template-based notifications generated by system events",
            "Delivered to specific users via notification_deliveries table"
          ]
        },
        "notification_deliveries": {
          "primary_key": "id",
          "description": "Delivery records for system notifications to specific users",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique delivery identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Delivery creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Delivery last update timestamp"
            },
            "read_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When user read the notification (null if unread)"
            },
            "notification_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "system_notifications",
                "column": "id"
              },
              "description": "Reference to system notification"
            },
            "recipient_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "User who should receive this notification"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Delivery status"
            }
          },
          "notes": [
            "One delivery record per notification per recipient",
            "Tracks read status for each user individually",
            "Used to show unread counts and notification history"
          ]
        },
        "system_configurations": {
          "primary_key": "id",
          "description": "System-wide configuration settings",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique configuration identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Configuration creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Configuration last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Configuration status"
            },
            "key": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Configuration key/name"
            },
            "value": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Configuration value (can be JSON for complex settings)"
            },
            "description": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "Human-readable description of the configuration"
            }
          },
          "notes": [
            "Used for AI model settings, similarity thresholds, system behavior",
            "Only System Admins can modify these settings",
            "Values can be simple strings or JSON objects for complex configurations"
          ]
        },
        "operational_audit_logs": {
          "primary_key": "id",
          "description": "Audit trail for important business operations",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique audit log identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "When the action occurred"
            },
            "actor_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "User who performed the action"
            },
            "action_type": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of action (e.g., 'CREATE', 'UPDATE', 'DELETE', 'FINALIZE')"
            },
            "target_entity": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Entity type that was affected (e.g., 'slot', 'attendance_record')"
            },
            "target_id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL"
              ],
              "description": "ID of the affected entity"
            },
            "changes": {
              "type": "jsonb",
              "constraints": [
                null
              ],
              "description": "JSON object containing before/after values for changes"
            }
          },
          "notes": [
            "Provides complete audit trail for compliance and debugging",
            "Records who did what, when, and what changed",
            "Especially important for attendance finalization actions",
            "Changes field contains structured data about what was modified"
          ]
        }
      },
      "notes": [
        "Each room can have multiple cameras for comprehensive coverage",
        "Cameras are assigned to rooms but can be selectively used for specific slots",
        "RTSP URLs must be unique to prevent conflicts in video stream access",
        "slot_cameras table allows flexible camera assignment per slot rather than using all room cameras"
      ],
      "extensions_required": [
        {
          "name": "pgvector",
          "description": "Required for storing and querying face embedding vectors",
          "tables": [
            "face_embeddings"
          ]
        }
      ],
      "communication_flow": [
        "Lecturers create slot_announcements for their lecture slots",
        "Students send pre_slot_messages to lecturers before class starts",
        "System generates system_notifications for various events",
        "notification_deliveries tracks which users receive which notifications",
        "Students see combined feed of slot announcements and system notifications"
      ],
      "example_configurations": [
        {
          "key": "face_recognition.similarity_threshold",
          "value": "0.85",
          "description": "Minimum similarity score for face recognition matches"
        },
        {
          "key": "attendance.max_absence_percentage",
          "value": "20",
          "description": "The maximum allowed absence percentage for students before being marked ineligible for the final exam."
        },
        {
          "key": "attendance.auto_finalize_hours",
          "value": "24",
          "description": "Hours after slot end time before auto-finalization"
        },
        {
          "key": "notification.email_enabled",
          "value": "true",
          "description": "Whether to send email notifications"
        }
      ],
      "example_audit_entries": [
        {
          "action_type": "FINALIZE",
          "target_entity": "slot",
          "target_id": 12345,
          "changes": "{\n  \"finalized_at\": {\n    \"before\": null,\n    \"after\": \"2024-10-16T14:30:00Z\"\n  },\n  \"attendance_updates\": [\n    {\n      \"student_id\": 67890,\n      \"status\": {\"before\": \"not_yet\", \"after\": \"absent\"}\n    }\n  ]\n}\n"
        },
        {
          "action_type": "UPDATE",
          "target_entity": "attendance_record",
          "target_id": 98765,
          "changes": "{\n  \"status\": {\n    \"before\": \"absent\",\n    \"after\": \"present\"\n  },\n  \"method\": {\n    \"before\": \"auto\",\n    \"after\": \"manual\"\n  },\n  \"reason\": \"Student provided valid excuse\"\n}"
        }
      ]
    },
    "backend": {
      "tech_stack_and_architecture": {
        "project_info": {
          "project_code": "FUACS",
          "project_name": "FU Attendance Checking Smart",
          "backend_service_name": "backend",
          "last_updated": "2025-10-16T00:00:00Z",
          "description": "FUACS Backend Service - Main API service handling business logic, authentication, authorization, and data management for the attendance and academic management system"
        },
        "technology_stack": {
          "runtime": {
            "framework": "Spring Boot",
            "version": "3.5.6",
            "language": "Java 21",
            "build_tool": "Maven"
          },
          "libraries": {
            "web": [
              "spring-boot-starter-web"
            ],
            "security": [
              "spring-boot-starter-security",
              "spring-boot-starter-oauth2-authorization-server"
            ],
            "data": [
              "spring-boot-starter-data-jpa",
              "postgresql"
            ],
            "validation": [
              "hibernate-validator",
              "jakarta.validation-api"
            ],
            "mapping": [
              "mapstruct"
            ],
            "external_integrations": [
              "google-api-client",
              "google-http-client-jackson2",
              "spring-boot-starter-mail",
              "resilience4j-spring-boot3",
              "spring-dotenv"
            ],
            "documentation": [
              "springdoc-openapi-starter-webmvc-ui"
            ]
          },
          "testing": {
            "unit_testing": [
              "spring-boot-starter-test",
              "spring-security-test"
            ],
            "integration_testing": [
              "testcontainers-junit-jupiter",
              "testcontainers-postgresql"
            ]
          },
          "containerization": {
            "builder_image": "maven:3.9-eclipse-temurin-21",
            "runtime_image": "eclipse-temurin:21-jre-alpine",
            "entrypoint": "java -jar app.jar"
          }
        },
        "architecture_patterns": {
          "rest_api_layer": {
            "description": "Controllers expose REST endpoints under /api/v1/* using Spring MVC annotations",
            "conventions": [
              "Use @RestController and @RequestMapping for base path",
              "Return Response or PagingResponse wrapper for consistent API responses",
              "Apply @PreAuthorize for method-level security with granular permissions",
              "Use @Valid for request body validation with Jakarta validation"
            ]
          },
          "service_layer": {
            "description": "Services encapsulate business logic, orchestrating repositories and utilities before returning DTOs",
            "conventions": [
              "Use @Service annotation",
              "Apply @Transactional for write operations",
              "Apply @Transactional(readOnly = true) for read operations",
              "Throw domain-specific exceptions (ResourceNotFoundException)",
              "Use IllegalArgumentException for business rule violations (duplicate codes, invalid data)",
              "Use DataIntegrityViolationException for database constraint violations (foreign key conflicts)",
              "Return DTOs, never entities",
              "Perform business rule validation before persistence"
            ]
          },
          "security_pipeline": {
            "description": "Stateless JWT resource server with custom authentication filter and method security permission evaluator",
            "jwt_configuration": {
              "algorithm": "HS256 (HMAC with SHA-256)",
              "library": "Nimbus JOSE + JWT",
              "token_types": {
                "access_token": {
                  "expiration": "60 minutes",
                  "claims": [
                    "subject (username)",
                    "userId",
                    "email",
                    "authorities (permissions)",
                    "isSystemAdmin"
                  ]
                },
                "refresh_token": {
                  "expiration": "1 day",
                  "claims": [
                    "userId",
                    "authType"
                  ]
                },
                "password_reset_token": {
                  "expiration": "15 minutes",
                  "storage": "password_reset_tokens table with token hash"
                }
              }
            },
            "authentication_methods": {
              "username_password": {
                "description": "Traditional login with username and password",
                "password_hashing": "BCryptPasswordEncoder (Spring Security)",
                "flow": "Username lookup → BCrypt password verification → JWT token generation"
              },
              "google_oauth": {
                "description": "Google Sign-In for email verification",
                "library": "google-api-client",
                "flow": "Google token verification → Email-based user lookup → JWT token generation",
                "note": "Users must be pre-created in system by Data Operator"
              }
            },
            "authorization": {
              "method_security": "@EnableMethodSecurity with @PreAuthorize annotations",
              "permission_evaluator": "Custom PermissionEvaluatorImpl for granular permission checks",
              "permission_format": "hasPermission(null, 'PERMISSION_NAME')",
              "technical_debt": "Many endpoints still lack @PreAuthorize annotations"
            },
            "security_filters": [
              "AuthenticationRequestFilter (custom filter after BearerTokenAuthenticationFilter)",
              "JWT decoder with secret key verification",
              "Custom authentication entry point for 401 responses"
            ]
          },
          "dto_mapping": {
            "description": "MapStruct mappers convert between entities and DTO payloads",
            "conventions": [
              "Use @Mapper(componentModel = \"spring\")",
              "Extend DTOMapper base interface",
              "Provide toEntity(CreateRequest) for create operations",
              "Provide toEntity(UpdateRequest) for update operations",
              "Service layer manually maps fields from UpdateRequest to existing entity (not using @MappingTarget pattern)"
            ]
          },
          "exception_handling": {
            "description": "Global exception handler provides consistent error responses",
            "conventions": [
              "Use @ControllerAdvice for global exception handling",
              "Return Response wrapper with appropriate status and message",
              "Map specific exceptions to HTTP status codes",
              "Include validation error details for MethodArgumentNotValidException"
            ],
            "exception_mappings": {
              "ResourceNotFoundException": "404 NOT_FOUND",
              "IllegalArgumentException": "400 BAD_REQUEST",
              "DataIntegrityViolationException": "409 CONFLICT",
              "BadCredentialsException": "401 UNAUTHORIZED",
              "AccessDeniedException": "403 FORBIDDEN",
              "InsufficientAuthenticationException": "401 UNAUTHORIZED",
              "InvalidBearerTokenException": "401 UNAUTHORIZED",
              "OAuth2AuthenticationException": "401 UNAUTHORIZED",
              "MethodArgumentNotValidException": "400 BAD_REQUEST (with field-level validation errors)",
              "Exception": "500 INTERNAL_SERVER_ERROR (generic fallback)"
            }
          },
          "data_access": {
            "description": "JPA repositories with Spring Data JPA",
            "conventions": [
              "Extend JpaRepository<Entity, ID>",
              "Use custom @Query (JPQL or native) for search/count operations",
              "Native queries preferred for complex search with LIKE patterns",
              "@Modifying annotation not currently used (UPDATE operations done via entity save)"
            ],
            "base_entity_auditing": {
              "description": "Automatic timestamp management via Spring Data JPA auditing",
              "configuration": "@EnableJpaAuditing with custom DateTimeProvider",
              "fields": {
                "createdAt": "Auto-populated on entity creation via @CreatedDate",
                "updatedAt": "Auto-populated on entity update via @LastModifiedDate",
                "isActive": "Manual management for soft delete capability"
              }
            },
            "delete_operations": {
              "soft_delete": {
                "description": "Deactivation via PUT endpoint by updating isActive field to false",
                "http_method": "PUT",
                "permission_pattern": "*_UPDATE (e.g., SEMESTER_UPDATE, USER_UPDATE_STATUS)",
                "implementation": "Service layer sets entity.setActive(false) and saves",
                "note": "Preserves data for audit and reporting purposes"
              },
              "hard_delete": {
                "description": "Permanent deletion via DELETE endpoint",
                "http_method": "DELETE",
                "permission_pattern": "*_DELETE_HARD (e.g., SEMESTER_DELETE_HARD, USER_DELETE_HARD)",
                "implementation": "Repository.deleteById(id) - permanent removal from database",
                "constraint_handling": "Throws DataIntegrityViolationException if foreign key constraints exist",
                "note": "Hard delete permissions are NOT assigned to any role by default for safety"
              }
            }
          }
        }
      },
      "coding_standards": {
        "dto_pattern": {
          "type": "classes",
          "description": "Use regular Java classes with getters/setters, NOT records",
          "request_dto": {
            "location": "com.fuacs.backend.dto.request",
            "naming_conventions": {
              "standard_crud": {
                "pattern": "{Entity}CreateRequest and {Entity}UpdateRequest",
                "description": "Separate request classes for create and update operations",
                "examples": {
                  "create": [
                    "SemesterCreateRequest",
                    "MajorCreateRequest",
                    "SubjectCreateRequest",
                    "StaffCreateRequest"
                  ],
                  "update": [
                    "SemesterUpdateRequest",
                    "MajorUpdateRequest",
                    "SubjectUpdateRequest",
                    "StaffUpdateRequest"
                  ]
                },
                "note": "Some entities use single {Entity}Request for both operations (e.g., UserRequest)"
              },
              "specific_actions": {
                "pattern": "{Prefix}{Action}Request or {Action}{Entity}Request",
                "description": "Used for specific actions beyond standard CRUD",
                "examples": [
                  "PasswordForgotRequest",
                  "PasswordResetRequest",
                  "PasswordUpdateRequest",
                  "IdentitySubmissionCreationRequest",
                  "IdentitySubmissionReviewRequest"
                ]
              },
              "authentication": {
                "pattern": "Login{Variant}Request",
                "description": "For authentication variants",
                "examples": [
                  "LoginRequest",
                  "LoginGoogleRequest",
                  "RefreshTokenRequest"
                ]
              },
              "search_filtering": {
                "pattern": "{Entity}SearchRequest",
                "description": "For search and pagination, extends PagedRequest base class",
                "examples": [
                  "SemesterSearchRequest",
                  "UserSearchRequest",
                  "ClassSearchRequest"
                ],
                "base_class": "PagedRequest (provides page, pageSize, sort, sortBy fields)"
              }
            },
            "validation": {
              "description": "Use jakarta.validation.constraints and hibernate-validator annotations",
              "common_annotations": [
                "@NotBlank - for required string fields",
                "@NotNull - for required non-string fields",
                "@Size(max=n) - for string length constraints",
                "@Length(max=n) - Hibernate validator for string length",
                "@Email - for email format validation",
                "@Pattern(regexp=...) - for custom regex validation",
                "@Min/@Max - for numeric range validation",
                "@Future/@FutureOrPresent - for date validation"
              ],
              "examples": [
                "SemesterCreateRequest: @NotBlank, @Length, @FutureOrPresent",
                "UserRequest: @NotBlank, @Size, @Email",
                "PagedRequest: @Min, @Max, @Pattern for pagination parameters"
              ]
            }
          },
          "response_dto": {
            "location": "com.fuacs.backend.dto.response",
            "naming_patterns": [
              "{Entity}DTO"
            ],
            "examples": [
              "SemesterDTO",
              "UserDTO",
              "StaffDTO",
              "TokenResponse",
              "ClassDTO"
            ],
            "annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
            "base_dto": {
              "description": "BaseDTO provides common audit fields for response DTOs",
              "class": "BaseDTO",
              "fields": [
                "isActive: Boolean",
                "createdAt: Instant",
                "updatedAt: Instant"
              ],
              "usage": "Most entity DTOs extend BaseDTO (e.g., SemesterDTO, UserDTO)",
              "json_property": "@JsonProperty(\"isActive\") on getActive() method for proper JSON serialization"
            }
          }
        },
        "mapper_pattern": {
          "framework": "MapStruct",
          "base_interface": "DTOMapper<ResponseDTO, Entity>",
          "component_model": "spring",
          "conventions": [
            "Extend DTOMapper<ResponseDTO, Entity> for standard CRUD mappers",
            "Use @Mapper(componentModel = \"spring\") annotation",
            "Provide toEntity(CreateRequest) for create operations",
            "Provide toEntity(UpdateRequest) for update operations"
          ],
          "update_pattern": {
            "description": "Two approaches for update operations",
            "approach_1": {
              "name": "Separate toEntity(UpdateRequest) method",
              "usage": "Most common - used by Semester, Major, Subject, etc.",
              "implementation": "Service layer manually maps fields from UpdateRequest to existing entity",
              "example": "SemesterMapper has toEntity(SemesterUpdateRequest), but SemesterService manually sets fields"
            },
            "approach_2": {
              "name": "@MappingTarget pattern",
              "usage": "Less common - only UserMapper implements this",
              "implementation": "Mapper method with @MappingTarget updates existing entity directly",
              "example": "UserMapper.updateUserFromRequest(UserRequest, @MappingTarget User)",
              "note": "Available but not consistently used across services"
            }
          },
          "special_mappings": [
            "Use @Mappings for complex field mappings (e.g., StudentProfileDTO from StudentProfile)",
            "Use @BeanMapping(nullValuePropertyMappingStrategy = IGNORE) for partial updates"
          ]
        },
        "response_wrapper": {
          "standard": "Response (generic type T)",
          "paginated": "PagingResponse (generic type T)",
          "status_codes": {
            "success": 200,
            "created": 201,
            "bad_request": 400,
            "unauthorized": 401,
            "forbidden": 403,
            "not_found": 404,
            "conflict": 409,
            "internal_server_error": 500
          }
        },
        "entity_layer": {
          "base_class": {
            "name": "BaseEntity",
            "description": "Abstract class providing common audit and lifecycle fields",
            "annotations": [
              "@MappedSuperclass",
              "@EntityListeners(AuditingEntityListener.class)"
            ],
            "fields": {
              "createdAt": "Instant - auto-populated via @CreatedDate (non-updatable)",
              "updatedAt": "Instant - auto-populated via @LastModifiedDate",
              "isActive": "Boolean - for soft delete capability (manual management)"
            },
            "auditing": "Requires @EnableJpaAuditing in configuration with custom DateTimeProvider"
          },
          "naming_conventions": {
            "entity_classes": "Singular form (User, Role, Semester, StudyClass)",
            "table_names": "Plural lowercase (users, roles, semesters, classes)",
            "special_cases": "StudyClass entity → 'classes' table (avoid Java keyword conflict)"
          },
          "primary_key_strategy": {
            "strategy": "@GeneratedValue(strategy = GenerationType.IDENTITY)",
            "id_types": {
              "standard_entities": "Integer (User, Slot, IdentitySubmission, PasswordResetToken)",
              "lookup_tables": "Short (Semester, Major, Subject, StudyClass, Room, Camera, Role, Permission)"
            }
          },
          "soft_delete": {
            "field": "isActive Boolean",
            "implementation": "Service layer sets entity.setActive(false) for deactivation",
            "note": "Soft delete via PUT endpoint, hard delete via DELETE endpoint"
          },
          "entities_not_extending_base_entity": [
            "PasswordResetToken - has own createdAt and expiresAt fields",
            "IdentitySubmission - has own timestamp fields (createdAt, updatedAt, reviewedAt)",
            "StudentProfile - lifecycle managed through parent User entity via @MapsId"
          ]
        },
        "service_layer_standards": {
          "annotation": "@Service",
          "transaction_management": {
            "write_operations": "@Transactional (default propagation and isolation)",
            "read_operations": "@Transactional(readOnly = true) for query optimization",
            "note": "Transactional boundaries at service layer, not repository layer"
          },
          "error_handling": {
            "principle": "Throw exceptions, never return null",
            "exceptions": [
              "ResourceNotFoundException - for entity not found (404)",
              "IllegalArgumentException - for business rule violations (400)",
              "DataIntegrityViolationException - for constraint violations (409)"
            ],
            "example": "SemesterService throws IllegalArgumentException for duplicate code/name"
          },
          "validation": {
            "timing": "Perform business rule validation before persistence",
            "examples": [
              "Check for duplicate codes/names before creating entities",
              "Verify foreign key references exist (e.g., majorId, roomId)",
              "Validate role assignment rules (e.g., STUDENT cannot have LECTURER role)"
            ],
            "note": "Jakarta validation (@Valid) handles request DTO validation at controller layer"
          },
          "return_types": {
            "principle": "Always return DTOs, never entities",
            "single_item": "Return DTO (e.g., SemesterDTO)",
            "collections": "Return List<DTO> or Set<DTO>",
            "mapping": "Use MapStruct mappers to convert entities to DTOs"
          },
          "update_pattern": {
            "description": "Standard pattern for update operations",
            "steps": [
              "1. Fetch existing entity from repository (throw ResourceNotFoundException if not found)",
              "2. Validate business rules (uniqueness, constraints)",
              "3. Manually map fields from UpdateRequest to existing entity",
              "4. Save entity via repository",
              "5. Convert saved entity to DTO and return"
            ],
            "example": "SemesterService.update() - fetches existing, validates, manually sets fields, saves"
          }
        },
        "controller_layer_standards": {
          "annotations": [
            "@RestController",
            "@RequestMapping(\"/api/v1/{resource}\")"
          ],
          "response_wrapper": {
            "single_item": "Response<T> for single entity responses",
            "paginated_list": "PagingResponse<T> for paginated collections",
            "factory_methods": [
              "Response.ok(data) - 200 with data",
              "Response.ok(message) - 200 with message only",
              "Response.created(data) - 201 with data",
              "PagingResponse.of(items, total, request) - paginated response"
            ]
          },
          "security": {
            "annotation": "@PreAuthorize(\"hasPermission(null, 'PERMISSION_NAME')\")",
            "permission_format": "DOMAIN_ACTION (e.g., SEMESTER_READ, USER_CREATE)",
            "enforcement": "Method-level security on all endpoints",
            "technical_debt": "Many endpoints still lack @PreAuthorize annotations"
          },
          "validation": {
            "request_body": "@Valid @RequestBody for DTO validation",
            "query_params": "@Valid on request objects (e.g., SearchRequest)",
            "error_handling": "GlobalExceptionHandler catches MethodArgumentNotValidException"
          },
          "path_variables": {
            "type_matching": "Use appropriate types matching entity ID types",
            "examples": [
              "Short for lookup tables (@PathVariable Short id) - Semester, Major, Subject",
              "Integer for standard entities (@PathVariable Integer userId) - User, Slot"
            ],
            "note": "Type mismatch will cause 400 Bad Request automatically"
          },
          "http_methods": {
            "GET": "Retrieve resources (findAll, findById)",
            "POST": "Create new resources",
            "PUT": "Update existing resources (including soft delete via isActive)",
            "DELETE": "Hard delete (permanent removal, requires *_DELETE_HARD permission)"
          }
        }
      },
      "data_models": {
        "entities": {
          "User": {
            "table": "users",
            "description": "System account with login credentials and activation state",
            "fields": [
              "id (Integer)",
              "username",
              "email",
              "full_name",
              "is_active",
              "password_hash"
            ],
            "relationships": "Many-to-many with Role via user_roles",
            "notes": "Extends BaseEntity for created_at/updated_at/is_active"
          },
          "Role": {
            "table": "roles",
            "description": "Aggregates permissions and is assigned to users",
            "fields": [
              "id (Short)",
              "name",
              "is_active"
            ],
            "relationships": [
              "Many-to-many with User via user_roles (bidirectional with Set<User> users)",
              "Many-to-many with Permission via role_permissions (bidirectional with Set<Permission> permissions)"
            ],
            "notes": "Extends BaseEntity. Bidirectional relationships allow navigation from both sides"
          },
          "Permission": {
            "table": "permissions",
            "description": "Fine-grained capability toggled by roles",
            "fields": [
              "id (Short)",
              "name",
              "is_active"
            ],
            "relationships": "Many-to-many with Role via role_permissions (bidirectional with Set<Role> roles)",
            "notes": "Extends BaseEntity. Bidirectional relationship allows querying roles by permission"
          },
          "PasswordResetToken": {
            "table": "password_reset_tokens",
            "description": "Temporary token for password reset flow with expiration",
            "fields": [
              "id (Integer)",
              "email",
              "token_hash",
              "created_at",
              "expires_at"
            ],
            "relationships": "None",
            "notes": "Tokens expire after 15 minutes. Upsert strategy: existing tokens are updated when a new reset request is made for the same email"
          },
          "Semester": {
            "table": "semesters",
            "description": "Academic semester with start and end dates",
            "fields": [
              "id (Short)",
              "name",
              "code",
              "start_date",
              "end_date",
              "is_active"
            ],
            "relationships": "One-to-many with StudyClass",
            "notes": "Extends BaseEntity for created_at/updated_at/is_active"
          },
          "Major": {
            "table": "majors",
            "description": "Academic major/program for student specialization",
            "fields": [
              "id (Short)",
              "name",
              "code",
              "is_active"
            ],
            "relationships": "One-to-many with Subject, One-to-many with StudentProfile",
            "notes": "Extends BaseEntity for created_at/updated_at/is_active"
          },
          "Subject": {
            "table": "subjects",
            "description": "Academic subject/course within a major",
            "fields": [
              "id (Short)",
              "name",
              "code",
              "major_id",
              "is_active"
            ],
            "relationships": "Many-to-one with Major, One-to-many with StudyClass",
            "notes": "Extends BaseEntity for created_at/updated_at/is_active"
          },
          "StudyClass": {
            "table": "classes",
            "description": "Class instance linking subject and semester (named StudyClass to avoid Java keyword conflict)",
            "fields": [
              "id (Short)",
              "name",
              "subject_id",
              "semester_id",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with Subject",
              "Many-to-one with Semester",
              "One-to-many with Slot",
              "One-to-many with Enrollment"
            ],
            "notes": "Extends BaseEntity. Unique index on (subject_id, semester_id, name)"
          },
          "Room": {
            "table": "rooms",
            "description": "Physical classroom or examination room",
            "fields": [
              "id (Short)",
              "name",
              "location",
              "is_active"
            ],
            "relationships": [
              "One-to-many with Slot",
              "Many-to-one from Camera (unidirectional)"
            ],
            "notes": "Extends BaseEntity. Camera relationship is unidirectional (Camera → Room only, no Set<Camera> in Room entity)"
          },
          "Camera": {
            "table": "cameras",
            "description": "IP camera assigned to rooms for attendance monitoring",
            "fields": [
              "id (Short)",
              "name",
              "rtsp_url",
              "room_id",
              "is_active"
            ],
            "relationships": "Many-to-one with Room, Many-to-many with Slot via slot_cameras",
            "notes": "Extends BaseEntity for created_at/updated_at/is_active"
          },
          "Slot": {
            "table": "slots",
            "description": "Lecture or exam session with time and location details",
            "fields": [
              "id (Integer)",
              "start_time (Instant)",
              "end_time (Instant)",
              "finalized_at (Instant)",
              "slot_type (SlotType enum)",
              "class_id",
              "room_id",
              "staff_user_id",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with StudyClass",
              "Many-to-one with Room",
              "Many-to-one with User (staff)",
              "Many-to-many with Camera via slot_cameras (Set<Camera> cameras)",
              "One-to-many with AttendanceRecord"
            ],
            "notes": "Extends BaseEntity. SlotType enum: LECTURE, EXAM"
          },
          "IdentitySubmission": {
            "table": "identity_submissions",
            "description": "Student identity registration and update requests for facial recognition",
            "fields": [
              "id (Integer)",
              "student_user_id",
              "reviewed_by_user_id",
              "status",
              "submission_type",
              "rejection_reason",
              "reviewed_at",
              "created_at",
              "updated_at"
            ],
            "relationships": "Many-to-one with User (student), Many-to-one with User (reviewer)",
            "notes": "Does not extend BaseEntity. Has own timestamp fields"
          },
          "StudentProfile": {
            "table": "student_profiles",
            "description": "Student-specific profile data with major assignment",
            "fields": [
              "userId (Integer)",
              "major_id"
            ],
            "relationships": "One-to-one with User entity, sharing the same primary key via @MapsId",
            "notes": "Uses one-to-one relationship with User entity, sharing the same primary key via @MapsId. Does NOT extend BaseEntity by design - lifecycle management (timestamps, soft delete) is handled through the parent User entity. No separate created_at/updated_at/is_active fields since these are tracked in the associated User entity. This design ensures data consistency and avoids duplication of audit fields"
          }
        },
        "auditing": {
          "base_class": "BaseEntity",
          "description": "Provides created_at and updated_at timestamps via Spring Data JPA auditing plus isActive flag",
          "fields": [
            "createdAt (Instant)",
            "updatedAt (Instant)",
            "isActive (Boolean)"
          ],
          "configuration": "@EnableJpaAuditing with custom DateTimeProvider in CommonBeanConfig",
          "annotations": [
            "@MappedSuperclass",
            "@EntityListeners(AuditingEntityListener.class)"
          ]
        },
        "enums": {
          "SlotType": {
            "description": "Type of slot session",
            "values": [
              "LECTURE",
              "EXAM"
            ],
            "usage": "Slot.slotType field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(20)"
          },
          "IdentitySubmissionStatus": {
            "description": "Status of identity verification request",
            "values": [
              "PENDING",
              "APPROVED",
              "REJECTED"
            ],
            "usage": "IdentitySubmission.status field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(20)"
          },
          "IdentitySubmissionType": {
            "description": "Type of identity submission",
            "values": [
              "INITIAL_REGISTRATION",
              "UPDATE_REQUEST"
            ],
            "usage": "IdentitySubmission.submissionType field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(20)"
          },
          "AttendanceStatus": {
            "description": "Status of student attendance in a slot",
            "values": [
              "NOT_YET",
              "PRESENT",
              "ABSENT",
              "ABSENT_AFTER_PRESENT"
            ],
            "usage": "AttendanceRecord.status field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(20)"
          },
          "AttendanceMethod": {
            "description": "Method used to record attendance",
            "values": [
              "AUTO",
              "MANUAL",
              "SYSTEM_FINALIZE"
            ],
            "usage": "AttendanceRecord.method field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(20)"
          },
          "NotificationType": {
            "description": "Type of system notification",
            "values": [
              "IDENTITY_REJECTED",
              "IDENTITY_APPROVED",
              "SLOT_CANCELLED",
              "ABSENCE_WARNING_10",
              "ABSENCE_WARNING_20",
              "ABSENCE_WARNING_MAX",
              "EXAM_INELIGIBLE"
            ],
            "usage": "SystemNotification.notificationType field (@Enumerated(EnumType.STRING))",
            "storage": "VARCHAR(50)"
          },
          "AttendanceRecord": {
            "table": "attendance_records",
            "description": "Individual attendance record for a student in a slot",
            "fields": [
              "id (Long)",
              "recorded_at (Instant)",
              "status (AttendanceStatus enum)",
              "method (AttendanceMethod enum)",
              "history (TEXT)",
              "student_user_id",
              "slot_id",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with User (student)",
              "Many-to-one with Slot",
              "One-to-many with AttendanceRemark"
            ],
            "notes": "Extends BaseEntity. Unique constraint on (student_user_id, slot_id). History field stores JSON of status changes"
          },
          "AttendanceRemark": {
            "table": "attendance_remarks",
            "description": "Staff remarks/notes on attendance records",
            "fields": [
              "id (Long)",
              "remark (TEXT)",
              "attendance_record_id",
              "created_by_user_id",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with AttendanceRecord",
              "Many-to-one with User (created by)"
            ],
            "notes": "Extends BaseEntity. Allows staff to add multiple remarks to an attendance record"
          },
          "Enrollment": {
            "table": "enrollments",
            "description": "Student enrollment in classes with status tracking and soft delete support",
            "fields": [
              "class_id (Short, composite PK)",
              "student_user_id (Integer, composite PK)",
              "is_active (Boolean)",
              "enrolled_at (Instant)",
              "updated_at (Instant)"
            ],
            "relationships": [
              "Many-to-one with StudyClass via @MapsId",
              "Many-to-one with User via @MapsId"
            ],
            "notes": "Uses composite primary key (EnrollmentId). Does NOT extend BaseEntity. Uses @EntityListeners for audit fields. Supports soft delete via is_active flag"
          },
          "EnrollmentId": {
            "description": "Composite primary key for Enrollment entity",
            "fields": [
              "class_id (Short)",
              "student_user_id (Integer)"
            ],
            "notes": "@Embeddable class implementing Serializable with equals() and hashCode()"
          },
          "SlotAnnouncement": {
            "table": "slot_announcements",
            "description": "Announcements attached to slots by lecturers",
            "fields": [
              "id (Integer)",
              "title (VARCHAR 255)",
              "content (TEXT)",
              "slot_id",
              "created_by_user_id",
              "created_at (Instant)",
              "updated_at (Instant)",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with Slot",
              "Many-to-one with User (created by)"
            ],
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for audit fields"
          },
          "PreSlotMessage": {
            "table": "pre_slot_messages",
            "description": "Messages sent by students to lecturers before slot starts",
            "fields": [
              "id (Long)",
              "content (TEXT)",
              "url (VARCHAR 2048)",
              "slot_id",
              "student_user_id",
              "created_at (Instant)",
              "updated_at (Instant)",
              "acknowledged_at (Instant)"
            ],
            "relationships": [
              "Many-to-one with Slot",
              "Many-to-one with User (student)"
            ],
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for audit fields. acknowledged_at tracks when lecturer viewed the message"
          },
          "SystemNotification": {
            "table": "system_notifications",
            "description": "System-generated notifications (template/master records)",
            "fields": [
              "id (Long)",
              "notification_type (NotificationType enum)",
              "title (VARCHAR 255)",
              "content (TEXT)",
              "created_at (Instant)",
              "updated_at (Instant)",
              "is_active"
            ],
            "relationships": [
              "One-to-many with NotificationDelivery"
            ],
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for audit fields. Stores notification templates, actual delivery tracked in NotificationDelivery"
          },
          "NotificationDelivery": {
            "table": "notification_deliveries",
            "description": "Tracks delivery and read status of notifications to individual users",
            "fields": [
              "id (Long)",
              "notification_id",
              "recipient_user_id",
              "read_at (Instant)",
              "created_at (Instant)",
              "updated_at (Instant)",
              "is_active"
            ],
            "relationships": [
              "Many-to-one with SystemNotification",
              "Many-to-one with User (recipient)"
            ],
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for audit fields. read_at is null until user reads the notification"
          },
          "SystemConfiguration": {
            "table": "system_configurations",
            "description": "System-wide configuration parameters",
            "fields": [
              "id (Integer)",
              "key (VARCHAR 255, unique)",
              "value (TEXT)",
              "description (TEXT)",
              "created_at (Instant)",
              "updated_at (Instant)",
              "is_active"
            ],
            "relationships": "None",
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for audit fields",
            "examples": [
              "attendance.max_absence_percentage",
              "token.access_expiration_minutes",
              "email.template.password_reset"
            ]
          },
          "OperationalAuditLog": {
            "table": "operational_audit_logs",
            "description": "Audit trail for business operations",
            "fields": [
              "id (Long)",
              "action_type (VARCHAR 50)",
              "target_entity (VARCHAR 50)",
              "target_id (Long)",
              "changes (TEXT)",
              "actor_user_id",
              "created_at (Instant)"
            ],
            "relationships": [
              "Many-to-one with User (actor)"
            ],
            "notes": "Does NOT extend BaseEntity. Uses @EntityListeners for created_at only. changes field stores JSON of modifications"
          }
        }
      },
      "codebase_inventory": {
        "feature_clusters": {
          "user_management": {
            "description": "User account management, authentication, and staff profiles",
            "core_files": {
              "entity": "com/fuacs/backend/entity/User.java",
              "repository": "com/fuacs/backend/repository/UserRepository.java",
              "service": "com/fuacs/backend/service/StaffService.java",
              "controller": "com/fuacs/backend/controller/StaffController.java",
              "mapper": "com/fuacs/backend/dto/mapper/UserMapper.java"
            },
            "related_files": {
              "request_dtos": [
                "com/fuacs/backend/dto/request/UserRequest.java",
                "com/fuacs/backend/dto/request/UserSearchRequest.java",
                "com/fuacs/backend/dto/request/StaffCreateRequest.java",
                "com/fuacs/backend/dto/request/StaffUpdateRequest.java"
              ],
              "response_dtos": [
                "com/fuacs/backend/dto/response/UserDTO.java",
                "com/fuacs/backend/dto/response/StaffDTO.java"
              ]
            },
            "dependencies": [
              "BaseEntity.java",
              "RoleRepository.java",
              "EmailService.java",
              "PasswordEncoder (BCryptPasswordEncoder bean)"
            ],
            "dependents": [
              "AuthenticationService.java",
              "StudentProfileService.java",
              "SlotService.java"
            ]
          },
          "authentication": {
            "description": "Authentication, password management, and token handling",
            "core_files": {
              "entity": "com/fuacs/backend/entity/PasswordResetToken.java",
              "repository": "com/fuacs/backend/repository/PasswordResetTokenRepository.java",
              "service": "com/fuacs/backend/service/AuthenticationService.java",
              "controller": "com/fuacs/backend/controller/AuthenticationController.java",
              "utility": "com/fuacs/backend/util/TokenProviderUtil.java"
            },
            "related_files": {
              "request_dtos": [
                "com/fuacs/backend/dto/request/LoginRequest.java",
                "com/fuacs/backend/dto/request/LoginGoogleRequest.java",
                "com/fuacs/backend/dto/request/RefreshTokenRequest.java",
                "com/fuacs/backend/dto/request/PasswordForgotRequest.java",
                "com/fuacs/backend/dto/request/PasswordResetRequest.java",
                "com/fuacs/backend/dto/request/PasswordUpdateRequest.java"
              ],
              "response_dtos": [
                "com/fuacs/backend/dto/response/TokenResponse.java"
              ]
            },
            "dependencies": [
              "UserRepository.java",
              "RoleRepository.java",
              "PermissionRepository.java",
              "EmailService.java",
              "PasswordEncoder (BCryptPasswordEncoder)"
            ],
            "dependents": [],
            "notes": "JWT-based authentication with Google OAuth support. Password reset tokens expire after 15 minutes with upsert strategy"
          },
          "role_permission": {
            "description": "Role-based access control and permission management",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/Role.java",
                "com/fuacs/backend/entity/Permission.java"
              ],
              "repositories": [
                "com/fuacs/backend/repository/RoleRepository.java",
                "com/fuacs/backend/repository/PermissionRepository.java"
              ],
              "services": [
                "com/fuacs/backend/service/RoleService.java",
                "com/fuacs/backend/service/PermissionService.java"
              ],
              "controllers": [
                "com/fuacs/backend/controller/RoleController.java",
                "com/fuacs/backend/controller/PermissionController.java"
              ],
              "mappers": [
                "com/fuacs/backend/dto/mapper/RoleMapper.java",
                "com/fuacs/backend/dto/mapper/PermissionMapper.java"
              ]
            },
            "related_files": {
              "request_dtos": {
                "role": [
                  "com/fuacs/backend/dto/request/RoleCreateRequest.java",
                  "com/fuacs/backend/dto/request/RoleUpdateRequest.java",
                  "com/fuacs/backend/dto/request/RoleSearchRequest.java"
                ],
                "permission": [
                  "com/fuacs/backend/dto/request/PermissionCreateRequest.java",
                  "com/fuacs/backend/dto/request/PermissionUpdateRequest.java",
                  "com/fuacs/backend/dto/request/PermissionSearchRequest.java"
                ]
              },
              "response_dtos": [
                "com/fuacs/backend/dto/response/RoleDTO.java",
                "com/fuacs/backend/dto/response/PermissionDTO.java"
              ]
            },
            "dependencies": [
              "BaseEntity.java"
            ],
            "dependents": [
              "UserRepository.java (Many-to-many with User via user_roles)",
              "AuthenticationService.java (loads permissions for JWT)",
              "StaffService.java (assigns roles to staff)",
              "StudentProfileService.java (assigns STUDENT role)",
              "PermissionEvaluatorImpl.java (evaluates permissions)"
            ],
            "notes": [
              "Permission naming convention: DOMAIN_ACTION (e.g., USER_CREATE, SEMESTER_READ)",
              "Role-permission mapping via role_permissions join table",
              "User-role mapping via user_roles join table",
              "Bidirectional relationships: Role ↔ Permission, Role ↔ User",
              "Permissions are loaded into JWT access token for stateless authorization"
            ]
          },
          "academic_catalog": {
            "description": "Academic entities: semesters, majors, subjects, classes",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/Semester.java",
                "com/fuacs/backend/entity/Major.java",
                "com/fuacs/backend/entity/Subject.java",
                "com/fuacs/backend/entity/StudyClass.java"
              ],
              "repositories": [
                "com/fuacs/backend/repository/SemesterRepository.java",
                "com/fuacs/backend/repository/MajorRepository.java",
                "com/fuacs/backend/repository/SubjectRepository.java",
                "com/fuacs/backend/repository/ClassRepository.java"
              ],
              "services": [
                "com/fuacs/backend/service/SemesterService.java",
                "com/fuacs/backend/service/MajorService.java",
                "com/fuacs/backend/service/SubjectService.java",
                "com/fuacs/backend/service/ClassService.java"
              ],
              "controllers": [
                "com/fuacs/backend/controller/SemesterController.java",
                "com/fuacs/backend/controller/MajorController.java",
                "com/fuacs/backend/controller/SubjectController.java",
                "com/fuacs/backend/controller/ClassController.java"
              ],
              "mappers": [
                "com/fuacs/backend/dto/mapper/SemesterMapper.java",
                "com/fuacs/backend/dto/mapper/MajorMapper.java",
                "com/fuacs/backend/dto/mapper/SubjectMapper.java",
                "com/fuacs/backend/dto/mapper/StudyClassMapper.java"
              ]
            },
            "related_files": {
              "request_dtos": {
                "semester": [
                  "com/fuacs/backend/dto/request/SemesterCreateRequest.java",
                  "com/fuacs/backend/dto/request/SemesterUpdateRequest.java",
                  "com/fuacs/backend/dto/request/SemesterSearchRequest.java"
                ],
                "major": [
                  "com/fuacs/backend/dto/request/MajorCreateRequest.java",
                  "com/fuacs/backend/dto/request/MajorUpdateRequest.java",
                  "com/fuacs/backend/dto/request/MajorSearchRequest.java"
                ],
                "subject": [
                  "com/fuacs/backend/dto/request/SubjectCreateRequest.java",
                  "com/fuacs/backend/dto/request/SubjectUpdateRequest.java",
                  "com/fuacs/backend/dto/request/SubjectSearchRequest.java"
                ],
                "class": [
                  "com/fuacs/backend/dto/request/ClassCreateRequest.java",
                  "com/fuacs/backend/dto/request/ClassUpdateRequest.java",
                  "com/fuacs/backend/dto/request/ClassSearchRequest.java"
                ]
              },
              "response_dtos": [
                "com/fuacs/backend/dto/response/SemesterDTO.java",
                "com/fuacs/backend/dto/response/MajorDTO.java",
                "com/fuacs/backend/dto/response/SubjectDTO.java",
                "com/fuacs/backend/dto/response/ClassDTO.java"
              ]
            },
            "dependencies": [
              "BaseEntity.java"
            ],
            "dependents": [
              "StudentProfileService.java (Major → StudentProfile relationship)",
              "SlotService.java (StudyClass → Slot relationship)"
            ],
            "entity_relationships": [
              "Semester → StudyClass (one-to-many)",
              "Major → Subject (one-to-many)",
              "Major → StudentProfile (one-to-many)",
              "Subject → StudyClass (one-to-many)",
              "StudyClass → Slot (one-to-many)",
              "StudyClass → Enrollment (one-to-many)"
            ],
            "notes": [
              "StudyClass entity named to avoid Java 'class' keyword conflict",
              "All entities extend BaseEntity for audit fields",
              "Hierarchical structure: Semester/Major → Subject → StudyClass → Slot",
              "StudyClass links Subject and Semester together",
              "Enrollment management now via Enrollment entity (not simple join table)"
            ]
          },
          "infrastructure": {
            "description": "Physical infrastructure: rooms, cameras, slots",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/Room.java",
                "com/fuacs/backend/entity/Camera.java",
                "com/fuacs/backend/entity/Slot.java"
              ],
              "repositories": [
                "com/fuacs/backend/repository/RoomRepository.java",
                "com/fuacs/backend/repository/CameraRepository.java",
                "com/fuacs/backend/repository/SlotRepository.java"
              ],
              "services": [
                "com/fuacs/backend/service/RoomService.java",
                "com/fuacs/backend/service/CameraService.java",
                "com/fuacs/backend/service/SlotService.java"
              ],
              "controllers": [
                "com/fuacs/backend/controller/RoomController.java",
                "com/fuacs/backend/controller/CameraController.java",
                "com/fuacs/backend/controller/SlotController.java"
              ],
              "mappers": [
                "com/fuacs/backend/dto/mapper/RoomMapper.java",
                "com/fuacs/backend/dto/mapper/CameraMapper.java",
                "com/fuacs/backend/dto/mapper/SlotMapper.java"
              ],
              "enums": [
                "com/fuacs/backend/constant/enums/SlotType.java"
              ]
            },
            "related_files": {
              "request_dtos": {
                "room": [
                  "com/fuacs/backend/dto/request/RoomCreateRequest.java",
                  "com/fuacs/backend/dto/request/RoomUpdateRequest.java",
                  "com/fuacs/backend/dto/request/RoomSearchRequest.java"
                ],
                "camera": [
                  "com/fuacs/backend/dto/request/CameraCreateRequest.java",
                  "com/fuacs/backend/dto/request/CameraUpdateRequest.java",
                  "com/fuacs/backend/dto/request/CameraSearchRequest.java"
                ],
                "slot": [
                  "com/fuacs/backend/dto/request/SlotCreateRequest.java",
                  "com/fuacs/backend/dto/request/SlotUpdateRequest.java",
                  "com/fuacs/backend/dto/request/SlotSearchRequest.java"
                ]
              },
              "response_dtos": [
                "com/fuacs/backend/dto/response/RoomDTO.java",
                "com/fuacs/backend/dto/response/CameraDTO.java",
                "com/fuacs/backend/dto/response/SlotDTO.java",
                "com/fuacs/backend/dto/response/SlotTypeDTO.java"
              ]
            },
            "dependencies": [
              "BaseEntity.java",
              "ClassRepository.java (Slot → StudyClass relationship)",
              "UserRepository.java (Slot → User staff relationship)",
              "RoomRepository.java (Camera → Room relationship)"
            ],
            "dependents": [],
            "notes": [
              "SlotType enum: LECTURE, EXAM",
              "Slot has many-to-many relationship with Camera via slot_cameras join table",
              "Camera has unidirectional many-to-one relationship with Room",
              "Slot.finalizedAt tracks when attendance was finalized",
              "Slot has one-to-many relationship with AttendanceRecord"
            ]
          },
          "identity_management": {
            "description": "Identity verification and submission management",
            "core_files": {
              "entity": "com/fuacs/backend/entity/IdentitySubmission.java",
              "repository": "com/fuacs/backend/repository/IdentitySubmissionRepository.java",
              "service": "com/fuacs/backend/service/IdentitySubmissionService.java",
              "controller": "com/fuacs/backend/controller/IdentitySubmissionController.java",
              "mapper": "com/fuacs/backend/dto/mapper/IdentitySubmissionMapper.java",
              "enums": [
                "com/fuacs/backend/constant/enums/IdentitySubmissionStatus.java",
                "com/fuacs/backend/constant/enums/IdentitySubmissionType.java"
              ]
            },
            "related_files": {
              "request_dtos": [
                "com/fuacs/backend/dto/request/IdentitySubmissionCreationRequest.java",
                "com/fuacs/backend/dto/request/IdentitySubmissionReviewRequest.java",
                "com/fuacs/backend/dto/request/IdentitySubmissionSearchRequest.java"
              ],
              "response_dtos": [
                "com/fuacs/backend/dto/response/IdentitySubmissionDTO.java"
              ]
            },
            "dependencies": [
              "UserRepository.java (student and reviewer relationships)",
              "EmailService.java (rejection notifications)"
            ],
            "dependents": [],
            "notes": [
              "IdentitySubmissionStatus: PENDING, APPROVED, REJECTED",
              "IdentitySubmissionType: INITIAL_REGISTRATION, UPDATE_REQUEST",
              "File storage for face video and ID card images NOT YET IMPLEMENTED",
              "Rejection triggers automatic email notification to student"
            ]
          },
          "student_profiles": {
            "description": "Student profile management and academic assignment",
            "core_files": {
              "entity": "com/fuacs/backend/entity/StudentProfile.java",
              "repository": "com/fuacs/backend/repository/StudentProfileRepository.java",
              "service": "com/fuacs/backend/service/StudentProfileService.java",
              "controller": "com/fuacs/backend/controller/StudentProfileController.java",
              "mapper": "com/fuacs/backend/dto/mapper/StudentProfileMapper.java"
            },
            "related_files": {
              "request_dtos": [
                "com/fuacs/backend/dto/request/StudentProfileCreateRequest.java",
                "com/fuacs/backend/dto/request/StudentProfileUpdateRequest.java",
                "com/fuacs/backend/dto/request/StudentProfileSearchRequest.java"
              ],
              "response_dtos": [
                "com/fuacs/backend/dto/response/StudentProfileDTO.java"
              ]
            },
            "dependencies": [
              "UserRepository.java (one-to-one relationship via @MapsId)",
              "MajorRepository.java (major assignment)",
              "RoleRepository.java (assigns STUDENT role)",
              "UserMapper.java (maps User fields to StudentProfileDTO)",
              "EmailService.java (sends password to new students)"
            ],
            "dependents": [],
            "notes": [
              "StudentProfile uses @MapsId for one-to-one relationship with User",
              "Does NOT extend BaseEntity - lifecycle managed through User entity",
              "Creating student profile automatically assigns STUDENT role",
              "Random password generated and emailed to student on creation"
            ]
          },
          "attendance": {
            "description": "Attendance tracking and remark management",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/AttendanceRecord.java",
                "com/fuacs/backend/entity/AttendanceRemark.java"
              ],
              "enums": [
                "com/fuacs/backend/constant/enums/AttendanceStatus.java",
                "com/fuacs/backend/constant/enums/AttendanceMethod.java"
              ]
            },
            "dependencies": [
              "BaseEntity.java",
              "UserRepository.java (student and staff relationships)",
              "SlotRepository.java (slot relationship)"
            ],
            "dependents": [],
            "notes": [
              "AttendanceStatus: NOT_YET, PRESENT, ABSENT, ABSENT_AFTER_PRESENT",
              "AttendanceMethod: AUTO, MANUAL, SYSTEM_FINALIZE",
              "AttendanceRecord has unique constraint on (student_user_id, slot_id)",
              "AttendanceRemark allows multiple staff remarks per attendance record",
              "History field in AttendanceRecord stores JSON of status changes",
              "Repositories, services, controllers NOT YET IMPLEMENTED"
            ]
          },
          "slot_interaction": {
            "description": "Slot announcements and pre-slot messaging",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/SlotAnnouncement.java",
                "com/fuacs/backend/entity/PreSlotMessage.java"
              ]
            },
            "dependencies": [
              "SlotRepository.java (slot relationship)",
              "UserRepository.java (creator and student relationships)"
            ],
            "dependents": [],
            "notes": [
              "SlotAnnouncement created by lecturers/staff for slot-wide announcements",
              "PreSlotMessage sent by students to lecturers before slot starts",
              "PreSlotMessage.acknowledgedAt tracks when lecturer viewed the message",
              "Both entities use @EntityListeners for audit fields instead of extending BaseEntity",
              "Repositories, services, controllers NOT YET IMPLEMENTED"
            ]
          },
          "notifications": {
            "description": "System notification management and delivery tracking",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/SystemNotification.java",
                "com/fuacs/backend/entity/NotificationDelivery.java"
              ],
              "enums": [
                "com/fuacs/backend/constant/enums/NotificationType.java"
              ],
              "services": [
                "com/fuacs/backend/service/EmailService.java"
              ]
            },
            "dependencies": [
              "UserRepository.java (recipient relationship)"
            ],
            "dependents": [
              "AuthenticationService.java (password reset emails)",
              "StudentProfileService.java (new student password emails)",
              "IdentitySubmissionService.java (rejection notifications)"
            ],
            "notes": [
              "NotificationType: IDENTITY_REJECTED, IDENTITY_APPROVED, SLOT_CANCELLED, ABSENCE_WARNING_10, ABSENCE_WARNING_20, ABSENCE_WARNING_MAX, EXAM_INELIGIBLE",
              "SystemNotification stores notification templates/master records",
              "NotificationDelivery tracks per-user delivery and read status",
              "EmailService currently implemented for email notifications",
              "In-app notification repositories, services, controllers NOT YET IMPLEMENTED"
            ]
          },
          "system_admin": {
            "description": "System configuration and audit logging",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/SystemConfiguration.java",
                "com/fuacs/backend/entity/OperationalAuditLog.java"
              ]
            },
            "dependencies": [
              "UserRepository.java (actor relationship in audit log)"
            ],
            "dependents": [],
            "notes": [
              "SystemConfiguration stores key-value pairs for system settings",
              "OperationalAuditLog tracks business operations (slot finalization, identity approval, etc.)",
              "Both entities use @EntityListeners for audit fields",
              "Repositories, services, controllers NOT YET IMPLEMENTED"
            ]
          },
          "enrollment_management": {
            "description": "Student enrollment in classes with soft delete support",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/Enrollment.java",
                "com/fuacs/backend/entity/EnrollmentId.java"
              ]
            },
            "dependencies": [
              "StudyClass entity",
              "User entity"
            ],
            "dependents": [
              "StudyClass (one-to-many relationship)"
            ],
            "notes": [
              "Enrollment uses composite primary key (EnrollmentId)",
              "Supports soft delete via is_active flag",
              "Uses @MapsId for both relationships (StudyClass and User)",
              "Does NOT extend BaseEntity, uses @EntityListeners for audit fields",
              "Repositories, services, controllers NOT YET IMPLEMENTED"
            ]
          },
          "shared_infrastructure": {
            "description": "Base classes, utilities, and shared components",
            "core_files": {
              "entities": [
                "com/fuacs/backend/entity/BaseEntity.java"
              ],
              "services": [
                "com/fuacs/backend/service/EmailService.java"
              ],
              "mappers": [
                "com/fuacs/backend/dto/mapper/DTOMapper.java"
              ],
              "response_wrappers": [
                "com/fuacs/backend/dto/response/Response.java",
                "com/fuacs/backend/dto/response/PagingResponse.java",
                "com/fuacs/backend/dto/response/BaseDTO.java"
              ],
              "exceptions": [
                "com/fuacs/backend/exception/GlobalExceptionHandler.java",
                "com/fuacs/backend/exception/ResourceNotFoundException.java"
              ],
              "configuration": [
                "com/fuacs/backend/config/CommonBeanConfig.java",
                "com/fuacs/backend/config/HttpSecurityConfig.java",
                "com/fuacs/backend/config/PermissionEvaluatorImpl.java",
                "com/fuacs/backend/config/AuthenticationRequestFilter.java",
                "com/fuacs/backend/config/CustomAuthenticationEntryPoint.java"
              ]
            },
            "dependencies": [],
            "dependents": "All other clusters",
            "notes": "ResourceConflictException and InvalidDateRangeException not implemented. System uses IllegalArgumentException and DataIntegrityViolationException instead"
          }
        },
        "cluster_summary": {
          "total_clusters": 13,
          "fully_implemented_clusters": 8,
          "partially_implemented_clusters": 5,
          "files_per_cluster": {
            "user_management": {
              "core_files": 5,
              "request_dtos": 4,
              "response_dtos": 2,
              "total": 11
            },
            "authentication": {
              "core_files": 5,
              "request_dtos": 6,
              "response_dtos": 1,
              "total": 12
            },
            "role_permission": {
              "core_files": 8,
              "request_dtos": 6,
              "response_dtos": 2,
              "total": 16
            },
            "academic_catalog": {
              "core_files": 16,
              "request_dtos": 12,
              "response_dtos": 4,
              "total": 32
            },
            "infrastructure": {
              "core_files": 13,
              "request_dtos": 9,
              "response_dtos": 4,
              "total": 26
            },
            "identity_management": {
              "core_files": 7,
              "request_dtos": 3,
              "response_dtos": 1,
              "total": 11
            },
            "student_profiles": {
              "core_files": 5,
              "request_dtos": 3,
              "response_dtos": 1,
              "total": 9
            },
            "attendance": {
              "core_files": 4,
              "request_dtos": 0,
              "response_dtos": 0,
              "total": 4,
              "status": "entities only"
            },
            "slot_interaction": {
              "core_files": 2,
              "request_dtos": 0,
              "response_dtos": 0,
              "total": 2,
              "status": "entities only"
            },
            "notifications": {
              "core_files": 4,
              "request_dtos": 0,
              "response_dtos": 0,
              "total": 4,
              "status": "entities only (EmailService exists)"
            },
            "system_admin": {
              "core_files": 2,
              "request_dtos": 0,
              "response_dtos": 0,
              "total": 2,
              "status": "entities only"
            },
            "enrollment_management": {
              "core_files": 2,
              "request_dtos": 0,
              "response_dtos": 0,
              "total": 2,
              "status": "entities only"
            },
            "shared_infrastructure": {
              "core_files": 15,
              "total": 15
            }
          },
          "grand_total_files": 148
        },
        "cross_cluster_dependencies": {
          "most_depended_on": [
            {
              "cluster": "shared_infrastructure",
              "reason": "Provides base classes, utilities, and configuration for all clusters",
              "key_components": [
                "BaseEntity",
                "EmailService",
                "DTOMapper",
                "Response wrappers",
                "GlobalExceptionHandler",
                "Security configuration"
              ]
            },
            {
              "cluster": "user_management",
              "reason": "User entity is referenced by many other entities",
              "key_components": [
                "UserRepository",
                "UserMapper",
                "User entity"
              ],
              "dependents": [
                "authentication",
                "student_profiles",
                "identity_management",
                "infrastructure (Slot)",
                "attendance",
                "slot_interaction",
                "notifications",
                "system_admin",
                "enrollment_management"
              ]
            },
            {
              "cluster": "role_permission",
              "reason": "RBAC system used throughout application",
              "key_components": [
                "RoleRepository",
                "PermissionRepository",
                "PermissionEvaluatorImpl"
              ],
              "dependents": [
                "authentication",
                "user_management",
                "student_profiles"
              ]
            }
          ],
          "dependency_chains": {
            "chain_1": {
              "path": "student_profiles → user_management → role_permission → shared_infrastructure",
              "description": "Student profile creation requires user creation, role assignment, and base infrastructure"
            },
            "chain_2": {
              "path": "authentication → user_management → role_permission → shared_infrastructure",
              "description": "Authentication loads user with roles and permissions for JWT token generation"
            },
            "chain_3": {
              "path": "infrastructure (Slot) → academic_catalog (StudyClass) → shared_infrastructure",
              "description": "Slots reference classes which reference subjects/semesters"
            },
            "chain_4": {
              "path": "infrastructure (Slot) → user_management (staff) → shared_infrastructure",
              "description": "Slots reference staff users (lecturers/supervisors)"
            },
            "chain_5": {
              "path": "identity_management → user_management → shared_infrastructure",
              "description": "Identity submissions reference student and reviewer users"
            },
            "chain_6": {
              "path": "attendance → infrastructure (Slot) → academic_catalog (StudyClass) → shared_infrastructure",
              "description": "Attendance records reference slots which reference classes"
            },
            "chain_7": {
              "path": "attendance → user_management (student) → shared_infrastructure",
              "description": "Attendance records reference student users"
            },
            "chain_8": {
              "path": "slot_interaction → infrastructure (Slot) → user_management → shared_infrastructure",
              "description": "Slot announcements and pre-slot messages reference slots and users"
            },
            "chain_9": {
              "path": "notifications → user_management (recipient) → shared_infrastructure",
              "description": "Notification deliveries reference recipient users"
            },
            "chain_10": {
              "path": "enrollment_management → academic_catalog (StudyClass) → user_management (student) → shared_infrastructure",
              "description": "Enrollments link students to classes"
            }
          },
          "circular_dependencies": "None - clean dependency hierarchy maintained",
          "integration_points": [
            "EmailService used by: authentication, user_management, student_profiles, identity_management",
            "UserRepository used by: authentication, student_profiles, identity_management, infrastructure (Slot), attendance, slot_interaction, notifications, system_admin, enrollment_management",
            "RoleRepository used by: authentication, user_management, student_profiles",
            "SlotRepository used by: attendance, slot_interaction",
            "BaseEntity extended by: User, Role, Permission, Semester, Major, Subject, StudyClass, Room, Camera, Slot, AttendanceRecord, AttendanceRemark",
            "@EntityListeners used by: Enrollment, SlotAnnouncement, PreSlotMessage, SystemNotification, NotificationDelivery, SystemConfiguration, OperationalAuditLog",
            "Entities NOT extending BaseEntity: PasswordResetToken, IdentitySubmission, StudentProfile, Enrollment, EnrollmentId, SlotAnnouncement, PreSlotMessage, SystemNotification, NotificationDelivery, SystemConfiguration, OperationalAuditLog"
          ]
        }
      },
      "feature_status": {
        "BE_FEAT_AUTH": {
          "name": "Authentication Core",
          "status": "implemented",
          "completion": "90%",
          "components": [
            "AuthenticationController",
            "AuthenticationService",
            "TokenProviderUtil",
            "EmailService",
            "PasswordResetTokenRepository"
          ],
          "description": "Complete authentication flow with username/password, Google Sign-In, JWT tokens, and password reset",
          "missing": "Ownership validation for password updates (TODO noted in code)"
        },
        "BE_FEAT_AUTHZ": {
          "name": "Authorization & Security",
          "status": "partially implemented",
          "completion": "70%",
          "components": [
            "Method Security",
            "PermissionEvaluator",
            "JWT Filter",
            "@PreAuthorize annotations"
          ],
          "description": "Granular permission-based authorization with method-level security",
          "missing": "Full permission coverage for all endpoints (many endpoints lack @PreAuthorize annotations)"
        },
        "BE_FEAT_USER_MGMT": {
          "name": "User Management CRUD",
          "status": "partially implemented",
          "completion": "60%",
          "components": [
            "StaffController",
            "StaffService",
            "UserRepository",
            "UserMapper",
            "AuthenticationService"
          ],
          "description": "User management through staff profiles and authentication endpoints",
          "missing": "Dedicated UserController for general user CRUD operations, comprehensive user management beyond staff profiles"
        },
        "BE_FEAT_ROLE_PERMISSION": {
          "name": "Role & Permission Management",
          "status": "implemented",
          "completion": "80%",
          "components": [
            "RoleController",
            "PermissionController",
            "RoleService",
            "PermissionService and related repositories"
          ],
          "description": "Role and permission CRUD with role-permission mapping",
          "missing": "Advanced role assignment constraints and validation"
        },
        "BE_FEAT_ACADEMIC_CATALOG": {
          "name": "Academic Catalog Management",
          "status": "implemented",
          "completion": "85%",
          "components": [
            "SemesterController",
            "MajorController",
            "SubjectController",
            "ClassController and related services"
          ],
          "description": "Complete CRUD operations for semesters, majors, subjects, and classes with hierarchical relationships",
          "missing": "Advanced search and filtering capabilities, bulk import/export"
        },
        "BE_FEAT_INFRASTRUCTURE": {
          "name": "Infrastructure Management",
          "status": "implemented",
          "completion": "85%",
          "components": [
            "RoomController",
            "CameraController",
            "SlotController",
            "Slot-Camera associations",
            "related services"
          ],
          "description": "Room, camera, and slot management with proper associations",
          "implemented": [
            "Room CRUD operations",
            "Camera CRUD operations with room assignment",
            "Slot CRUD operations with SlotType (LECTURE/EXAM)",
            "Slot-camera many-to-many associations via slot_cameras table",
            "Slot finalization tracking (finalizedAt field)"
          ],
          "missing": "Camera status monitoring (online/offline), RTSP connection health checks"
        },
        "BE_FEAT_IDENTITY_MGMT": {
          "name": "Identity Management System",
          "status": "partially implemented",
          "completion": "50%",
          "components": [
            "IdentitySubmissionController",
            "IdentitySubmissionService",
            "IdentitySubmissionMapper",
            "Enums"
          ],
          "description": "Identity registration and verification request management",
          "implemented": [
            "IdentitySubmission entity with status tracking",
            "IdentitySubmissionStatus enum (PENDING, APPROVED, REJECTED)",
            "IdentitySubmissionType enum (INITIAL_REGISTRATION, UPDATE_REQUEST)",
            "Submission creation and review workflows",
            "Student and reviewer user relationships"
          ],
          "missing": "File upload/storage for face video and ID card images, face embedding processing, integration with Python recognition service"
        },
        "BE_FEAT_STUDENT_PROFILES": {
          "name": "Student Profile Management",
          "status": "implemented",
          "completion": "75%",
          "components": [
            "StudentProfileController",
            "StudentProfileService",
            "StudentProfileMapper",
            "User integration",
            "Enrollment entity"
          ],
          "description": "Student profile management with user integration and major assignment",
          "implemented": [
            "StudentProfile entity with @MapsId one-to-one relationship with User",
            "Major assignment via major_id field",
            "CRUD operations for student profiles",
            "Automatic STUDENT role assignment on creation",
            "Password generation and email delivery",
            "Enrollment entity with composite key for student-class associations",
            "Soft delete support via is_active flag in Enrollment"
          ],
          "missing": "Enrollment management API (repository, service, controller), class roster operations, bulk enrollment import/export"
        },
        "BE_FEAT_ATTENDANCE": {
          "name": "Attendance System",
          "status": "partially implemented",
          "completion": "35%",
          "components": [
            "AttendanceRecord entity",
            "AttendanceRemark entity",
            "AttendanceStatus enum",
            "AttendanceMethod enum"
          ],
          "description": "Core attendance tracking and management system",
          "implemented": [
            "AttendanceRecord entity with status, method, and history tracking",
            "AttendanceRemark entity for staff notes on attendance",
            "AttendanceStatus enum (NOT_YET, PRESENT, ABSENT, ABSENT_AFTER_PRESENT)",
            "AttendanceMethod enum (AUTO, MANUAL, SYSTEM_FINALIZE)",
            "Unique constraint on (student_user_id, slot_id)",
            "One-to-many relationship with Slot",
            "History field for tracking status changes (JSON format)"
          ],
          "missing": "Repositories, services, controllers, slot session management, real-time attendance updates, finalization workflows, integration with face recognition service"
        },
        "BE_FEAT_SLOT_INTERACTION": {
          "name": "Slot Communication System",
          "status": "partially implemented",
          "completion": "30%",
          "components": [
            "SlotAnnouncement entity",
            "PreSlotMessage entity"
          ],
          "description": "Slot announcements and pre-slot messaging system",
          "implemented": [
            "SlotAnnouncement entity with title, content, and creator tracking",
            "PreSlotMessage entity with content, URL, and acknowledgment tracking",
            "Relationships with Slot and User entities",
            "acknowledgedAt field to track when lecturer viewed messages"
          ],
          "missing": "Repositories, services, controllers, real-time messaging, notification integration, file attachment support"
        },
        "BE_FEAT_NOTIFICATIONS": {
          "name": "Notification System",
          "status": "partially implemented",
          "completion": "40%",
          "components": [
            "EmailService",
            "SystemNotification entity",
            "NotificationDelivery entity",
            "NotificationType enum"
          ],
          "description": "Email and in-app notification system with delivery tracking",
          "implemented": [
            "EmailService with async email sending",
            "Password reset email notifications",
            "New user password delivery emails",
            "Gmail SMTP integration",
            "SystemNotification entity for notification templates",
            "NotificationDelivery entity for per-user delivery tracking",
            "NotificationType enum (IDENTITY_REJECTED, IDENTITY_APPROVED, SLOT_CANCELLED, ABSENCE_WARNING_10, ABSENCE_WARNING_20, ABSENCE_WARNING_MAX, EXAM_INELIGIBLE)",
            "read_at tracking in NotificationDelivery"
          ],
          "missing": "Repositories, services, controllers for in-app notifications, push notification integration, email template system (currently hardcoded), notification creation workflows"
        },
        "BE_FEAT_REPORTING": {
          "name": "Reporting & Analytics",
          "status": "not implemented",
          "completion": "0%",
          "components": [],
          "description": "Attendance reports and analytics",
          "missing": "Report generation, data export, attendance analytics"
        },
        "BE_FEAT_SYSTEM_ADMIN": {
          "name": "System Administration",
          "status": "partially implemented",
          "completion": "30%",
          "components": [
            "SystemConfiguration entity",
            "OperationalAuditLog entity"
          ],
          "description": "System configuration and audit logging",
          "implemented": [
            "SystemConfiguration entity with key-value storage",
            "OperationalAuditLog entity for tracking business operations",
            "Unique constraint on configuration keys",
            "Actor user tracking in audit logs",
            "changes field for storing JSON modifications"
          ],
          "missing": "Repositories, services, controllers, configuration management UI, audit log query APIs, system monitoring APIs, automatic audit logging interceptors"
        }
      },
      "summary": {
        "total_features": 13,
        "implemented": 5,
        "partially_implemented": 7,
        "not_implemented": 1,
        "average_completion": "59%",
        "completion_by_status": {
          "implemented": [
            "BE_FEAT_AUTH (90%)",
            "BE_FEAT_INFRASTRUCTURE (85%)",
            "BE_FEAT_ACADEMIC_CATALOG (85%)",
            "BE_FEAT_ROLE_PERMISSION (80%)",
            "BE_FEAT_STUDENT_PROFILES (75%)"
          ],
          "partially_implemented": [
            "BE_FEAT_AUTHZ (70%)",
            "BE_FEAT_USER_MGMT (60%)",
            "BE_FEAT_IDENTITY_MGMT (50%)",
            "BE_FEAT_NOTIFICATIONS (40%)",
            "BE_FEAT_ATTENDANCE (35%)",
            "BE_FEAT_SLOT_INTERACTION (30%)",
            "BE_FEAT_SYSTEM_ADMIN (30%)"
          ],
          "not_implemented": [
            "BE_FEAT_REPORTING (0%)"
          ]
        }
      },
      "priority_order": {
        "high_priority": [
          {
            "feature": "BE_FEAT_ATTENDANCE",
            "reason": "Core feature - entities implemented, need repositories/services/controllers and face recognition integration",
            "next_steps": "Create AttendanceRecordRepository, AttendanceRecordService, AttendanceRecordController, implement finalization workflow"
          },
          {
            "feature": "BE_FEAT_SLOT_INTERACTION",
            "reason": "Entities implemented, need repositories/services/controllers for lecturer-student communication",
            "next_steps": "Create repositories, services, controllers for SlotAnnouncement and PreSlotMessage"
          },
          {
            "feature": "BE_FEAT_NOTIFICATIONS",
            "reason": "Entities implemented, need to complete in-app notification system",
            "next_steps": "Create repositories, services, controllers for SystemNotification and NotificationDelivery, implement notification creation workflows"
          }
        ],
        "medium_priority": [
          {
            "feature": "BE_FEAT_AUTHZ",
            "reason": "Security audit needed - ensure all endpoints have @PreAuthorize annotations"
          },
          {
            "feature": "BE_FEAT_USER_MGMT",
            "reason": "Dedicated UserController needed for comprehensive user management"
          },
          {
            "feature": "BE_FEAT_IDENTITY_MGMT",
            "reason": "File storage implementation needed for face recognition to work"
          },
          {
            "feature": "BE_FEAT_STUDENT_PROFILES",
            "reason": "Enrollment entity implemented, need enrollment management API",
            "next_steps": "Create EnrollmentRepository, EnrollmentService, EnrollmentController for class roster operations"
          },
          {
            "feature": "BE_FEAT_SYSTEM_ADMIN",
            "reason": "Entities implemented, need management APIs",
            "next_steps": "Create repositories, services, controllers for SystemConfiguration and OperationalAuditLog, implement audit logging interceptors"
          }
        ],
        "low_priority": [
          {
            "feature": "BE_FEAT_REPORTING",
            "reason": "Can be added after core attendance features are working"
          },
          {
            "feature": "BE_FEAT_INFRASTRUCTURE",
            "reason": "Core functionality complete, only monitoring features missing"
          },
          {
            "feature": "BE_FEAT_ACADEMIC_CATALOG",
            "reason": "Core functionality complete, only advanced features missing"
          }
        ]
      },
      "testing_and_gaps": {
        "testing_status": {
          "summary": "The committed source currently contains only a single Spring Boot context smoke test. Historical Surefire reports under `target/surefire-reports/` reference broader coverage, but the associated test sources are no longer present in `src/test/java`.",
          "current_test_coverage": {
            "application_context_loading": {
              "status": "implemented",
              "test": "BackendApplicationTests"
            },
            "service_layer_unit_tests": {
              "status": "missing"
            },
            "controller_integration_tests": {
              "status": "missing"
            },
            "repository_tests": {
              "status": "missing"
            },
            "security_tests": {
              "status": "missing"
            }
          },
          "test_files_present": [
            {
              "file": "src/test/java/com/fuacs/backend/BackendApplicationTests.java",
              "description": "Loads the Spring context against a PostgreSQL Testcontainers instance"
            }
          ],
          "historical_evidence": {
            "description": "Surefire reports dated 2025-10-14 list 27 executed tests (Semester service/controller) with zero failures. Those classes (`SemesterServiceTest`, `SemesterControllerIntegrationTest`) are not in the current tree and should be considered missing artifacts."
          },
          "gap_analysis": [
            "Domain-specific service logic (authentication, catalog, identity, staff/student) has no automated coverage",
            "REST controller behaviour (validation, security, pagination) is untested",
            "Repository queries (especially native search/count implementations) lack verification",
            "Security flows (JWT, permissions) have no regression tests"
          ],
          "frameworks_available": {
            "unit": [
              "JUnit 5",
              "Mockito"
            ],
            "integration": [
              "Spring Boot Test",
              "Testcontainers (PostgreSQL)"
            ]
          },
          "test_debt": "High — Reinstate deleted modules or rebuild the suite across services, controllers, repositories, and security",
          "action_items": [
            "Recover or recreate Semester test suites referenced in Surefire history",
            "Establish service-layer unit tests for each domain (using mocks where appropriate)",
            "Add controller integration tests covering validation, permission checks, and pagination contracts",
            "Create repository tests to validate native/JPQL search queries",
            "Implement security-focused tests for JWT authentication/authorization flows"
          ]
        },
        "implementation_gaps": {
          "critical_missing_components": {
            "attendance_management_system": {
              "status": "NOT IMPLEMENTED",
              "missing_components": [
                "AttendanceRecord entity (commented out in Slot.java)",
                "AttendanceSession management",
                "Real-time attendance updates from Python service",
                "Attendance finalization workflows",
                "Manual attendance override functionality"
              ],
              "note": "Core feature for the system - highest priority"
            },
            "slot_interaction_system": {
              "status": "NOT IMPLEMENTED",
              "missing_components": [
                "SlotAnnouncement entity and management",
                "PreSlotMessage entity and handling",
                "Slot-student communication channels",
                "Announcement delivery to students"
              ],
              "note": "Required for lecturer-student communication"
            },
            "notification_system": {
              "status": "PARTIALLY IMPLEMENTED",
              "implemented": [
                "EmailService with basic email sending (password reset, password delivery)",
                "Async email support via @Async",
                "JavaMailSender configured with Gmail SMTP"
              ],
              "missing_components": [
                "SystemNotification entity for in-app notifications",
                "NotificationDelivery tracking mechanism",
                "Push notification integration",
                "Email template system (currently hardcoded messages)",
                "Notification preferences management"
              ],
              "note": "Basic email exists, but comprehensive notification system needed"
            },
            "system_administration": {
              "status": "NOT IMPLEMENTED",
              "missing_components": [
                "SystemConfiguration entity and management API",
                "OperationalAuditLog entity for tracking business actions",
                "System monitoring endpoints",
                "Configuration UI/API for system parameters"
              ],
              "note": "Required for system admin role functionality"
            }
          },
          "technical_debt": {
            "security_coverage": {
              "status": "IMPLEMENTED BUT NEEDS AUDIT",
              "findings": [
                "Controllers have @PreAuthorize annotations (verified in SemesterController, StaffController)",
                "Permission naming follows DOMAIN_ACTION pattern (e.g., SEMESTER_READ, USER_CREATE)",
                "Custom PermissionEvaluatorImpl implemented for granular checks",
                "Method security enabled via @EnableMethodSecurity"
              ],
              "remaining_issues": [
                "Need to audit all 13 controllers to ensure 100% endpoint coverage",
                "Some endpoints may still lack @PreAuthorize annotations",
                "Ownership validation not implemented (e.g., users updating only their own data)",
                "No security tests to verify permission enforcement"
              ],
              "action": "Conduct comprehensive security audit of all controller endpoints"
            },
            "testing_infrastructure": {
              "status": "CRITICAL - ZERO COVERAGE",
              "current_state": [
                "Only 1 smoke test (BackendApplicationTests - context loading)",
                "Test directories exist but empty (controller/, service/)",
                "Testcontainers configured and working (PostgreSQL 15-alpine)",
                "JUnit 5 and Mockito available in dependencies",
                "Spring Boot Test and Spring Security Test available"
              ],
              "impact": "No regression protection, high risk for bugs in production",
              "priority": "IMMEDIATE",
              "historical_note": "Surefire reports reference 27 tests (Semester service/controller) but test files deleted"
            },
            "integration_points": {
              "identity_asset_management": {
                "status": "NOT IMPLEMENTED",
                "missing": [
                  "File upload handling (MultipartFile)",
                  "File storage service (local filesystem or cloud storage)",
                  "Face video and ID card image storage",
                  "Asset retrieval API for verification workflow"
                ],
                "note": "IdentitySubmission entity exists but no file handling infrastructure"
              },
              "camera_monitoring": {
                "status": "NOT IMPLEMENTED",
                "missing": [
                  "Camera status monitoring (online/offline)",
                  "RTSP connection health checks",
                  "Camera feed preview functionality",
                  "Alert system for camera failures"
                ],
                "note": "Camera entity has rtspUrl field but no monitoring service"
              },
              "slot_camera_association": {
                "status": "IMPLEMENTED",
                "implementation": [
                  "Slot entity has @ManyToMany relationship with Camera",
                  "slot_cameras join table configured via @JoinTable",
                  "Bidirectional mapping in Camera entity (mappedBy = 'cameras')",
                  "Set<Camera> cameras field in Slot entity"
                ],
                "note": "CORRECTION: This is fully implemented, not incomplete"
              }
            }
          }
        },
        "recommendations": {
          "immediate_actions": {
            "priority_1_critical": [
              {
                "action": "Implement AttendanceRecord entity and repository",
                "reason": "Core feature blocking attendance functionality",
                "components": [
                  "AttendanceRecord entity",
                  "AttendanceRecordRepository",
                  "AttendanceService",
                  "AttendanceController"
                ],
                "estimated_effort": "2-3 days",
                "dependencies": "Requires Slot entity (already exists)"
              },
              {
                "action": "Create comprehensive test suite",
                "reason": "Zero test coverage is critical risk for production stability",
                "estimated_effort": "1-2 weeks",
                "approach": "Start with service layer unit tests, then controller integration tests, then repository tests",
                "priority_order": [
                  "Service layer (mocked dependencies)",
                  "Controller layer (integration)",
                  "Repository layer (Testcontainers)",
                  "Security tests"
                ]
              },
              {
                "action": "Implement file upload handling for IdentitySubmission",
                "reason": "Identity verification cannot work without asset storage",
                "components": [
                  "FileStorageService",
                  "MultipartFile handling",
                  "File validation",
                  "Storage configuration"
                ],
                "estimated_effort": "2-3 days",
                "technical_decisions": [
                  "Local filesystem vs cloud storage (S3, Azure Blob)",
                  "File naming strategy",
                  "Security considerations"
                ]
              }
            ],
            "priority_2_high": [
              {
                "action": "Implement SlotAnnouncement and PreSlotMessage entities",
                "reason": "Required for slot interaction features per system_context.yaml",
                "components": [
                  "SlotAnnouncement entity/service/controller",
                  "PreSlotMessage entity/service/controller",
                  "Notification integration"
                ],
                "estimated_effort": "3-4 days"
              },
              {
                "action": "Conduct security audit of all endpoints",
                "reason": "Ensure all endpoints have @PreAuthorize annotations",
                "scope": "13 controllers, ~80-100 endpoints",
                "estimated_effort": "1 day",
                "deliverable": "Security audit report with coverage percentage"
              },
              {
                "action": "Implement SystemNotification infrastructure",
                "reason": "Needed for in-app notifications and user alerts",
                "components": [
                  "SystemNotification entity",
                  "NotificationDelivery tracking",
                  "Notification API",
                  "Read/unread status"
                ],
                "estimated_effort": "3-5 days"
              }
            ]
          },
          "medium_term_goals": [
            {
              "action": "Complete identity asset management with file storage",
              "components": [
                "File upload API",
                "Storage service",
                "Asset retrieval",
                "File cleanup jobs"
              ],
              "estimated_effort": "1 week",
              "note": "Choose storage strategy (local vs cloud) early"
            },
            {
              "action": "Implement camera status monitoring",
              "components": [
                "Health check service",
                "Status tracking",
                "Alert system",
                "RTSP connection testing"
              ],
              "estimated_effort": "1 week",
              "integration": "May require Python service coordination"
            },
            {
              "action": "Add comprehensive reporting capabilities",
              "components": [
                "Report generation",
                "Data export (CSV/Excel)",
                "Analytics queries",
                "Report scheduling"
              ],
              "estimated_effort": "2 weeks",
              "note": "Attendance reports are core feature per system_context.yaml"
            },
            {
              "action": "Implement SystemConfiguration management",
              "components": [
                "SystemConfiguration entity",
                "Admin API",
                "Configuration validation",
                "UI integration"
              ],
              "estimated_effort": "1 week",
              "examples": [
                "Max absence percentage",
                "Token expiration times",
                "Email templates"
              ]
            },
            {
              "action": "Implement OperationalAuditLog",
              "components": [
                "AuditLog entity",
                "AOP interceptor for auto-logging",
                "Query API",
                "Audit viewer"
              ],
              "estimated_effort": "1 week",
              "note": "Required for compliance and debugging"
            }
          ],
          "long_term_improvements": [
            {
              "action": "Add performance monitoring and metrics",
              "components": [
                "Spring Boot Actuator",
                "Micrometer",
                "Prometheus integration",
                "Grafana dashboards"
              ],
              "estimated_effort": "1 week",
              "note": "Currently no actuator endpoints configured"
            },
            {
              "action": "Implement caching strategies",
              "components": [
                "Redis integration",
                "@Cacheable annotations",
                "Cache invalidation",
                "Cache warming"
              ],
              "estimated_effort": "1 week",
              "targets": [
                "Permission lookups",
                "User profiles",
                "Academic catalog data"
              ]
            },
            {
              "action": "Add API rate limiting",
              "components": [
                "Resilience4j rate limiter configuration",
                "Per-user limits",
                "Endpoint-specific limits"
              ],
              "estimated_effort": "3-5 days",
              "note": "Resilience4j already in dependencies but not configured (commented in application-dev.yaml)"
            },
            {
              "action": "Enhance email template system",
              "components": [
                "Thymeleaf templates",
                "Template management",
                "Multi-language support",
                "Template variables"
              ],
              "estimated_effort": "1 week",
              "current_state": "EmailService has hardcoded messages"
            }
          ]
        }
      },
      "deployment": {
        "cicd_pipeline": {
          "platform": "GitLab CI/CD",
          "description": "Automated CI/CD pipeline for backend service deployment",
          "configuration_file": ".gitlab-ci.yml",
          "stages": {
            "test": {
              "description": "Run mvn test inside Alpine image with cached Maven repo",
              "image": "alpine:latest",
              "services": [
                "docker:dind"
              ],
              "environment": "Alpine Linux with OpenJDK 21 and Maven",
              "actions": [
                "Install OpenJDK 21 and Maven via apk",
                "Cache Maven repository (.m2/repository) based on pom.xml",
                "Run mvn test"
              ],
              "cache": {
                "key": "pom.xml file hash",
                "paths": [
                  ".m2/repository"
                ]
              },
              "triggers": "Push to main or staging branch"
            },
            "build_and_push": {
              "description": "Build Docker image and push with branch and commit tags",
              "image": "docker:24",
              "actions": [
                "Build Docker image using multi-stage Dockerfile",
                "Tag image with commit short SHA ($CI_COMMIT_SHORT_SHA)",
                "Tag image with branch name ($CI_COMMIT_REF_NAME)",
                "Push both tags to container registry"
              ],
              "registry": "localhost:5000 (local registry)",
              "image_naming": "$REGISTRY_URL/$CI_PROJECT_PATH:$TAG",
              "triggers": "Push to main or staging branch"
            },
            "deploy": {
              "description": "SSH to target host, render .env, docker compose pull & restart",
              "image": "alpine:latest",
              "environments": [
                "staging",
                "production"
              ],
              "deployment_template": {
                "description": "Shared deployment script using YAML anchor",
                "ssh_setup": [
                  "Install openssh-client",
                  "Configure SSH private key from $SSH_PRIVATE_KEY variable",
                  "Add target host to known_hosts via ssh-keyscan"
                ],
                "deployment_steps": [
                  "SSH to target host ($SSH_USER@$SSH_HOST:$SSH_PORT)",
                  "Navigate to deployment directory (/home/hieund/app)",
                  "Create environment file from $ENV_FILE_CONTENT variable",
                  "Pull new Docker image: docker compose -f $COMPOSE_FILE pull $CI_PROJECT_NAME",
                  "Restart service: docker compose -f $COMPOSE_FILE up -d --no-deps $CI_PROJECT_NAME"
                ]
              },
              "required_variables": [
                "SSH_PRIVATE_KEY - SSH key for deployment server access",
                "SSH_HOST - Target server hostname/IP",
                "SSH_PORT - SSH port",
                "SSH_USER - SSH username",
                "COMPOSE_FILE - Docker compose file name (environment-specific)",
                "ENV_FILE_NAME - Environment file name (environment-specific)",
                "ENV_FILE_CONTENT - Environment variables content"
              ]
            }
          },
          "deployment_environments": {
            "staging": {
              "job_name": "deploy_staging",
              "trigger": "Push to staging branch",
              "compose_file": "docker-compose.staging.yml",
              "env_file": ".env.staging.backend",
              "environment_variables": [
                "PROFILE - Spring profile (staging)",
                "SPRING_DATASOURCE_URL - Database JDBC URL",
                "SPRING_DATASOURCE_USERNAME - Database username",
                "SPRING_DATASOURCE_PASSWORD - Database password",
                "JWT_SECRET - JWT signing secret"
              ],
              "verification": "Docker compose health checks"
            },
            "production": {
              "job_name": "deploy_production",
              "trigger": "Push to main branch",
              "compose_file": "docker-compose.prod.yml",
              "env_file": ".env.production.backend",
              "environment_variables": [
                "PROFILE - Spring profile (production)",
                "SPRING_DATASOURCE_URL - Database JDBC URL",
                "SPRING_DATASOURCE_USERNAME - Database username",
                "SPRING_DATASOURCE_PASSWORD - Database password",
                "JWT_SECRET - JWT signing secret"
              ],
              "verification": "Docker compose health checks",
              "note": "No manual approval gate currently configured"
            }
          }
        },
        "containerization": {
          "dockerfile_structure": {
            "builder_stage": {
              "base_image": "maven:3.9-eclipse-temurin-21",
              "purpose": "Build application JAR",
              "actions": [
                "Copy pom.xml and source code",
                "Run mvn clean package",
                "Generate application JAR"
              ]
            },
            "runtime_stage": {
              "base_image": "eclipse-temurin:21-jre-alpine",
              "purpose": "Run application",
              "actions": [
                "Copy JAR from builder stage",
                "Set up non-root user",
                "Configure entrypoint"
              ]
            }
          },
          "entrypoint": "java -jar app.jar",
          "exposed_port": 8080,
          "environment_variables": {
            "description": "Application configuration via environment variables and Spring profiles",
            "required": {
              "database": [
                "SPRING_DATASOURCE_URL - PostgreSQL JDBC connection string",
                "SPRING_DATASOURCE_USERNAME - Database username",
                "SPRING_DATASOURCE_PASSWORD - Database password"
              ],
              "security": [
                "TOKEN_SIGN_KEY - JWT signing secret key (HS256)",
                "GOOGLE_CLIENT_ID - Google OAuth client ID",
                "GOOGLE_CLIENT_SECRET - Google OAuth client secret"
              ],
              "email": [
                "MAIL - Gmail address for sending emails",
                "MAIL_APP_PASSWORD - Gmail app password (2FA)"
              ]
            },
            "optional": [
              "PROFILE - Spring profile (dev/staging/prod), default: dev",
              "PORT - Server port, default: 8080"
            ],
            "configuration_sources": [
              ".env file (local development)",
              ".env.example (template with placeholders)",
              "GitLab CI/CD variables (staging/production)",
              "Environment-specific application-{profile}.yaml files"
            ]
          }
        },
        "deployment_configuration": {
          "docker_compose": {
            "description": "Docker Compose orchestration on deployment server",
            "location": "/home/hieund/app on deployment server",
            "files": [
              "docker-compose.staging.yml - Staging environment",
              "docker-compose.prod.yml - Production environment"
            ],
            "services": [
              "backend - Spring Boot application",
              "postgresql - Database (likely)",
              "Other services as needed"
            ],
            "note": "Docker compose files are managed on deployment server, not in repository"
          },
          "spring_profiles": {
            "dev": {
              "description": "Local development profile",
              "database": "jdbc:postgresql://localhost:5432/fuacs_dev",
              "jpa_ddl": "none (manual schema management)",
              "jpa_show_sql": true,
              "mail_config": "Gmail SMTP with app password"
            },
            "staging": {
              "description": "Staging environment profile",
              "jpa_ddl": "update (auto-update schema)",
              "configuration": "Overrides from .env.staging.backend"
            },
            "prod": {
              "description": "Production environment profile",
              "jpa_ddl": "validate (no schema changes)",
              "configuration": "Overrides from .env.production.backend"
            }
          },
          "health_checks": {
            "status": "NOT IMPLEMENTED",
            "note": "Spring Boot Actuator not configured in pom.xml or application.yaml",
            "recommendation": "Add spring-boot-starter-actuator dependency and configure /actuator/health endpoint"
          },
          "resource_limits": {
            "status": "NOT CONFIGURED",
            "note": "No resource limits defined in available configuration files",
            "recommendation": "Configure in docker-compose files on deployment server"
          },
          "scaling": {
            "status": "NOT CONFIGURED",
            "current": "Single instance deployment",
            "note": "No auto-scaling configuration found"
          }
        },
        "monitoring_and_logging": {
          "status": "MINIMAL CONFIGURATION",
          "application_logs": {
            "level": "Default Spring Boot logging (INFO for application, varies by package)",
            "format": "Standard Spring Boot console output (not JSON)",
            "configuration": "No custom logging configuration in application.yaml",
            "dev_profile": "SQL logging enabled (show-sql: true)",
            "recommendation": "Configure logback-spring.xml for structured logging and log levels"
          },
          "metrics": {
            "status": "NOT CONFIGURED",
            "note": "Spring Boot Actuator not enabled",
            "recommendation": "Add actuator dependency and configure metrics endpoints",
            "potential_metrics": [
              "Application performance metrics",
              "Database connection pool metrics (HikariCP)",
              "HTTP request/response metrics",
              "JVM metrics (memory, GC, threads)"
            ]
          },
          "alerts": {
            "status": "NOT CONFIGURED",
            "note": "No alerting system configured",
            "recommendation": "Integrate with monitoring solution (Prometheus, Grafana, etc.)"
          },
          "observability_gaps": [
            "No structured logging (JSON format)",
            "No metrics collection",
            "No distributed tracing",
            "No health check endpoints",
            "No alerting rules"
          ],
          "future_improvements": [
            "Add spring-boot-starter-actuator for health checks and metrics",
            "Configure Micrometer for metrics export",
            "Implement structured logging with Logback",
            "Set up centralized logging (ELK stack or similar)",
            "Configure alerting rules for critical errors"
          ]
        }
      }
    },
    "frontend": {
      "tech_stack_and_architecture": {
        "project_info": {
          "project_name": "frontend-web",
          "last_updated": "2025-10-07T13:45:00Z",
          "description": "FUACS - Frontend Web Application Implementation Manifest",
          "platforms": [
            "web_lecturer",
            "web_admin_portal"
          ]
        },
        "technology_stack": {
          "framework": {
            "name": "Next.js",
            "version": "15.5.4"
          },
          "ui_framework": {
            "name": "React",
            "version": "19.1.0"
          },
          "styling": {
            "primary": "Tailwind CSS",
            "ui_library": "shadcn/ui",
            "icon_library": "Lucide React",
            "theme_system": "next-themes",
            "utility_classes": [
              "clsx",
              "tailwind-merge"
            ]
          },
          "state_management": {
            "server_state": "@tanstack/react-query",
            "client_state": "zustand",
            "form_validation": "zod",
            "form_handling": "react-hook-form"
          },
          "http_client": {
            "library": "axios"
          },
          "authentication_libraries": {
            "oauth": "@react-oauth/google",
            "notes": "Google Identity Services used via @react-oauth/google with client ID sourced from NEXT_PUBLIC_GOOGLE_CLIENT_ID"
          },
          "ui_component_libraries": {
            "notifications": "sonner"
          },
          "type_system": {
            "language": "TypeScript",
            "validation": "zod"
          }
        },
        "architecture_patterns": {
          "data_flow_architecture": {
            "description": "Three-layer data flow with type-safe validation at the boundaries",
            "layers": {
              "data_contract_layer": {
                "files": [
                  "lib/zod-schemas.ts"
                ],
                "responsibility": "Defines data contracts and validation rules using Zod schemas"
              },
              "type_definition_layer": {
                "files": [
                  "types/index.ts"
                ],
                "responsibility": "Derives static TypeScript types from Zod schemas for full type safety"
              },
              "transport_layer": {
                "files": [
                  "lib/api-axios.ts",
                  "lib/auth.ts"
                ],
                "responsibility": "Handles API communication, authentication, and error handling"
              }
            }
          },
          "component_architecture": {
            "description": "Provider-based architecture for wrapping the application with global context",
            "providers": {
              "AppProviders": {
                "file": "components/providers/app-providers.tsx",
                "responsibility": "Root provider that composes GoogleOAuthProvider (when client ID is set), ThemeProvider, and QueryProvider"
              },
              "ThemeProvider": {
                "file": "components/providers/theme-provider.tsx",
                "responsibility": "Manages theme (light/dark/system)"
              },
              "QueryProvider": {
                "file": "components/providers/query-provider.tsx",
                "responsibility": "Configures React Query client and devtools"
              }
            }
          }
        }
      },
      "data_models_and_api": {
        "implemented_entities": {
          "Semester": {
            "db_table": "semesters",
            "related_business_rules": [
              "BR-12"
            ],
            "related_files": {
              "schema_definition": "lib/zod-schemas.ts",
              "type_definitions": "types/index.ts",
              "api_endpoints": "lib/constants.ts",
              "query_keys": "lib/constants.ts",
              "react_query_hooks": "hooks/api/useSemesters.ts",
              "ui_components": [
                "app/admin/semesters/page.tsx",
                "components/semesters/"
              ]
            },
            "operations": [
              "CRUD",
              "Pagination",
              "Search",
              "Sort",
              "Validation"
            ],
            "api_specification": {
              "endpoint": "/api/semesters",
              "pagination_params": [
                "page",
                "pageSize",
                "sort",
                "sortBy",
                "search"
              ],
              "response_format": "PaginatedSemesterResponse"
            }
          }
        },
        "api_integration": {
          "authentication_configuration": {
            "method": "JWT Bearer Token",
            "storage": "localStorage",
            "auto_redirect_on_401": "conditional",
            "redirect_target": "/login",
            "providers": [
              "Username/password form",
              "Google Identity Services (OAuth)"
            ],
            "keys": {
              "access": "fuacs-auth-token",
              "refresh": "fuacs-refresh-token",
              "user": "fuacs-auth-user"
            },
            "auto_redirect_notes": "401 responses from authenticated API calls clear the session and route to /login; login failures keep the user on the form; Google login exchanges the Google ID token for FUACS JWT and mirrors inactive/not-found error handling"
          },
          "caching_strategy": {
            "library": "@tanstack/react-query",
            "stale_time": "5 minutes",
            "cache_invalidation": "Automatic on mutations via queryClient.invalidateQueries"
          }
        },
        "data_flow_implementation": {
          "validation_layer": {
            "file": "lib/zod-schemas.ts",
            "purpose": "Defines Zod schemas for runtime validation",
            "entities": [
              "Semester",
              "GoogleLoginPayload",
              "LoginRequest",
              "AuthResponse"
            ]
          },
          "type_layer": {
            "file": "types/index.ts",
            "purpose": "TypeScript types derived from Zod schemas",
            "type_safety": "Full compile-time type checking"
          },
          "transport_layer": {
            "api_client": {
              "file": "lib/api-axios.ts",
              "features": [
                "JWT authentication interceptors",
                "Conditional redirect on 401",
                "Error handling"
              ]
            },
            "auth_utilities": {
              "file": "lib/auth.ts",
              "features": [
                "Token management",
                "Access/refresh/user cache",
                "Session clearing"
              ]
            },
            "constants": {
              "file": "lib/constants.ts",
              "features": [
                "API endpoints",
                "Query keys",
                "Authentication constants"
              ]
            }
          }
        },
        "api_hooks": {
          "authentication": {
            "file": "hooks/api/useAuth.ts",
            "hooks": [
              "useLogin",
              "useGoogleLogin",
              "useRefreshToken",
              "useLogout"
            ],
            "features": [
              "React Query mutations",
              "Error handling alignment",
              "Toast feedback"
            ]
          },
          "semester_management": {
            "file": "hooks/api/useSemesters.ts",
            "hooks": [
              "useGetSemesters",
              "useCreateSemester",
              "useUpdateSemester",
              "useDeleteSemester"
            ],
            "features": [
              "CRUD operations with pagination/search/sort",
              "Centralized error handling with API message extraction",
              "Toast notifications on success/error",
              "Automatic cache invalidation",
              "Type-safe payloads with Zod validation"
            ]
          }
        },
        "error_handling": {
          "strategy": "Centralized error handling with user-friendly messages",
          "implementation": [
            "API interceptors catch 401 and redirect to login",
            "React Query error boundaries for component-level errors",
            "Toast notifications for user feedback",
            "Zod validation errors displayed in forms",
            "API hooks extract response.data.message for specific errors"
          ],
          "toast_patterns": {
            "location": "API hooks (onSuccess/onError callbacks)",
            "success_examples": [
              "Entity created successfully!",
              "Entity updated successfully!"
            ],
            "error_handling": [
              "Extract: error.response?.data?.message || fallback",
              "Status codes: 409 (conflict), 400 (validation), 404 (not found)",
              "Provide actionable guidance in error messages"
            ]
          }
        }
      },
      "ui_components": {
        "base_components": {
          "Button": {
            "file": "components/ui/button.tsx",
            "purpose": "Primary action button primitive",
            "variants": [
              "default",
              "destructive",
              "outline",
              "secondary",
              "ghost",
              "link"
            ],
            "sizes": [
              "default",
              "sm",
              "lg",
              "icon"
            ]
          },
          "DropdownMenu": {
            "file": "components/ui/dropdown-menu.tsx",
            "purpose": "Menu trigger for theme toggle",
            "components": [
              "DropdownMenuTrigger",
              "DropdownMenuContent",
              "DropdownMenuItem"
            ]
          },
          "Input": {
            "file": "components/ui/input.tsx",
            "purpose": "Text input field used across forms",
            "features": [
              "Controlled/uncontrolled",
              "Error states",
              "Accessibility"
            ]
          },
          "Form": {
            "file": "components/ui/form.tsx",
            "purpose": "React Hook Form bindings and field primitives",
            "components": [
              "Form",
              "FormField",
              "FormItem",
              "FormLabel",
              "FormControl",
              "FormMessage"
            ]
          },
          "Label": {
            "file": "components/ui/label.tsx",
            "purpose": "Accessible form labels",
            "features": [
              "Proper ARIA associations"
            ]
          },
          "Card": {
            "file": "components/ui/card.tsx",
            "purpose": "Container for auth layouts",
            "components": [
              "Card",
              "CardHeader",
              "CardTitle",
              "CardDescription",
              "CardContent",
              "CardFooter"
            ]
          },
          "Separator": {
            "file": "components/ui/separator.tsx",
            "purpose": "Divider used in auth forms",
            "orientations": [
              "horizontal",
              "vertical"
            ]
          },
          "Sonner": {
            "file": "components/ui/sonner.tsx",
            "purpose": "Toast notifications",
            "features": [
              "Success",
              "Error",
              "Info",
              "Warning toasts"
            ]
          },
          "AlertDialog": {
            "file": "components/ui/alert-dialog.tsx",
            "purpose": "Destructive confirmations",
            "use_cases": [
              "Delete confirmations",
              "Irreversible actions"
            ]
          },
          "Calendar": {
            "file": "components/ui/calendar.tsx",
            "purpose": "Date picker calendar",
            "library": "react-day-picker v9"
          },
          "Dialog": {
            "file": "components/ui/dialog.tsx",
            "purpose": "Modal dialog container",
            "features": [
              "Backdrop",
              "Close button",
              "Focus trap"
            ]
          },
          "Pagination": {
            "file": "components/ui/pagination.tsx",
            "purpose": "Pagination navigation primitives"
          },
          "Popover": {
            "file": "components/ui/popover.tsx",
            "purpose": "Floating content container"
          },
          "Select": {
            "file": "components/ui/select.tsx",
            "purpose": "Dropdown select input",
            "features": [
              "Keyboard navigation",
              "Groups"
            ]
          },
          "Switch": {
            "file": "components/ui/switch.tsx",
            "purpose": "Toggle switch input"
          },
          "Table": {
            "file": "components/ui/table.tsx",
            "purpose": "Table structure components"
          }
        },
        "custom_components": {
          "ModeToggle": {
            "file": "components/mode-toggle.tsx",
            "dependencies": [
              "Button",
              "DropdownMenu"
            ],
            "purpose": "Theme switching (light/dark/system)",
            "features": [
              "System theme detection",
              "Persistent theme selection"
            ]
          },
          "LoginForm": {
            "file": "components/auth/login-form.tsx",
            "dependencies": [
              "useLogin hook",
              "Form",
              "Input",
              "Button",
              "Separator",
              "Label"
            ],
            "purpose": "Username/password form with validation and Google CTA",
            "features": [
              "Form validation with Zod",
              "Google Sign-In integration",
              "Error handling and toast feedback",
              "Loading states",
              "Responsive design"
            ]
          },
          "SemesterTable": {
            "file": "components/semesters/semester-table.tsx",
            "dependencies": [
              "Table",
              "TanStack React Table"
            ],
            "purpose": "Data table for semesters with fixed 10-row height",
            "features": [
              "Empty row padding when < 10 items",
              "Conditional pagination display",
              "Pagination info (Showing X - Y of Z)"
            ]
          },
          "SemesterFormDialog": {
            "file": "components/semesters/semester-form-dialog.tsx",
            "dependencies": [
              "Dialog",
              "Form",
              "Calendar",
              "Switch"
            ],
            "purpose": "Create/Edit semester with dual-mode validation",
            "features": [
              "Code field immutable in edit mode",
              "isActive switch only in edit mode",
              "Conditional date validation"
            ]
          },
          "SemesterPagination": {
            "file": "components/semesters/semester-pagination.tsx",
            "purpose": "Custom pagination with smart ellipsis",
            "features": [
              "Dynamic ellipsis (1 ... 5 6 7 ... 20)",
              "Show all if <= 7 pages"
            ]
          },
          "DeleteSemesterDialog": {
            "file": "components/semesters/delete-semester-dialog.tsx",
            "dependencies": [
              "AlertDialog"
            ],
            "purpose": "Delete confirmation with dependency warning"
          }
        },
        "component_patterns": {
          "form_components": {
            "pattern": "React Hook Form + Zod validation",
            "structure": [
              "Define Zod schema in lib/zod-schemas.ts",
              "Use useForm with zodResolver",
              "Wrap fields with FormField components",
              "Handle submission with React Query mutations"
            ]
          },
          "layout_components": {
            "pattern": "Card-based layouts for auth screens",
            "structure": [
              "Card container for visual grouping",
              "CardHeader for titles and descriptions",
              "CardContent for form content",
              "Responsive spacing and typography"
            ]
          },
          "table_components": {
            "pattern": "TanStack React Table + fixed height + custom pagination",
            "structure": [
              "Column definitions via factory function",
              "Fixed 10-row height with empty row padding",
              "Custom pagination with smart ellipsis",
              "Hide pagination when totalItems <= pageSize"
            ]
          },
          "crud_dialog_pattern": {
            "pattern": "Dual-mode dialog with conditional validation",
            "structure": [
              "Single component for create/edit",
              "Different schemas per mode",
              "Conditional field visibility",
              "Immutable fields disabled in edit"
            ]
          },
          "search_and_sort_pattern": {
            "pattern": "Debounced search + instant sort dropdowns",
            "implementation": [
              "useDebounce(searchQuery, 500ms)",
              "Separate Select for sortBy and sortOrder",
              "No debounce on sort (instant response)"
            ]
          },
          "provider_components": {
            "pattern": "Composition of context providers",
            "structure": [
              "AppProviders as root composition",
              "Individual providers for specific concerns",
              "Conditional provider wrapping based on environment"
            ]
          }
        },
        "styling_system": {
          "approach": "Utility-first with component variants",
          "tools": [
            "Tailwind CSS for utility classes",
            "class-variance-authority for component variants",
            "clsx and tailwind-merge for conditional classes"
          ],
          "theme_system": {
            "provider": "next-themes",
            "modes": [
              "light",
              "dark",
              "system"
            ],
            "css_variables": "CSS custom properties for theme colors"
          },
          "responsive_design": {
            "breakpoints": "Tailwind default breakpoints",
            "approach": "Mobile-first responsive design"
          }
        },
        "accessibility": {
          "standards": "WCAG 2.1 AA compliance",
          "implementations": [
            "Proper ARIA labels and associations",
            "Keyboard navigation support",
            "Focus management",
            "Screen reader compatibility",
            "Color contrast compliance"
          ]
        },
        "component_organization": {
          "ui_components": "components/ui/ - Base shadcn/ui components",
          "custom_components": "components/ - Feature-specific components",
          "providers": "components/providers/ - Context providers",
          "auth_components": "components/auth/ - Authentication-related components",
          "semester_components": "components/semesters/ - Semester management components"
        }
      },
      "feature_status": {
        "FEAT_UI_INFRASTRUCTURE": {
          "name": "UI Infrastructure and Theming",
          "status": "implemented",
          "completion": "100%",
          "overall_status": "implemented",
          "data_layer_status": "implemented",
          "ui_layer_status": "implemented",
          "use_case_ids": [],
          "related_files": [
            "app/layout.tsx: Root layout with providers",
            "components/providers/app-providers.tsx: Root provider composition",
            "components/providers/theme-provider.tsx: Theme provider",
            "components/providers/query-provider.tsx: React Query provider",
            "components/mode-toggle.tsx: Theme switching component",
            "lib/utils.ts: Styling utility (cn function)"
          ],
          "ai_notes": "The core infrastructure for UI rendering, theming, and state management is fully operational."
        },
        "FEAT_USER_AUTHENTICATION": {
          "name": "User Authentication System",
          "status": "implemented",
          "completion": "100%",
          "overall_status": "implemented",
          "data_layer_status": "implemented",
          "ui_layer_status": "implemented",
          "use_case_ids": [
            "UC-01",
            "UC-02",
            "UC-04",
            "UC-05",
            "UC-06"
          ],
          "related_files": [
            "lib/api-axios.ts: JWT authentication interceptors with conditional redirect",
            "lib/auth.ts: Token management utilities (access, refresh, user cache)",
            "lib/constants.ts: Authentication constants and API endpoints",
            "hooks/api/useAuth.ts: React Query mutations for login/refresh/logout/Google login with aligned error handling",
            "components/auth/login-form.tsx: Login form UI, validation, and Google Identity button integration",
            "app/login/page.tsx: Login screen layout",
            "app/forgot-password/page.tsx: Forgot password placeholder screen",
            "components/providers/app-providers.tsx: Wraps GoogleOAuthProvider, ThemeProvider, and QueryProvider",
            "lib/zod-schemas.ts: Defines Google login payload schema"
          ],
          "ai_notes": "Login UI now supports both username/password and Google Identity Services; Google login shares the same toast-based feedback for inactive or missing accounts. Password reset flow remains a placeholder."
        },
        "FEAT_SEMESTER_MANAGEMENT": {
          "name": "Semester Management",
          "status": "implemented",
          "completion": "100%",
          "overall_status": "implemented",
          "data_layer_status": "implemented",
          "ui_layer_status": "implemented",
          "use_case_ids": [
            "UC-48",
            "UC-49",
            "UC-50",
            "UC-51"
          ],
          "related_files": {
            "data_layer": [
              "hooks/api/useSemesters.ts: React Query hooks with centralized error handling",
              "lib/zod-schemas.ts: Semester schemas with pagination support",
              "types/index.ts: Semester types and PaginatedSemesterResponse",
              "lib/constants.ts: API endpoints and query keys"
            ],
            "ui_layer": [
              "app/admin/semesters/page.tsx: Main screen with search, sort, pagination",
              "components/semesters/semester-table.tsx: Table with fixed 10-row height",
              "components/semesters/semester-columns.tsx: Column definitions",
              "components/semesters/semester-form-dialog.tsx: Create/Edit dialog",
              "components/semesters/semester-pagination.tsx: Pagination with smart ellipsis",
              "components/semesters/delete-semester-dialog.tsx: Delete confirmation"
            ],
            "utilities": [
              "hooks/useDebounce.ts: Debounce hook (500ms for search)"
            ]
          },
          "features": [
            "Server-side pagination with smart ellipsis (hidden when <= 10 items)",
            "Debounced search (500ms) by name or code",
            "Instant sort dropdowns (Sort By + Sort Order)",
            "CRUD with validation (create: future dates, edit: relaxed dates)",
            "Centralized error handling in hooks with API message extraction",
            "Toast notifications for all operations",
            "Fixed 10-row table height with empty row padding",
            "Date picker with conditional disabled dates"
          ],
          "architectural_decisions": [
            "No skeleton loading (user preference - fast API responses)",
            "Error handling in hooks, not page components (reusability)",
            "Two separate sort dropdowns instead of sortable headers (clearer UX)",
            "Auto-navigate to previous page when last item deleted"
          ],
          "ai_notes": "Complete CRUD implementation with server-side pagination, debounced search, instant sort, smart ellipsis pagination, centralized error handling, and comprehensive validation. Patterns established here are reusable for other admin CRUD screens."
        },
        "summary": {
          "total_features": 3,
          "implemented": 3,
          "in_progress": 0,
          "planned": 0,
          "average_completion": "100%",
          "next_priorities": [
            "Implement additional academic catalog features (rooms, majors, subjects)",
            "Add user management features",
            "Implement attendance management features",
            "Build admin dashboard"
          ]
        },
        "implementation_notes": {
          "data_layer_pattern": "All features follow the same pattern: Zod schemas → TypeScript types → React Query hooks",
          "ui_layer_pattern": "shadcn/ui base components → custom feature components → page layouts",
          "validation_strategy": "Client-side validation with Zod schemas, server-side validation handled by backend",
          "error_handling": "Centralized error handling with toast notifications and form field errors"
        }
      },
      "screen_status": {
        "SCR_HOME_PAGE": {
          "name": "Home Page",
          "platform": "web_lecturer",
          "sot_reference": null,
          "main_route": "/",
          "main_component": "app/page.tsx",
          "status": "implemented",
          "completion": "100%",
          "dependencies": {
            "features": [
              "FEAT-UI-INFRASTRUCTURE"
            ],
            "components": [
              "ModeToggle"
            ],
            "hooks": []
          },
          "ai_notes": "A basic home page demonstrating the theme switching functionality. Serves as the root entry point."
        },
        "SCR_LOGIN": {
          "name": "Login Screen",
          "platform": "web_lecturer",
          "sot_reference": "UC-01",
          "main_route": "/login",
          "main_component": "app/login/page.tsx",
          "status": "implemented",
          "completion": "100%",
          "dependencies": {
            "features": [
              "FEAT-USER-AUTHENTICATION"
            ],
            "components": [
              "LoginForm",
              "Button",
              "Input",
              "Form",
              "Separator"
            ],
            "hooks": [
              "useLogin"
            ]
          },
          "features": [
            "Username/password login form",
            "Form validation with Zod",
            "Google Sign-In integration",
            "Toast notifications for feedback",
            "Loading states during authentication",
            "Responsive design"
          ],
          "ai_notes": "Provides username/password login with toast feedback and a functioning Google Sign-In button backed by useGoogleLogin."
        },
        "SCR_FORGOT_PASSWORD": {
          "name": "Forgot Password Screen",
          "platform": "web_lecturer",
          "sot_reference": "UC-04",
          "main_route": "/forgot-password",
          "main_component": "app/forgot-password/page.tsx",
          "status": "placeholder",
          "completion": "25%",
          "dependencies": {
            "features": [
              "FEAT-USER-AUTHENTICATION"
            ],
            "components": [
              "Button"
            ],
            "hooks": []
          },
          "features": [
            "Placeholder messaging",
            "Link back to login",
            "Basic layout structure"
          ],
          "missing_features": [
            "Email input form",
            "Backend integration",
            "Email sending functionality",
            "Success/error feedback"
          ],
          "ai_notes": "Placeholder messaging directing users to administrator support until backend flow is available."
        },
        "SCR_ADMIN_SEMESTER_MANAGEMENT": {
          "name": "Admin Semester Management",
          "platform": "web_admin_portal",
          "sot_reference": "UC-48, UC-49, UC-50, UC-51",
          "main_route": "/admin/semesters",
          "main_component": "app/admin/semesters/page.tsx",
          "status": "implemented",
          "completion": "100%",
          "dependencies": {
            "features": [
              "FEAT-SEMESTER-MANAGEMENT"
            ],
            "components": [
              "SemesterTable",
              "SemesterFormDialog",
              "DeleteSemesterDialog"
            ],
            "hooks": [
              "useGetSemesters",
              "useCreateSemester",
              "useUpdateSemester",
              "useDeleteSemester",
              "useDebounce"
            ]
          },
          "features": [
            "Server-side pagination with smart ellipsis",
            "Debounced search (500ms) by name/code",
            "Sort by dropdown (Name, Code, Start/End Date)",
            "Sort order dropdown (Asc/Desc)",
            "Create/Edit with date validation",
            "Delete with confirmation and dependency warning",
            "Fixed 10-row table, toast notifications"
          ],
          "ai_notes": "First complete admin CRUD screen. Patterns established: debounced search, instant sort dropdowns, smart pagination, centralized error handling, fixed table height. Reuse these patterns for other admin screens."
        },
        "screen_summary": {
          "total_screens": 4,
          "implemented": 3,
          "placeholder": 1,
          "planned": 0,
          "platforms": {
            "web_lecturer": 3,
            "web_admin_portal": 1
          },
          "completion_by_platform": {
            "web_lecturer": "75%",
            "web_admin_portal": "10%"
          }
        },
        "planned_screens": {
          "web_lecturer": [
            "Dashboard/Schedule screen",
            "Roster & Attendance screen",
            "Slot Details screen",
            "Reports screen",
            "Class Attendance Report screen"
          ],
          "web_admin_portal": [
            "Admin Dashboard",
            "User Management screens",
            "Academic Catalog CRUD screens",
            "Identity Registration Queue",
            "System Configuration screens",
            "Audit Logs viewer"
          ]
        },
        "screen_patterns": {
          "layout_pattern": "Card-based layouts for auth screens, dashboard layouts for main app",
          "navigation_pattern": "Next.js App Router with file-based routing",
          "state_management": "React Query for server state, local state for UI interactions",
          "form_handling": "React Hook Form + Zod validation pattern",
          "error_handling": "Toast notifications + inline form errors"
        },
        "responsive_design": {
          "approach": "Mobile-first responsive design",
          "breakpoints": "Tailwind CSS default breakpoints",
          "testing": "Manual testing across device sizes"
        }
      },
      "development_guidelines": {
        "ai_development_guidelines": {
          "documentation_maintenance": {
            "rule": "After implementing a new feature, update this manifest file to reflect the new state of the codebase",
            "files_to_update": [
              "04_feature_status.yaml: Update feature completion status",
              "05_screen_status.yaml: Add new screens and update completion",
              "02_data_models_and_api.yaml: Add new entities and API hooks",
              "03_ui_components.yaml: Document new components"
            ]
          },
          "api_integration_workflow": {
            "description": "For new entities, follow this sequence",
            "steps": {
              "1": "Define endpoints in lib/constants.ts",
              "2": "Create schemas in lib/zod-schemas.ts",
              "3": "Generate types in types/index.ts",
              "4": "Create React Query hooks in hooks/api/",
              "5": "Build UI components using the hooks"
            }
          },
          "component_development": {
            "rule": "Build new components by composing existing base components from components/ui/",
            "structure": "Place custom, feature-specific components in a structured manner",
            "patterns": [
              "Use shadcn/ui base components as building blocks",
              "Create feature-specific components in appropriate directories",
              "Follow the provider pattern for global state",
              "Use React Hook Form + Zod for all forms"
            ]
          },
          "crud_screen_workflow": {
            "description": "Standard workflow for admin CRUD screens (based on semester management)",
            "phase_1_data_layer": [
              "Define endpoints in lib/constants.ts",
              "Create Zod schemas (entity, paginated response, create/update payloads)",
              "Generate TypeScript types from schemas",
              "Create React Query hooks with centralized error handling"
            ],
            "phase_2_components": [
              "Create column definitions (factory function pattern)",
              "Build table component (fixed height, custom pagination)",
              "Build form dialog (dual-mode: create/edit)",
              "Create delete confirmation dialog"
            ],
            "phase_3_page": [
              "Setup state (page, search, sort, dialogs)",
              "Wire up hooks with debounced search",
              "Implement layout (search + sort dropdowns + table)",
              "Handle CRUD operations"
            ],
            "key_patterns": {
              "debounced_search": "useDebounce(searchQuery, 500) → reset to page 1",
              "instant_sort": "No debounce on sort dropdowns",
              "error_handling": "Centralized in hooks with toast notifications",
              "pagination": "Smart ellipsis, hide when <= pageSize"
            }
          }
        },
        "coding_standards": {
          "file_organization": {
            "app_directory": "Next.js App Router pages and layouts",
            "components_ui": "Base shadcn/ui components",
            "components_custom": "Feature-specific custom components",
            "components_providers": "Context providers",
            "hooks_api": "React Query hooks for API calls",
            "lib": "Utilities, schemas, constants, and configurations",
            "types": "TypeScript type definitions"
          },
          "naming_conventions": {
            "components": "PascalCase (e.g., LoginForm, ModeToggle)",
            "files": "kebab-case for component files (e.g., login-form.tsx)",
            "hooks": "camelCase starting with 'use' (e.g., useLogin, useSemesters)",
            "types": "PascalCase (e.g., Semester, AuthResponse)",
            "constants": "UPPER_SNAKE_CASE (e.g., API_ENDPOINTS)"
          },
          "type_safety": {
            "validation": "Use Zod schemas for runtime validation",
            "types": "Derive TypeScript types from Zod schemas using z.infer",
            "api_calls": "All API calls must be typed with request/response schemas",
            "forms": "Use zodResolver with React Hook Form for type-safe forms"
          },
          "state_management": {
            "server_state": "Use React Query for all server state management",
            "client_state": "Use Zustand for complex client state, useState for simple local state",
            "form_state": "Use React Hook Form for all form state management",
            "pagination_state": {
              "pattern": "Local useState for page, search, sort",
              "sync_with_api": "Pass as params to React Query hooks"
            },
            "dialog_state": {
              "pattern": "Local useState for visibility + selectedEntity",
              "reset_on_success": "Clear entity and close dialog"
            }
          }
        },
        "testing_guidelines": {
          "current_status": "No tests implemented yet",
          "planned_testing_strategy": {
            "unit_tests": "Jest + React Testing Library for component testing",
            "integration_tests": "Test API hooks with MSW (Mock Service Worker)",
            "e2e_tests": "Playwright for end-to-end testing"
          },
          "testing_priorities": {
            "1": "Authentication flow testing",
            "2": "Form validation testing",
            "3": "API integration testing",
            "4": "Component rendering testing"
          }
        },
        "performance_guidelines": {
          "optimization_strategies": [
            "Use React Query caching for API responses",
            "Implement proper loading states",
            "Use Next.js Image component for optimized images",
            "Implement code splitting for large features",
            "Use React.memo for expensive components"
          ],
          "bundle_optimization": [
            "Tree-shake unused dependencies",
            "Use dynamic imports for large libraries",
            "Optimize Tailwind CSS with purging",
            "Use Next.js built-in optimizations"
          ]
        },
        "accessibility_guidelines": {
          "standards": "Follow WCAG 2.1 AA guidelines",
          "implementation_checklist": [
            "Use semantic HTML elements",
            "Provide proper ARIA labels and descriptions",
            "Ensure keyboard navigation works",
            "Maintain proper color contrast ratios",
            "Test with screen readers",
            "Provide focus indicators"
          ]
        },
        "deployment_guidelines": {
          "build_process": "Next.js static export or server-side rendering",
          "environment_variables": {
            "required": [
              "NEXT_PUBLIC_API_BASE_URL",
              "NEXT_PUBLIC_GOOGLE_CLIENT_ID"
            ],
            "optional": [
              "NEXT_PUBLIC_APP_ENV"
            ]
          },
          "deployment_checklist": [
            "Verify all environment variables are set",
            "Test build process locally",
            "Verify API endpoints are accessible",
            "Test authentication flows",
            "Verify responsive design on multiple devices"
          ]
        }
      }
    },
    "requirements": {
      "metadata": {
        "total_business_rules": 34,
        "domains_covered": [
          "Authentication",
          "Roles",
          "Identity",
          "Academic",
          "Attendance",
          "Communication",
          "System",
          "Audit"
        ],
        "last_updated": "2024-10-16",
        "total_use_cases": 87,
        "roles_covered": [
          "Student",
          "Lecturer",
          "Supervisor",
          "Data_Operator",
          "System_Admin"
        ]
      },
      "business_rules": {
        "authentication": {
          "BR-01": {
            "title": "Primary Login Identifier",
            "description": "The primary login identifier username for a user must be their Student ID (for Students) or Staff ID (for Staff).",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-36"
            ],
            "validation_points": [
              "User creation",
              "Login process"
            ]
          },
          "BR-02": {
            "title": "Google Login Email Lookup",
            "description": "When a user logs in via Google, the system must use the email address provided by Google to look up the corresponding user account.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01"
            ],
            "validation_points": [
              "Google OAuth callback"
            ]
          },
          "BR-03": {
            "title": "Inactive Account Access Denial",
            "description": "If a user account is found but is inactive (is_active = false), access must be denied.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-40"
            ],
            "validation_points": [
              "Login process",
              "Account status check"
            ]
          },
          "BR-04": {
            "title": "Unique Username and Email",
            "description": "Each username and email must be unique across the entire system.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-36"
            ],
            "validation_points": [
              "User creation",
              "User update"
            ]
          },
          "BR-05": {
            "title": "Role Assignment Constraints",
            "description": "A user with the STUDENT role cannot be concurrently assigned the LECTURER or SUPERVISOR role.",
            "domain": "Roles",
            "priority": "High",
            "related_use_cases": [
              "UC-36",
              "UC-39"
            ],
            "validation_points": [
              "Role assignment",
              "Role update"
            ]
          },
          "BR-06": {
            "title": "Password Reset Token Security",
            "description": "A password reset token must be unique, have an expiration time, and must be invalidated immediately after successful use.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-04",
              "UC-05"
            ],
            "validation_points": [
              "Token generation",
              "Token validation",
              "Password reset"
            ]
          },
          "BR-07": {
            "title": "User Profile Requirement",
            "description": "A new user account must be linked to a specialized profile (student_profiles or staff_profiles) to define its specific attributes.",
            "domain": "User Management",
            "priority": "High",
            "related_use_cases": [
              "UC-36"
            ],
            "validation_points": [
              "User creation workflow"
            ]
          }
        },
        "identity_management": {
          "BR-08": {
            "title": "Initial Identity Registration Requirements",
            "description": "A student's initial identity registration request must include a facial video and a national ID card image.",
            "domain": "Identity",
            "priority": "High",
            "related_use_cases": [
              "UC-12"
            ],
            "validation_points": [
              "Identity submission creation"
            ]
          },
          "BR-09": {
            "title": "Manual Identity Approval",
            "description": "All identity registration or update requests must be manually approved by a user with the appropriate permissions (e.g., IDENTITY_SUBMISSION_APPROVE).",
            "domain": "Identity",
            "priority": "High",
            "related_use_cases": [
              "UC-12",
              "UC-13",
              "UC-41",
              "UC-42",
              "UC-43"
            ],
            "validation_points": [
              "Identity submission workflow"
            ]
          },
          "BR-10": {
            "title": "Pending Identity Update Handling",
            "description": "While an identity update request is pending approval, the system must continue to use the previously approved identity data for attendance checking.",
            "domain": "Identity",
            "priority": "Medium",
            "related_use_cases": [
              "UC-13"
            ],
            "validation_points": [
              "Face recognition process",
              "Identity update workflow"
            ]
          },
          "BR-11": {
            "title": "Identity Rejection Notification",
            "description": "When an identity submission is rejected, the system must automatically send a system notification to the student, stating the reason for rejection.",
            "domain": "Identity",
            "priority": "Medium",
            "related_use_cases": [
              "UC-11",
              "UC-43"
            ],
            "validation_points": [
              "Identity rejection workflow"
            ]
          }
        },
        "academic_catalog": {
          "BR-12": {
            "title": "Unique Academic Identifiers",
            "description": "Each Major, Subject, and Class must have a unique identifier (code or name).",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-44",
              "UC-46",
              "UC-48",
              "UC-50",
              "UC-52",
              "UC-54",
              "UC-56",
              "UC-58"
            ],
            "validation_points": [
              "Academic entity creation",
              "Academic entity update"
            ]
          },
          "BR-13": {
            "title": "Single Class Enrollment",
            "description": "A student can only be enrolled in a specific class once.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-64"
            ],
            "validation_points": [
              "Student enrollment"
            ]
          },
          "BR-14": {
            "title": "Enrollment History Preservation",
            "description": "When a student is unenrolled from a class (enrollments.is_active = false), they must not appear in the roster for future slots of that class, but their past attendance history must be preserved.",
            "domain": "Academic",
            "priority": "Medium",
            "related_use_cases": [
              "UC-65"
            ],
            "validation_points": [
              "Student unenrollment",
              "Roster generation",
              "Attendance history queries"
            ]
          },
          "BR-15": {
            "title": "Slot Room Assignment",
            "description": "Each lecture/exam slot must be associated with a specific slot type and room.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-60",
              "UC-62"
            ],
            "validation_points": [
              "Slot creation",
              "Slot update"
            ]
          },
          "BR-16": {
            "title": "Camera Room Validation",
            "description": "When creating or updating a slot, the selected cameras must belong to the list of cameras registered for that slot's assigned room.",
            "domain": "Infrastructure",
            "priority": "High",
            "related_use_cases": [
              "UC-60",
              "UC-62"
            ],
            "validation_points": [
              "Slot camera assignment"
            ]
          },
          "BR-17": {
            "title": "Single Staff Assignment",
            "description": "Each lecture/exam slot must be assigned to one and only one staff member (Lecturer or Supervisor) at a time.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-30",
              "UC-60",
              "UC-62"
            ],
            "validation_points": [
              "Slot creation",
              "Slot update",
              "Staff assignment"
            ]
          }
        },
        "attendance_management": {
          "BR-18": {
            "title": "Attendance Session Authorization",
            "description": "An automated attendance session can only be initiated by the staff member assigned to that slot who has the SLOT_SESSION_START permission.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-30"
            ],
            "validation_points": [
              "Session initiation",
              "Permission check"
            ]
          },
          "BR-19": {
            "title": "Face Recognition Status Update",
            "description": "When a face is recognized, the system updates the student's status based on the latest scan result (e.g., PRESENT for a new arrival, ABSENT_AFTER_PRESENT for a departure). This action is recorded as a new event in the attendance history.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-16",
              "UC-17",
              "UC-31"
            ],
            "validation_points": [
              "Face recognition processing",
              "Status update logic"
            ]
          },
          "BR-20": {
            "title": "Unrecognized Face Handling",
            "description": "If a face is not recognized, the system takes no action, and the student's attendance status remains unchanged during that scan.",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-16"
            ],
            "validation_points": [
              "Face recognition processing"
            ]
          },
          "BR-21": {
            "title": "Finalization Rules Setup",
            "description": "When finalizing a slot, the system must display a 'Finalization Rules Setup' screen. The lecturer must then make a bulk decision for each group of students with an intermediate status (e.g., NOT_YET, ABSENT_AFTER_PRESENT) to convert their final status to either PRESENT or ABSENT.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-34"
            ],
            "validation_points": [
              "Slot finalization workflow"
            ]
          },
          "BR-22": {
            "title": "Same-Day Edit Window",
            "description": "The assigned Lecturer/Supervisor can manually edit the attendance results for a slot until 23:59:59 on the day of the slot.",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-19",
              "UC-32"
            ],
            "validation_points": [
              "Attendance edit authorization",
              "Time-based access control"
            ]
          },
          "BR-23": {
            "title": "Post-Day Edit Restrictions",
            "description": "After 23:59:59 on the day of the slot, only a user with permissions such as ATTENDANCE_STATUS_UPDATE_MANUAL can edit the attendance results, typically a Data Operator.",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-19",
              "UC-32"
            ],
            "validation_points": [
              "Attendance edit authorization",
              "Time-based access control"
            ]
          },
          "BR-24": {
            "title": "Unique Attendance Record",
            "description": "An attendance record for a student in a specific slot must be unique.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-16",
              "UC-30"
            ],
            "validation_points": [
              "Attendance record creation"
            ]
          },
          "BR-25": {
            "title": "Pre-Slot Message Timing",
            "description": "A student can only send a 'Pre-slot Message' to the Lecturer before the slot's official start_time.",
            "domain": "Communication",
            "priority": "Medium",
            "related_use_cases": [
              "UC-09",
              "UC-25"
            ],
            "validation_points": [
              "Message creation",
              "Time validation"
            ]
          },
          "BR-26": {
            "title": "Pre-Slot Message Non-Impact",
            "description": "A 'Pre-slot Message' serves as a reference and must not automatically alter a student's attendance status.",
            "domain": "Communication",
            "priority": "Medium",
            "related_use_cases": [
              "UC-09",
              "UC-25"
            ],
            "validation_points": [
              "Message processing",
              "Attendance status logic"
            ]
          }
        },
        "communication": {
          "BR-27": {
            "title": "Slot Announcement Authorization",
            "description": "Only the assigned Lecturer for a lecture slot (slot_type = LECTURE) can create, edit, or delete a 'Slot Announcement'.",
            "domain": "Communication",
            "priority": "Medium",
            "related_use_cases": [
              "UC-22",
              "UC-23",
              "UC-24"
            ],
            "validation_points": [
              "Announcement management",
              "Authorization check"
            ]
          },
          "BR-28": {
            "title": "Slot Announcement Visibility",
            "description": "A 'Slot Announcement' must be visible to all students enrolled in that slot.",
            "domain": "Communication",
            "priority": "Medium",
            "related_use_cases": [
              "UC-08",
              "UC-11",
              "UC-22",
              "UC-24"
            ],
            "validation_points": [
              "Announcement distribution",
              "Student notification"
            ]
          }
        },
        "system_administration": {
          "BR-29": {
            "title": "System Configuration Permissions",
            "description": "Actions to modify core system configurations and manage role-permission mappings must be protected by distinct permissions (e.g., SYSTEM_CONFIG_UPDATE, ROLE_PERMISSION_MAPPING_UPDATE). By default, these permissions are granted only to the SYSTEM_ADMIN role.",
            "domain": "System",
            "priority": "Critical",
            "related_use_cases": [
              "UC-79",
              "UC-80",
              "UC-81",
              "UC-82",
              "UC-83",
              "UC-86",
              "UC-87"
            ],
            "validation_points": [
              "System configuration access",
              "Role-permission management"
            ]
          },
          "BR-30": {
            "title": "User Management Permissions",
            "description": "User account management (creating, updating, assigning roles, etc.) must be controlled by a granular set of permissions (e.g., USER_CREATE, USER_UPDATE_STATUS, USER_ASSIGN_ROLES). By default, these permissions are granted to the DATA_OPERATOR role.",
            "domain": "User Management",
            "priority": "High",
            "related_use_cases": [
              "UC-36",
              "UC-37",
              "UC-38",
              "UC-39",
              "UC-40"
            ],
            "validation_points": [
              "User management operations",
              "Permission validation"
            ]
          },
          "BR-31": {
            "title": "Audit Trail Requirement",
            "description": "Critical business data changes (e.g., finalizing attendance, updating student information) must be logged in the operational audit trail (operational_audit_logs).",
            "domain": "Audit",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-34",
              "UC-38",
              "UC-39",
              "UC-40",
              "UC-42",
              "UC-43",
              "UC-46",
              "UC-50",
              "UC-54",
              "UC-58",
              "UC-62",
              "UC-63",
              "UC-65",
              "UC-68",
              "UC-69",
              "UC-72",
              "UC-73",
              "UC-78",
              "UC-81",
              "UC-83",
              "UC-87"
            ],
            "validation_points": [
              "All critical data modifications"
            ]
          }
        },
        "attendance_data_integrity": {
          "BR-32": {
            "title": "Attendance History Recording",
            "description": "All attendance status changes for a student within a slot, whether automated by the camera or performed manually, must be recorded as a timestamped event in the history. The event must include the new status and the method of change (Auto, Manual, System Finalize).",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-16",
              "UC-17",
              "UC-18",
              "UC-31"
            ],
            "validation_points": [
              "Status change processing",
              "History recording"
            ]
          },
          "BR-33": {
            "title": "Manual Edit Remark Requirement",
            "description": "Any manual edit of a student's attendance status requires a non-empty remark explaining the reason for the change. The system must prevent saving the change if the remark is empty.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-19",
              "UC-20",
              "UC-32",
              "UC-33"
            ],
            "validation_points": [
              "Manual status update",
              "Remark validation"
            ]
          },
          "BR-34": {
            "title": "Final Status Requirement",
            "description": "After a slot is finalized, the primary status for all attendance records must be either PRESENT or ABSENT.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-34"
            ],
            "validation_points": [
              "Slot finalization",
              "Status validation"
            ]
          },
          "BR-35": {
            "title": "Hard Delete Dependency Check",
            "description": "Any request to permanently delete a resource (e.g., Major, Semester, Room) must be rejected with a user-friendly error message if the resource has dependent child resources (e.g., Subjects, Classes, Cameras).",
            "domain": "Data Integrity",
            "priority": "Critical",
            "related_use_cases": [
              "UC-47",
              "UC-51",
              "UC-55",
              "UC-59",
              "UC-69"
            ],
            "validation_points": [
              "All hard delete operations in the backend services."
            ]
          },
          "BR-36": {
            "title": "Absence Rate Threshold for Exam Ineligibility",
            "description": "A student with an absence rate exceeding the system-configured threshold (e.g., attendance.max_absence_percentage) for all finalized lecture slots (slot_type = 'LECTURE') in a class is deemed ineligible for the final exam. This calculation does not include exam slots (slot_type = 'EXAM').",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-28",
              "UC-83"
            ],
            "validation_points": [
              "Absence rate calculation",
              "Exam eligibility check"
            ]
          },
          "BR-37": {
            "title": "Automated Absence Warning Notifications",
            "description": "The system must automatically send a system notification to a student the first time their absence rate reaches the 10% and 20% thresholds for a class.",
            "domain": "Notification",
            "priority": "Medium",
            "related_use_cases": [
              "UC-11"
            ],
            "validation_points": [
              "Absence rate monitoring",
              "Notification triggering"
            ]
          },
          "BR-38": {
            "title": "Timing of Absence Calculation and Notifications",
            "description": "The calculation of absence rates and the sending of automated notifications must be executed by a daily scheduled job after 23:59:59. This job processes all slots that were finalized on the preceding day.",
            "domain": "System",
            "priority": "High",
            "related_use_cases": [],
            "validation_points": [
              "Scheduled job execution",
              "Daily batch processing"
            ]
          },
          "BR-39": {
            "title": "Class Attendance Report Visibility",
            "description": "The comprehensive attendance summary report for a class (SCR-LECTURER-CLASS-REPORT), including absence rates, must only be visible to lecturers after all slots for that class have been finalized.",
            "domain": "Reporting",
            "priority": "Medium",
            "related_use_cases": [
              "UC-28"
            ],
            "validation_points": [
              "Report access control",
              "Finalization status check"
            ]
          }
        }
      },
      "rule_relationships": {
        "authentication_flow": {
          "primary_rules": [
            "BR-01",
            "BR-02",
            "BR-03",
            "BR-04"
          ],
          "description": "Rules governing user authentication and account validation"
        },
        "identity_workflow": {
          "primary_rules": [
            "BR-08",
            "BR-09",
            "BR-10",
            "BR-11"
          ],
          "description": "Rules for identity registration and approval process"
        },
        "attendance_lifecycle": {
          "primary_rules": [
            "BR-18",
            "BR-19",
            "BR-21",
            "BR-32",
            "BR-33",
            "BR-34"
          ],
          "description": "Rules governing the complete attendance management lifecycle"
        },
        "data_integrity": {
          "primary_rules": [
            "BR-12",
            "BR-13",
            "BR-24",
            "BR-31"
          ],
          "description": "Rules ensuring data consistency and audit trail"
        },
        "permission_control": {
          "primary_rules": [
            "BR-05",
            "BR-29",
            "BR-30"
          ],
          "description": "Rules controlling access and permission management"
        }
      },
      "validation_requirements": {
        "critical_validations": [
          {
            "rule": "BR-01",
            "validation_type": "Format validation",
            "implementation": "Username format check against Student/Staff ID pattern"
          },
          {
            "rule": "BR-05",
            "validation_type": "Business logic validation",
            "implementation": "Role compatibility check before assignment"
          },
          {
            "rule": "BR-21",
            "validation_type": "Workflow validation",
            "implementation": "Finalization rules UI with mandatory status conversion"
          },
          {
            "rule": "BR-31",
            "validation_type": "Audit validation",
            "implementation": "Automatic audit log creation for critical operations"
          },
          {
            "rule": "BR-33",
            "validation_type": "Input validation",
            "implementation": "Non-empty remark validation for manual attendance edits"
          }
        ],
        "runtime_validations": [
          {
            "rule": "BR-16",
            "validation_type": "Referential integrity",
            "implementation": "Camera-room relationship validation during slot creation"
          },
          {
            "rule": "BR-25",
            "validation_type": "Temporal validation",
            "implementation": "Time-based validation for pre-slot message creation"
          }
        ]
      },
      "use_cases_specification": {
        "version": "1.0",
        "project": "FUACS"
      },
      "use_cases": {
        "authentication": {
          "UC-01": {
            "title": "Authenticate to System",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to log in using either their Username/Password or a linked Google account. The system validates the credentials before granting access.",
            "related_business_rules": [
              "BR-01",
              "BR-02",
              "BR-03",
              "BR-04"
            ]
          },
          "UC-02": {
            "title": "Logout",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "Allows an authenticated user to securely end their session and return to the Login screen.",
            "related_business_rules": []
          },
          "UC-03": {
            "title": "View Role-Specific Dashboard",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "After login, the system displays a personalized dashboard with key information and shortcuts relevant to the user's role.",
            "related_business_rules": []
          },
          "UC-04": {
            "title": "Request Password Reset",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to initiate the password reset process by submitting their registered email address from the Login screen to receive a reset link.",
            "related_business_rules": [
              "BR-06"
            ]
          },
          "UC-05": {
            "title": "Reset Password using Token",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to set a new password by following the secure link sent to their email and successfully validating the reset token.",
            "related_business_rules": [
              "BR-06"
            ]
          },
          "UC-06": {
            "title": "Change Own Password",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "Allows a logged-in user to change their current password by providing their old password and a new one, typically via their Profile screen.",
            "related_business_rules": []
          }
        },
        "student": {
          "UC-07": {
            "title": "View Personal Schedule",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view their personal class and exam schedule for a selected semester.",
            "related_business_rules": []
          },
          "UC-08": {
            "title": "View Slot Details",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view detailed information for a specific slot from their schedule, including announcements.",
            "related_business_rules": [
              "BR-28"
            ]
          },
          "UC-09": {
            "title": "Send Pre-Slot Message",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [
              "Lecturer"
            ],
            "description": "Allows a student to send a one-way message to the lecturer of a specific class slot.",
            "related_business_rules": [
              "BR-25",
              "BR-26"
            ]
          },
          "UC-10": {
            "title": "View Attendance History",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view their own attendance history for past slots.",
            "related_business_rules": []
          },
          "UC-11": {
            "title": "View Notifications",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view a feed of notifications, including system alerts, absence rate warnings, and slot-specific announcements.",
            "related_business_rules": [
              "BR-11",
              "BR-28",
              "BR-37"
            ]
          },
          "UC-12": {
            "title": "Initiate Identity Registration",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [
              "Data Operator"
            ],
            "description": "Allows a new student to submit their identity credentials (facial video, ID card) for verification by a Data Operator.",
            "related_business_rules": [
              "BR-08",
              "BR-09"
            ]
          },
          "UC-13": {
            "title": "Request Identity Update",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [
              "Data Operator"
            ],
            "description": "Allows a student to submit a request to update their identity profile, which is routed to a Data Operator for approval.",
            "related_business_rules": [
              "BR-09",
              "BR-10",
              "BR-11"
            ]
          }
        },
        "lecturer": {
          "UC-14": {
            "title": "View Teaching Schedule",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view their personal teaching and supervision schedule for a selected semester.",
            "related_business_rules": []
          },
          "UC-15": {
            "title": "Initiate Attendance Session",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to start the first automated attendance scan for a slot. This action activates the assigned camera(s) and the on-screen button will subsequently change to 'Re-scan'.",
            "related_business_rules": [
              "BR-17",
              "BR-18"
            ]
          },
          "UC-16": {
            "title": "Perform Re-scan during Session",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to trigger a new attendance scan while a session is active. The system will update student statuses based on the latest recognition results and record the event.",
            "related_business_rules": [
              "BR-19",
              "BR-20",
              "BR-32"
            ]
          },
          "UC-17": {
            "title": "Monitor Real-Time Roster",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view the class roster for an active session, where statuses are updated in real-time based on results from all assigned cameras.",
            "related_business_rules": [
              "BR-19",
              "BR-32"
            ]
          },
          "UC-18": {
            "title": "View Detailed Attendance History",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to view the detailed, timestamped attendance history for a specific student within a slot. The history is displayed as a timeline of all automated scans and manual edits.",
            "related_business_rules": [
              "BR-32"
            ]
          },
          "UC-19": {
            "title": "Manually Update Attendance Status",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to manually override a student's attendance status for a slot before finalization. A non-empty remark explaining the reason for the change is mandatory.",
            "related_business_rules": [
              "BR-22",
              "BR-23",
              "BR-33"
            ]
          },
          "UC-20": {
            "title": "Add/Edit Attendance Remark",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to add or modify a remark for a student's attendance record within a slot.",
            "related_business_rules": [
              "BR-33"
            ]
          },
          "UC-21": {
            "title": "Finalize Attendance Session",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to end the attendance session. The system will display a 'Finalization Rules Setup' screen for the lecturer to make bulk decisions on converting intermediate statuses (e.g., Not Yet) to a final status (Present or Absent).",
            "related_business_rules": [
              "BR-21",
              "BR-31",
              "BR-34"
            ]
          },
          "UC-22": {
            "title": "Create Slot Announcement",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [
              "Student"
            ],
            "description": "Allows a lecturer to create and publish an announcement for a specific lecture slot.",
            "related_business_rules": [
              "BR-27",
              "BR-28"
            ]
          },
          "UC-23": {
            "title": "View Slot Announcements",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view all announcements they have created for a specific lecture slot.",
            "related_business_rules": [
              "BR-27"
            ]
          },
          "UC-24": {
            "title": "Delete Slot Announcement",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [
              "Student"
            ],
            "description": "Allows a lecturer to remove an existing announcement from a lecture slot.",
            "related_business_rules": [
              "BR-27"
            ]
          },
          "UC-25": {
            "title": "View Pre-Slot Messages",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [
              "Student"
            ],
            "description": "Allows a lecturer to view a list of pre-slot messages sent by students for a specific lecture slot.",
            "related_business_rules": [
              "BR-25",
              "BR-26"
            ]
          },
          "UC-26": {
            "title": "Acknowledge Pre-Slot Message",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [
              "Student"
            ],
            "description": "Allows a lecturer to mark a student's pre-slot message as 'read' or 'acknowledged'.",
            "related_business_rules": []
          },
          "UC-27": {
            "title": "Export Slot Attendance Report",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to export a detailed attendance report for a finalized lecture slot.",
            "related_business_rules": []
          },
          "UC-28": {
            "title": "View Class Attendance Summary Report",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view and export a summary attendance report for an entire class over a semester, which includes each student's absence rate and exam eligibility status based on the system-configured threshold. This report is only accessible after all slots for the class have been finalized.",
            "related_business_rules": [
              "BR-36",
              "BR-39"
            ]
          }
        },
        "supervisor": {
          "UC-29": {
            "title": "View Supervision Schedule",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to view their personal supervision schedule for assigned exam slots.",
            "related_business_rules": []
          },
          "UC-30": {
            "title": "Initiate Attendance Session",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to start the first automated attendance scan for an exam slot. This action activates the assigned camera(s) and the on-screen button will subsequently change to 'Re-scan'.",
            "related_business_rules": [
              "BR-17",
              "BR-18"
            ]
          },
          "UC-31": {
            "title": "Monitor Real-Time Roster",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to view the exam roster for an active session, where statuses are updated in real-time based on results from all assigned cameras.",
            "related_business_rules": [
              "BR-19",
              "BR-32"
            ]
          },
          "UC-32": {
            "title": "Manually Update Attendance Status",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to manually override a candidate's attendance status for an exam slot before finalization. A non-empty remark explaining the reason for the change is mandatory.",
            "related_business_rules": [
              "BR-22",
              "BR-23",
              "BR-33"
            ]
          },
          "UC-33": {
            "title": "Add/Edit Attendance Remark",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to add or modify a remark for a candidate's attendance record within an exam slot.",
            "related_business_rules": [
              "BR-33"
            ]
          },
          "UC-34": {
            "title": "Finalize Attendance Session",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to end the attendance session. The system will display a 'Finalization Rules Setup' screen for the supervisor to make bulk decisions on converting intermediate statuses (e.g., Not Yet) to a final status (Present or Absent).",
            "related_business_rules": [
              "BR-21",
              "BR-31",
              "BR-34"
            ]
          },
          "UC-35": {
            "title": "Export Exam Slot Attendance Report",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to export a detailed attendance report for a finalized exam slot.",
            "related_business_rules": []
          }
        },
        "data_operator": {
          "user_management": {
            "UC-36": {
              "title": "Create User Account",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new user by providing core details (username, email, full name). The operator must then create a specialized profile (Student or Staff) for the user to define their specific attributes and assign their base role.",
              "related_business_rules": [
                "BR-01",
                "BR-04",
                "BR-05",
                "BR-07",
                "BR-30"
              ]
            },
            "UC-37": {
              "title": "View User Accounts",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view and search a list of all user accounts in the system.",
              "related_business_rules": [
                "BR-30"
              ]
            },
            "UC-38": {
              "title": "Update User Account Details",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the information of an existing user account.",
              "related_business_rules": [
                "BR-30",
                "BR-31"
              ]
            },
            "UC-39": {
              "title": "Update User Role Assignment",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to change the role assigned to a user, subject to system constraints.",
              "related_business_rules": [
                "BR-05",
                "BR-30",
                "BR-31"
              ]
            },
            "UC-40": {
              "title": "Disable/Enable User Account",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to change the status of a user account to active or inactive.",
              "related_business_rules": [
                "BR-03",
                "BR-30",
                "BR-31"
              ]
            }
          },
          "identity_management": {
            "UC-41": {
              "title": "View Pending Identity Submissions",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to view a queue of all identity registration and update requests that are awaiting manual review.",
              "related_business_rules": [
                "BR-09"
              ]
            },
            "UC-42": {
              "title": "Approve Identity Submission",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to review the details of an identity submission (facial video, ID card) and approve it.",
              "related_business_rules": [
                "BR-09",
                "BR-31"
              ]
            },
            "UC-43": {
              "title": "Reject Identity Submission",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to reject an identity submission, providing a reason for the rejection that is sent to the student.",
              "related_business_rules": [
                "BR-09",
                "BR-11",
                "BR-31"
              ]
            }
          },
          "academic_catalog": {
            "UC-44": {
              "title": "Create Major",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new academic Major to the system-wide catalog.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-45": {
              "title": "View Majors",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all Majors in the system.",
              "related_business_rules": []
            },
            "UC-46": {
              "title": "Update Major",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing Major.",
              "related_business_rules": [
                "BR-12",
                "BR-31"
              ]
            },
            "UC-47": {
              "title": "Delete Major Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Major from the system. The action will be blocked with a clear error message if the Major is still associated with any Subjects. This action requires the 'MAJOR_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-48": {
              "title": "Create Semester",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new academic semester with a name, code, start date, and end date.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-49": {
              "title": "View Semesters",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all semesters in the system.",
              "related_business_rules": []
            },
            "UC-50": {
              "title": "Update Semester",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing semester.",
              "related_business_rules": [
                "BR-12",
                "BR-31"
              ]
            },
            "UC-51": {
              "title": "Delete Semester Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Semester from the system. The action will be blocked with a clear error message if the Semester is still associated with any Classes. This action requires the 'SEMESTER_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-52": {
              "title": "Create Subject",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new academic Subject to the catalog, linking it to a Major.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-53": {
              "title": "View Subjects",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all Subjects in the system.",
              "related_business_rules": []
            },
            "UC-54": {
              "title": "Update Subject",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing Subject.",
              "related_business_rules": [
                "BR-12",
                "BR-31"
              ]
            },
            "UC-55": {
              "title": "Delete Subject Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Subject from the system. The action will be blocked with a clear error message if the Subject is still associated with any Classes. This action requires the 'SUBJECT_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-56": {
              "title": "Create Class",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new class, linking it to a subject and semester.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-57": {
              "title": "View Classes",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all classes for a selected semester.",
              "related_business_rules": []
            },
            "UC-58": {
              "title": "Update Class",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing class.",
              "related_business_rules": [
                "BR-12",
                "BR-31"
              ]
            },
            "UC-59": {
              "title": "Delete Class Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Class from the system. The action will be blocked with a clear error message if the Class is still associated with any Slots or Enrollments. This action requires the 'CLASS_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-60": {
              "title": "Create Schedule/Slot",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new schedule slot for a class. After selecting the room, the operator must select one or more cameras from the list of available cameras in that room to be used for the session.",
              "related_business_rules": [
                "BR-15",
                "BR-16",
                "BR-17"
              ]
            },
            "UC-61": {
              "title": "View Schedules",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view the complete schedule for a class or semester.",
              "related_business_rules": []
            },
            "UC-62": {
              "title": "Update Schedule/Slot",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of a scheduled slot, including changing the assigned cameras.",
              "related_business_rules": [
                "BR-15",
                "BR-16",
                "BR-17",
                "BR-31"
              ]
            },
            "UC-63": {
              "title": "Delete Schedule/Slot Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Slot from the system. The action will be blocked with a clear error message if the Slot has any Attendance records. This action requires the 'SLOT_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-64": {
              "title": "Add Student to Roster",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to enroll a student into a specific class.",
              "related_business_rules": [
                "BR-13"
              ]
            },
            "UC-65": {
              "title": "Remove Student from Roster",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to unenroll a student from a class.",
              "related_business_rules": [
                "BR-14",
                "BR-31"
              ]
            }
          },
          "infrastructure": {
            "UC-66": {
              "title": "Create Room",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new physical room to the system.",
              "related_business_rules": []
            },
            "UC-67": {
              "title": "View Rooms",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all rooms in the system.",
              "related_business_rules": []
            },
            "UC-68": {
              "title": "Update Room",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing room.",
              "related_business_rules": [
                "BR-31"
              ]
            },
            "UC-69": {
              "title": "Delete Room Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Room from the system. The action will be blocked with a clear error message if the Room is still associated with any Cameras or Slots. This action requires the 'ROOM_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            },
            "UC-70": {
              "title": "Create Camera",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to register a new IP camera by providing its details and assigning it to a specific room.",
              "related_business_rules": []
            },
            "UC-71": {
              "title": "View Cameras",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all registered cameras.",
              "related_business_rules": []
            },
            "UC-72": {
              "title": "Update Camera",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing camera, including re-assigning it to a different room.",
              "related_business_rules": [
                "BR-31"
              ]
            },
            "UC-73": {
              "title": "Delete Camera Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Camera from the system. The action will be blocked with a clear error message if the Camera is still assigned to any Slots. This action requires the 'CAMERA_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-31",
                "BR-35"
              ]
            }
          },
          "data_management": {
            "UC-74": {
              "title": "Import Academic Data",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to bulk-upload academic data (schedules, rosters) for a semester.",
              "related_business_rules": []
            },
            "UC-75": {
              "title": "Export Finalized Attendance Results",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to export system-wide, finalized attendance results for a selected period.",
              "related_business_rules": []
            },
            "UC-76": {
              "title": "View System-Wide Reports",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to generate and view aggregate reports on attendance data across various dimensions.",
              "related_business_rules": []
            },
            "UC-77": {
              "title": "Search/Lookup Attendance Data",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to perform advanced searches for specific attendance records using a variety of filters.",
              "related_business_rules": []
            },
            "UC-78": {
              "title": "View Operational Audit Logs",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a historical log of business data changes, which includes detailed before-and-after values for updates.",
              "related_business_rules": [
                "BR-31"
              ]
            },
            "UC-79": {
              "title": "Bulk Enroll Students to Classes via CSV",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to upload a CSV file containing a list of student-class pairings (e.g., student_id, class_id) to perform mass enrollment for a selected semester. The system will validate the data before creating the enrollment records.",
              "related_business_rules": [
                "BR-13",
                "BR-31"
              ]
            }
          }
        },
        "system_admin": {
          "notification_management": {
            "UC-80": {
              "title": "Create Notification Template",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to create new system notification templates (e.g., for password resets, identity rejections).",
              "related_business_rules": [
                "BR-29"
              ]
            },
            "UC-81": {
              "title": "View Notification Templates",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view and manage all system notification templates.",
              "related_business_rules": [
                "BR-29"
              ]
            },
            "UC-82": {
              "title": "Update Notification Template",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to edit the content and properties of an existing notification template.",
              "related_business_rules": [
                "BR-29",
                "BR-31"
              ]
            }
          },
          "system_configuration": {
            "UC-83": {
              "title": "View System Configuration",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view all global, system-level settings.",
              "related_business_rules": [
                "BR-29"
              ]
            },
            "UC-84": {
              "title": "Update System Configuration",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to modify core system-level configurations to fine-tune system behavior.",
              "related_business_rules": [
                "BR-29",
                "BR-31"
              ]
            },
            "UC-85": {
              "title": "View System Logs",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view a comprehensive stream of system-wide activity logs for monitoring and troubleshooting.",
              "related_business_rules": []
            },
            "UC-86": {
              "title": "Export System Logs",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to export system logs for a specified time period for offline analysis or archival.",
              "related_business_rules": []
            }
          },
          "role_permission_management": {
            "UC-87": {
              "title": "View Role-Permission Mappings",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view the current matrix that defines which permissions are granted to each user role.",
              "related_business_rules": [
                "BR-29"
              ]
            },
            "UC-88": {
              "title": "Update Role-Permission Mappings",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to grant or revoke specific permissions for each role, controlling access to system functions.",
              "related_business_rules": [
                "BR-29",
                "BR-31"
              ]
            }
          }
        }
      },
      "cross_references": {
        "most_referenced_business_rules": [
          {
            "BR-31": "Critical business data changes must be logged in audit trail"
          },
          {
            "BR-29": "System configuration and role-permission changes require special permissions"
          },
          {
            "BR-09": "Identity submissions require manual approval"
          },
          {
            "BR-12": "Unique identifiers for academic entities"
          }
        ],
        "use_cases_by_complexity": {
          "high_complexity": [
            "UC-15",
            "UC-16",
            "UC-21",
            "UC-34",
            "UC-60",
            "UC-62"
          ],
          "medium_complexity": [
            "UC-19",
            "UC-32",
            "UC-36",
            "UC-42",
            "UC-43"
          ],
          "low_complexity": [
            "UC-01",
            "UC-02",
            "UC-07",
            "UC-10",
            "UC-45",
            "UC-49"
          ]
        }
      }
    }
  }
}