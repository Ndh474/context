{
  "fuacs_core_context": {
    "metadata": {
      "generated_at": "2025-10-21T23:51:23.875378",
      "version": "1.0",
      "description": "FUACS system core context - merged from system, database, and requirements documentation files",
      "excluded_folders": [
        "backend/",
        "frontend/"
      ]
    },
    "system_context": {
      "project_info": {
        "project_code": "FUACS",
        "project_name": "FU Attendance Checking Smart"
      },
      "project_overview": {
        "background": "An independent attendance and academic management system. FUACS serves as the Single Source of Record for all data related to classes, students, lecturers, and attendance results.",
        "goal": "Support login via Google and system accounts (username/password), class schedules, exam schedules, and smart attendance to assist lecturers."
      },
      "platform_definitions": {
        "platform_types": {
          "MOBILE_APP": "Mobile platform for iOS and Android",
          "GENERAL_WEB": "Web platform",
          "ADMIN_PORTAL": "Web platform (Admin Portal)"
        },
        "role_platform_mapping": {
          "Student": "MOBILE_APP",
          "Lecturer": "GENERAL_WEB",
          "Supervisor": "GENERAL_WEB",
          "Data_Operator": "ADMIN_PORTAL",
          "System_Admin": "ADMIN_PORTAL"
        }
      },
      "authentication_and_role_mapping": {
        "mapping_method": "System Native",
        "description": "Users are created and role-managed directly in the system by Data Operators. The primary login identifier (username) is defined as the Student ID or Employee ID. The system supports Google login (for email verification) and direct login using username/password. The system uses specialized profiles (student_profiles, staff_profiles) to manage specific attributes.",
        "role_assignment_rules": "SUPERVISOR or LECTURER roles cannot be assigned to users with the STUDENT role.",
        "access_control": {
          "on_missing_user": "deny_access_403",
          "on_inactive_status": "deny_access_403"
        }
      },
      "master_permission_catalog": {
        "USER_MANAGEMENT": {
          "USER_CREATE": "Create a new user account.",
          "USER_READ_LIST": "View the list of all users.",
          "USER_READ_DETAIL": "View detailed information of a user.",
          "USER_UPDATE_INFO": "Update user personal information (name, email).",
          "USER_UPDATE_STATUS": "Deactivate or activate user account (soft delete).",
          "USER_DELETE_HARD": "Permanently delete user account (dangerous action, requires consideration).",
          "USER_ASSIGN_ROLES": "Assign or revoke roles from a user.",
          "CREATE_SYSTEM_ADMIN": "Create an account with System Admin role (extremely sensitive permission, only for system setup purposes)."
        },
        "IDENTITY_MANAGEMENT": {
          "IDENTITY_SUBMISSION_READ_QUEUE": "View the list of pending identity verification requests.",
          "IDENTITY_SUBMISSION_READ_DETAIL": "View details of an identity verification request (video, ID card).",
          "IDENTITY_SUBMISSION_APPROVE": "Approve an identity verification request.",
          "IDENTITY_SUBMISSION_REJECT": "Reject an identity verification request."
        },
        "ACADEMIC_CATALOG_MANAGEMENT": {
          "SEMESTER_CREATE": "Create a new semester.",
          "SEMESTER_READ": "View the list and details of semesters.",
          "SEMESTER_UPDATE": "Update semester information, including deactivating or activating it.",
          "SEMESTER_DELETE_HARD": "Permanently delete a semester. This action cannot be undone and will fail if related data (classes, etc.) still exists.",
          "MAJOR_CREATE": "Create a new major.",
          "MAJOR_READ": "View the list and details of majors.",
          "MAJOR_UPDATE": "Update major information, including deactivating or activating it.",
          "MAJOR_DELETE_HARD": "Permanently delete a major. This action cannot be undone and will fail if related data (subjects, etc.) still exists.",
          "SUBJECT_CREATE": "Create a new subject.",
          "SUBJECT_READ": "View the list and details of subjects.",
          "SUBJECT_UPDATE": "Update subject information, including deactivating or activating it.",
          "SUBJECT_DELETE_HARD": "Permanently delete a subject. This action cannot be undone and will fail if related data (classes, etc.) still exists.",
          "CLASS_CREATE": "Create a new class.",
          "CLASS_READ": "View the list and details of classes.",
          "CLASS_UPDATE": "Update class information, including deactivating or activating it.",
          "CLASS_DELETE_HARD": "Permanently delete a class. This action cannot be undone and will fail if related data (slots, enrollments, etc.) still exists.",
          "SLOT_CREATE": "Create a new lecture/exam slot.",
          "SLOT_READ": "View the list and details of lecture/exam slots.",
          "SLOT_UPDATE": "Update lecture/exam slot information, including cancelling (deactivating) it.",
          "SLOT_DELETE_HARD": "Permanently delete a lecture/exam slot. This action is dangerous and cannot be undone.",
          "ENROLLMENT_MANAGE": "Add or remove students from a class.",
          "SLOT_UPDATE_CATEGORY": "Update slot category (Lecturer can change LECTURE ↔ LECTURE_WITH_PT).",
          "SLOT_CREATE_FINAL_EXAM": "Create a new slot classified as a Final Exam.",
          "SLOT_UPDATE_FINAL_EXAM": "Update the details of an existing Final Exam slot.",
          "SLOT_DELETE_HARD_FINAL_EXAM": "Permanently delete a Final Exam slot."
        },
        "INFRASTRUCTURE_MANAGEMENT": {
          "ROOM_CREATE": "Create a new room.",
          "ROOM_READ": "View the list and details of rooms.",
          "ROOM_UPDATE": "Update room information, including deactivating or activating it.",
          "ROOM_DELETE_HARD": "Permanently delete a room. This action cannot be undone and will fail if related data (cameras, slots, etc.) still exists.",
          "CAMERA_CREATE": "Create a new camera and assign it to a room.",
          "CAMERA_READ": "View the list and details of cameras.",
          "CAMERA_UPDATE": "Update camera information, including deactivating or activating it.",
          "CAMERA_DELETE_HARD": "Permanently delete a camera. This action cannot be undone."
        },
        "ATTENDANCE_MANAGEMENT": {
          "OWN_SCHEDULE_READ": "View personal schedule (teaching/exam/learning).",
          "SLOT_SESSION_START": "Start an automated attendance session for a slot.",
          "SLOT_SESSION_RESCAN": "Trigger a re-scan for attendance.",
          "SLOT_SESSION_FINALIZE": "Finalize and complete the attendance session.",
          "ATTENDANCE_ROSTER_READ": "View the roster and real-time attendance status of a slot.",
          "ATTENDANCE_STATUS_UPDATE_MANUAL": "Manually update attendance status for students.",
          "ATTENDANCE_REMARK_MANAGE": "Add, edit, delete attendance remarks."
        },
        "REPORTING_AND_DATA": {
          "REPORT_READ_OWN_SLOT": "View attendance reports for slots under own responsibility.",
          "REPORT_EXPORT_OWN_SLOT": "Export report files for slots under own responsibility.",
          "REPORT_READ_CLASS_SUMMARY": "View comprehensive attendance summary report for a class.",
          "REPORT_READ_SYSTEM_WIDE": "View system-wide summary reports.",
          "REPORT_EXPORT_ACADEMIC_DATA": "Export academic data (class lists, attendance results, etc.).",
          "AUDIT_LOG_READ": "View audit logs of important business data changes."
        },
        "SYSTEM_ADMINISTRATION": {
          "SYSTEM_CONFIG_READ": "View system configurations.",
          "SYSTEM_CONFIG_UPDATE": "Modify system configurations.",
          "ROLE_PERMISSION_MAPPING_READ": "View role-permission mapping matrix.",
          "ROLE_PERMISSION_MAPPING_UPDATE": "Edit role-permission mapping matrix.",
          "SYSTEM_LOG_READ": "View technical system activity logs.",
          "ROLE_CREATE": "Create a new user role.",
          "ROLE_UPDATE": "Update a role's information, including its name and description.",
          "ROLE_DELETE_HARD": "Permanently delete a role. This action is dangerous and will fail if the role is assigned to any user.",
          "PERMISSION_CREATE": "Create a new permission in the system's master catalog.",
          "PERMISSION_UPDATE": "Update the details of an existing permission.",
          "PERMISSION_DELETE_HARD": "Permanently delete a permission from the master catalog. Extremely dangerous action that can break role assignments."
        },
        "STUDENT_PERMISSIONS": {
          "OWN_ATTENDANCE_HISTORY_READ": "View own attendance history.",
          "OWN_IDENTITY_SUBMIT": "Submit identity registration or update request."
        },
        "GENERAL_PERMISSIONS": {
          "OWN_PROFILE_READ": "View own personal profile information.",
          "OWN_PASSWORD_UPDATE": "Change own password."
        }
      },
      "role_definitions": {
        "SYSTEM_ADMIN": {
          "role_name": "System Administrator",
          "description": "The highest technical role, responsible for defining policies, system configuration, and managing the permission structure of roles. Does not manage user accounts or intervene in daily operations.",
          "platform": "ADMIN_PORTAL",
          "permissions": [
            "SYSTEM_CONFIG_READ",
            "SYSTEM_CONFIG_UPDATE",
            "ROLE_PERMISSION_MAPPING_READ",
            "ROLE_PERMISSION_MAPPING_UPDATE",
            "SYSTEM_LOG_READ",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROLE_CREATE",
            "ROLE_UPDATE",
            "ROLE_DELETE_HARD",
            "PERMISSION_CREATE",
            "PERMISSION_UPDATE",
            "PERMISSION_DELETE_HARD"
          ]
        },
        "DATA_OPERATOR": {
          "role_name": "Data Operations Staff",
          "description": "The main operational role, responsible for all academic data and user account lifecycle management.",
          "platform": "ADMIN_PORTAL",
          "permissions": [
            "USER_CREATE",
            "USER_READ_LIST",
            "USER_READ_DETAIL",
            "USER_UPDATE_INFO",
            "USER_UPDATE_STATUS",
            "USER_ASSIGN_ROLES",
            "IDENTITY_SUBMISSION_READ_QUEUE",
            "IDENTITY_SUBMISSION_READ_DETAIL",
            "IDENTITY_SUBMISSION_APPROVE",
            "IDENTITY_SUBMISSION_REJECT",
            "SEMESTER_CREATE",
            "SEMESTER_READ",
            "SEMESTER_UPDATE",
            "MAJOR_CREATE",
            "MAJOR_READ",
            "MAJOR_UPDATE",
            "SUBJECT_CREATE",
            "SUBJECT_READ",
            "SUBJECT_UPDATE",
            "CLASS_CREATE",
            "CLASS_READ",
            "CLASS_UPDATE",
            "SLOT_CREATE",
            "SLOT_READ",
            "SLOT_UPDATE",
            "ENROLLMENT_MANAGE",
            "SLOT_CREATE_FINAL_EXAM",
            "SLOT_UPDATE_FINAL_EXAM",
            "SLOT_DELETE_HARD_FINAL_EXAM",
            "ATTENDANCE_STATUS_UPDATE_MANUAL",
            "ROOM_CREATE",
            "ROOM_READ",
            "ROOM_UPDATE",
            "CAMERA_CREATE",
            "CAMERA_READ",
            "CAMERA_UPDATE",
            "REPORT_READ_SYSTEM_WIDE",
            "REPORT_EXPORT_ACADEMIC_DATA",
            "AUDIT_LOG_READ",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE"
          ]
        },
        "LECTURER": {
          "role_name": "Lecturer",
          "description": "Responsible for managing lecture sessions, monitoring class rosters, and finalizing attendance results.",
          "platform": "GENERAL_WEB",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "SLOT_SESSION_START",
            "SLOT_SESSION_RESCAN",
            "SLOT_SESSION_FINALIZE",
            "ATTENDANCE_ROSTER_READ",
            "ATTENDANCE_STATUS_UPDATE_MANUAL",
            "ATTENDANCE_REMARK_MANAGE",
            "REPORT_READ_OWN_SLOT",
            "REPORT_EXPORT_OWN_SLOT",
            "REPORT_READ_CLASS_SUMMARY",
            "REPORT_READ_SYSTEM_WIDE",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "CAMERA_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ",
            "SLOT_UPDATE_CATEGORY"
          ]
        },
        "SUPERVISOR": {
          "role_name": "Exam Supervisor",
          "description": "Responsible for supervising exam sessions, initiating and finalizing attendance results for exams.",
          "platform": "GENERAL_WEB",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "SLOT_SESSION_START",
            "SLOT_SESSION_RESCAN",
            "SLOT_SESSION_FINALIZE",
            "ATTENDANCE_ROSTER_READ",
            "ATTENDANCE_STATUS_UPDATE_MANUAL",
            "ATTENDANCE_REMARK_MANAGE",
            "REPORT_READ_OWN_SLOT",
            "REPORT_EXPORT_OWN_SLOT",
            "REPORT_READ_SYSTEM_WIDE",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "CAMERA_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ"
          ]
        },
        "STUDENT": {
          "role_name": "Student",
          "description": "Uses the system to track schedules, view attendance history, and send notifications.",
          "platform": "MOBILE_APP",
          "permissions": [
            "OWN_SCHEDULE_READ",
            "OWN_ATTENDANCE_HISTORY_READ",
            "OWN_IDENTITY_SUBMIT",
            "OWN_PROFILE_READ",
            "OWN_PASSWORD_UPDATE",
            "ROOM_READ",
            "SEMESTER_READ",
            "CLASS_READ",
            "MAJOR_READ",
            "SLOT_READ",
            "SUBJECT_READ"
          ]
        }
      },
      "function_catalog": {
        "common_functions": [
          "Role-based access control",
          "Import/Export data",
          "System notifications",
          "Search & filter",
          "Role-based dashboard",
          "Activity logs",
          "Reports & file export"
        ],
        "student_functions": [],
        "lecturer_functions": [
          "View comprehensive attendance reports by class/semester"
        ],
        "data_operator_functions": [
          "Manage Semesters",
          "Manage academic catalogs",
          "Receive and export attendance reports",
          "Query & reconcile data",
          "Manage & Review identity registration submissions",
          "Manage user accounts",
          "Manage slot enrollment",
          "Export academic data",
          "Manage Camera and Room catalogs",
          "View operational activity logs",
          "Manage Majors",
          "Manage bulk student enrollments via CSV import"
        ],
        "system_admin_functions": [
          "Configure system (AI model, similarity threshold, etc.)",
          "Monitor logs and anomalous data",
          "Manage permission catalog & Role-Permission mapping"
        ]
      },
      "screen_catalog": {
        "mobile_student_screens": {
          "SCR_STUDENT_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_STUDENT_DASHBOARD": {
            "title": "Home Screen/Dashboard",
            "features": [
              "View upcoming lecture/exam slots",
              "Shortcuts to main functions"
            ]
          },
          "SCR_STUDENT_SCHEDULE": {
            "title": "Schedule Screen",
            "features": [
              "Semester selector",
              "Filter Lecture/Exam schedule",
              "View schedule in week/month format",
              "Aggregates and displays a unified schedule from both class enrollments (LECTURE/LECTURE_WITH_PT) and independent exam registrations (FINAL_EXAM).",
              "For FINAL_EXAM slots, the API queries through 'exam_slot_participants' and 'exam_slot_subjects' to display the exact Subject name(s) that the student must take the exam for in that slot."
            ]
          },
          "SCR_STUDENT_SLOT_DETAILS": {
            "title": "Slot Details Screen",
            "features": [
              "View detailed slot information (including slot type: LECTURE or EXAM)"
            ]
          },
          "SCR_STUDENT_IDENTITY_REG": {
            "title": "Identity Registration Screens",
            "features": [
              "Identity registration instructions",
              "Step 1: Interface to capture a static face photo.",
              "Step 2: Interface to record a short face video.",
              "Review and submit screen",
              "Waiting screen/approval result notification"
            ]
          },
          "SCR_STUDENT_PROFILE": {
            "title": "Profile Screen",
            "features": [
              "'Request Identity Update' button",
              "'Change Password' function"
            ]
          },
          "SCR_STUDENT_NOTIFICATIONS": {
            "title": "Notifications Inbox",
            "features": [
              "System notifications feed (identity status, absence warnings, etc.)",
              "Filters: All | Identity requests | Absence warnings | System alerts",
              "Unread indicator at notification level and filter level",
              "View notification details"
            ]
          },
          "SCR_STUDENT_FORGOT_PASSWORD": {
            "title": "Forgot Password Screen",
            "features": [
              "Email input form to receive reset link",
              "'Send Request' button"
            ]
          },
          "SCR_STUDENT_RESET_PASSWORD": {
            "title": "Reset Password Screen",
            "features": [
              "New password and confirm password input form",
              "'Reset Password' button"
            ]
          }
        },
        "web_lecturer_screens": {
          "SCR_LECTURER_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_LECTURER_SCHEDULE": {
            "title": "Schedule & Slots",
            "features": [
              "View teaching schedule and exam supervision schedule by semester on a unified interface",
              "Advanced filters to filter lecture/exam slots by multiple criteria, including 'Category' (slot_category: LECTURE, LECTURE_WITH_PT, FINAL_EXAM)",
              "Open/Close/Finalize slot"
            ]
          },
          "SCR_LECTURER_ROSTER": {
            "title": "Roster & Attendance",
            "features": [
              "Dynamically loads the student roster based on slot type: from Class Enrollments (for LECTURE/LECTURE_WITH_PT) or from the independent Exam Participant list (for FINAL_EXAM slots).",
              "Interface displays appropriate functions based on role (Lecturer, Supervisor).",
              "Display camera names and connection status of all cameras in the assigned room",
              "Interface updates attendance status in real-time from recognition service results",
              "For each student marked 'present' automatically, display the captured evidence image next to their base avatar for quick visual comparison by the lecturer.",
              "Review/edit status",
              "Add/Edit attendance remarks for each student",
              "Multi-state 'Start Attendance / Re-scan' button to trigger scan sessions",
              "Manual attendance edit window, requires mandatory reason (remark) input when changing status",
              "'Finalization Rules Setup' screen displays when finalizing slot to batch process undetermined statuses"
            ]
          },
          "SCR_LECTURER_SLOT_DETAILS": {
            "title": "Slot Details",
            "features": [
              "View slot information and settings"
            ]
          },
          "SCR_LECTURER_REPORTS": {
            "title": "Slot Reports",
            "features": [
              "View/Export reports by slot/class"
            ]
          },
          "SCR_LECTURER_CLASS_REPORT": {
            "title": "Class Attendance Report Screen",
            "features": [
              "Filter to select Semester and Class",
              "Display summary report in table (matrix) format: students by rows, slots by columns",
              "Display attendance status (Present/Absent) in table cells",
              "Display calculated absence rate (%) for each student (based on LECTURE slots only)",
              "Display exam eligibility status (e.g., 'Eligible', 'Ineligible') based on the system-configured rule",
              "Visually highlight students who are ineligible for the exam",
              "Function to export summary report to file (CSV, Excel)"
            ],
            "notes": [
              "IMPORTANT: This entire screen/report is only accessible after ALL slots (both LECTURE and EXAM) for the selected class have been finalized by the responsible staff."
            ]
          }
        },
        "web_admin_portal_screens": {
          "SCR_ADMIN_LOGIN": {
            "title": "Login Screen",
            "features": [
              "Google login",
              "Username and Password login form",
              "'Forgot Password?' link"
            ]
          },
          "SCR_ADMIN_DASHBOARD": {
            "title": "Admin Dashboard",
            "features": [
              "Overview charts",
              "Semester filter",
              "Permission-based display"
            ]
          },
          "SCR_ADMIN_EXPORT": {
            "title": "Data Export Screen (Data Operator)",
            "features": [
              "Interface to configure and execute academic data export (CSV, JSON, etc.)",
              "View export history"
            ]
          },
          "SCR_ADMIN_CRUD_ACADEMIC": {
            "title": "CRUD Screens (Data Operator)",
            "features": [
              "Manage Classes, Subjects, and Majors.",
              "Manage Slots (Lecture/Exam Schedules) with conditional logic: LECTURE/LECTURE_WITH_PT slots require a Class. FINAL_EXAM slots require a Semester (class_id is NULL).",
              "NEW: When creating/editing a FINAL_EXAM Slot, allow DOP to select and assign multiple Subjects to that slot (updates 'exam_slot_subjects' table).",
              "Add/Remove students from a class (Roster Management for class-based slots only)."
            ]
          },
          "SCR_ADMIN_REPORTING": {
            "title": "Reporting & Lookup Screen (Data Operator)",
            "features": [
              "Advanced search filters",
              "View and export custom reports"
            ]
          },
          "SCR_ADMIN_AUDIT_LOGS": {
            "title": "Operational Audit Log Viewer (Data Operator)",
            "features": [
              "View history of business data changes (who, what, when)",
              "Filter by actor, action type, and time range"
            ]
          },
          "SCR_ADMIN_IDENTITY_QUEUE": {
            "title": "Identity Registration Approval Queue (Data Operator)",
            "features": [
              "List of pending identity registration/update requests",
              "Interface to compare information (new photo, old photo, ID card)",
              "Approve/Reject buttons (with reason)"
            ]
          },
          "SCR_ADMIN_USER_MGMT": {
            "title": "User & Role Management (Data Operator)",
            "features": [
              "Add/Edit/Delete accounts",
              "Assign one or more roles to users (LECTURER, SUPERVISOR, STUDENT); includes constraint check to not assign SUPERVISOR/LECTURER to STUDENT",
              "Does NOT edit permission catalog or Role-Permission mapping",
              "Create specialized profiles (Student/Staff)"
            ]
          },
          "SCR_ADMIN_INFRA_MGMT": {
            "title": "Camera & Room Management (Data Operator)",
            "features": [
              "Add/Edit/Delete room information",
              "Add/Edit/Delete camera information (Name, RTSP connection string, Status)",
              "Assign a camera to a room",
              "View list of all cameras and rooms in the system"
            ]
          },
          "SCR_SYSADMIN_CONFIG": {
            "title": "System Configuration (System Admin)",
            "features": [
              "Configure AI model",
              "Configure business rule parameters (e.g., max absence percentage for students)",
              "Manage permission catalog & Role-Permission mapping"
            ]
          },
          "SCR_SYSADMIN_LOGS": {
            "title": "System Logs Viewer (System Admin)",
            "features": [
              "View and filter system logs"
            ]
          },
          "SCR_ADMIN_BULK_ENROLLMENT": {
            "title": "Bulk Student Enrollment (Class-based) Screen",
            "features": [
              "Semester selector to choose the target semester.",
              "Interface to upload a CSV file containing class enrollment data (e.g., columns: student_id, class_id). NOTE: This screen is for class enrollments only, not for independent exams.",
              "Button to download a CSV template file to ensure correct formatting.",
              "A preview table to display data parsed from the uploaded file.",
              "Validation feedback area to show errors found in the file (e.g., invalid student ID, non-existent class).",
              "A 'Confirm Enrollment' button to execute the bulk creation of enrollment records."
            ]
          },
          "SCR_ADMIN_EXAM_PARTICIPANTS": {
            "title": "Independent Exam Participant Management",
            "features": [
              "Semester selector to filter FINAL_EXAM slots (where class_id is NULL).",
              "Slot selector to choose a specific independent exam slot.",
              "NEW: Subject filter (Dropdown) that displays only subjects assigned to the selected slot (from 'exam_slot_subjects' table).",
              "Display a data table of students registered for the selected (Slot + Subject) pair (from 'exam_slot_participants' table).",
              "Function to manually add a student (by student_id) to the selected (Slot + Subject) pair. System must validate business logic (e.g., is the student enrolled in this subject during the semester).",
              "Function to remove a student from the list.",
              "Interface to upload a CSV file to bulk-import participants (implements UC-65). The CSV file must contain (student_id, subject_code).",
              "Button to download CSV template (new template with 2 columns)."
            ]
          }
        }
      },
      "complex_component_catalog": {
        "COMPLEX_SEMESTER_DATATABLE": {
          "description": "A reusable data table for displaying and managing semesters. Includes sorting, filtering, and pagination.",
          "required_features": [
            "CRUD operations on Semester data"
          ]
        }
      },
      "attendance_system": {
        "attendance_mode": {
          "description": "The only attendance mode, activated by Lecturer (for lecture slots) or Supervisor (for exam slots). The system uses IP cameras pre-installed in classrooms to automatically recognize and record student presence. A Python middleware service processes video streams and sends results back to the system."
        },
        "face_recognition": {
          "decision_flow_summary": "Face scan has 2 possible outcomes only",
          "outcomes": {
            "match": "set attendance = present",
            "no_match": "no-op (person in charge marks attendance manually)"
          }
        },
        "attendance_statuses": [
          "not_yet",
          "present",
          "absent"
        ],
        "status_notes": "The system does not distinguish between 'excused absence' and 'unexcused absence' at the status level. All absences are recorded as 'absent'. Lecturers or Supervisors can use the remark function to provide context when necessary.",
        "slot_control": {
          "open_by": "Lecturer/Supervisor",
          "finalize_by": "Lecturer/Supervisor",
          "finalization_logic": "When a lecturer finalizes a slot, the system displays a 'Finalization Rules Setup' screen. This screen allows the lecturer to batch decide how students with intermediate statuses (Not Yet) will be converted to final statuses (Present or Absent).",
          "editability_rules": "After the first finalization (first_submission), Lecturer/Supervisor can edit attendance results until 23:59:59 of that day. After this time, the data will be locked for them. Exception cases need to be handled by Data Operator.",
          "finalization_audit_trail_note": "The timestamp of the MOST RECENT finalization is stored in slots.finalized_at for quick queries and reporting. When a slot is re-finalized, this value is updated (overwrites previous value). Detailed information about WHO performed the finalization (actor_user_id), along with the complete history of all finalization-related actions (finalize, reopen, re-finalize), is comprehensively recorded in the operational_audit_logs table. This dual approach balances query performance with comprehensive audit trail requirements."
        },
        "lecturer_ui_rules": {
          "description": "Rules on the lecturer/supervisor attendance screen.",
          "real_time_update": "Attendance status is updated in real-time as soon as the recognition service sends successful results.",
          "finalization_confirmation": "The system must display a warning dialog and request confirmation if the user finalizes a lecture/exam slot while there are still students in 'not_yet' status."
        }
      },
      "technical_flows": {
        "identity_registration_flow": "A one-time process for students to register their identity. Students first take a static face photo (which will become the base image for comparison), then record a short face video (used to generate the recognition vector). The data is then sent to Data Operator for manual approval.",
        "identity_re_registration_flow": "Students can submit a request to update their identity. The process is the same as the initial registration: they must provide a new static face photo and a new face video. This request also requires Data Operator approval. During the waiting period, the system still uses the old photo and vector for attendance.",
        "identity_submission_rejection_flow": "When Data Operator rejects an identity registration/update request, the system automatically sends a system notification to the student. This notification includes the rejection reason and will appear in the student's Notification Inbox.",
        "evidence_cleanup_flow": {
          "title": "Temporary Attendance Evidence Cleanup Flow",
          "description": "A scheduled job that runs periodically (e.g., daily) to delete old attendance evidence images and their corresponding database records from both regular and exam attendance tables to save storage space.",
          "steps": [
            "1. Trigger: The job is automatically triggered by a scheduler (e.g., cron) at a fixed time (e.g., 03:00 AM daily).",
            "2. Read Configuration: The job reads the value of 'attendance.evidence_retention_days' from system_configurations (e.g., 30 days).",
            "3. Scan for Old Regular Evidence: The job queries the 'regular_attendance_evidences' table to find all records older than the retention period.",
            "4. Delete Regular Evidence: For each old record found, the job deletes the corresponding image file and then the database record.",
            "5. Scan for Old Exam Evidence: The job queries the 'exam_attendance_evidences' table to find all records older than the retention period.",
            "6. Delete Exam Evidence: For each old record found, the job deletes the corresponding image file and then the database record."
          ]
        },
        "face_identification_flow": "When a lecturer starts a scan session, the system retrieves the student list and assigned cameras. The Python service processes video streams and calls the Backend API to record results. For each scan, the system adds a new event to the student's history record and updates the displayed status on the interface based on the latest result. This process does not overwrite old data.",
        "data_export_flow": "This is a manual flow performed by Data Operator. The user accesses the 'Data Export' screen on the Admin Portal, selects data type (e.g., attendance results), file format (CSV, JSON), and necessary filters. The system then generates the file and allows the user to download it for import into external systems like SIS/LMS.",
        "authentication_flow": "Users on all platforms (Web, Mobile) can log in with Google. Upon successful authentication, Google provides an email address. The FUACS system uses this email address to directly look up the corresponding user account that already exists in the system. If an active account with a matching email is found, the system grants a session token with the permissions assigned to that user. This flow is entirely based on email matching.",
        "system_notification_flow": "When a business event occurs (e.g., identity rejection), the system generates notification content (hardcoded in backend), creates a notification record and delivery record for the target user, and sends a push notification.",
        "username_password_auth_flow": "User enters username and password. Backend finds user by username, then uses a hashing algorithm (e.g., bcrypt) to compare the entered password with the password_hash stored in the database. If matched, grants session token.",
        "password_reset_flow": "User enters email. System creates a unique, time-limited reset token, saves it to the database, and sends an email containing the reset link. When the user accesses the link, the system validates the token, allows them to enter a new password, hashes and updates the password_hash, then invalidates the used token.",
        "daily_absence_calculation_flow": {
          "title": "Daily Absence Calculation and Notification Flow",
          "description": "A scheduled job that runs automatically every day after midnight to ensure data consistency and timely notifications based on finalized attendance records from the previous day.",
          "steps": [
            "1. Trigger: The job is automatically triggered by a scheduler (e.g., cron) at a fixed time daily (e.g., 00:05 AM).",
            "2. Read Configuration: The job first reads the value of 'attendance.max_absence_percentage' from the system_configurations table to get the current threshold.",
            "3. Scan for Finalized Slots: The job queries the database to find all lecture slots (slot_category IN ('LECTURE', 'LECTURE_WITH_PT')) that were finalized within the previous calendar day (from 00:00:00 to 23:59:59).",
            "4. Recalculate Absence Rates: For each class associated with the found slots, the job recalculates the current absence percentage for every enrolled student.",
            "5. Check Thresholds and Notify: The job checks if any student has crossed the 10%, 20%, or the configured maximum absence thresholds for the first time. If so, it generates and delivers a system notification to that student."
          ]
        }
      },
      "information_flows": [
        "Student ↔ System: view schedule/slots; view attendance status",
        "Lecturer ↔ System: open/finalize slots; start automated attendance session; review/edit status before finalizing",
        "Supervisor ↔ System: open/finalize exam slots; start automated attendance session; review/edit status",
        "System → External systems (SIS/LMS): export academic data and attendance results on demand",
        "System ↔ Python Recognition Service: send session start request; receive attendance results",
        "System ↔ Data Operations Staff: attendance reports, catalog management and data synchronization; approve identity registrations; manage user accounts; manage rooms and cameras; review activity history",
        "System ↔ System Administrator: monitor and configure system",
        "System ↔ Google: login & basic profile"
      ],
      "integrations": {
        "outbound_integrations": {
          "description": "FUACS shares data with external systems via manual export. API integration is a planned item for the future.",
          "methods": {
            "manual_export": {
              "formats": [
                "CSV",
                "JSON"
              ],
              "data_scopes": [
                "attendance_summary",
                "full_roster",
                "academic_catalogs"
              ]
            },
            "api": {
              "status": "planned",
              "endpoints": [
                "get_roster",
                "get_attendance_by_class"
              ]
            }
          }
        },
        "integration_points": [
          "Dedicated IP camera system in classrooms (receive video stream via RTSP)",
          "Python recognition service (communicate via API)",
          "Google: login and basic profile",
          "External systems (if any): Receive data from FUACS (currently export; API planned)"
        ],
        "integration_method": "The system operates independently and is the source of original data. Data is shared with other systems via export function; API integration is planned for the future."
      },
      "data_policies": {
        "conflict_resolution": {
          "strategy": "Last-Write-Wins",
          "granularity": "field-level",
          "description": "The later updated value (by import or in-system operation) wins for each field. Priority rules between FUACS data and external systems will be discussed in detail later."
        }
      },
      "data_model": {
        "slot_entity_definition": {
          "description": "Additional definition for the Slot entity to support business classification.",
          "fields": {
            "slot_category": {
              "type": "Varchar",
              "required": true,
              "description": "Classifies the type and purpose of a slot. Combines slot type and exam component into a single field.\n\nAllowed Values:\n- 'LECTURE': Regular lecture session (teaching only)\n- 'LECTURE_WITH_PT': Lecture session with progress test (teaching + testing)\n- 'FINAL_EXAM': Final exam session (testing only)\n\nLecturer Workflow:\n- DOP creates slots with slot_category = 'LECTURE' or 'FINAL_EXAM'\n- Lecturer can update slot_category: 'LECTURE' ↔ 'LECTURE_WITH_PT'\n- Cannot change to/from 'FINAL_EXAM' (only DOP can manage final exams)\n\nValidation enforced at application layer.\n",
              "allowed_values": [
                "LECTURE",
                "LECTURE_WITH_PT",
                "FINAL_EXAM"
              ]
            },
            "room_id": {
              "type": "Reference",
              "target_entity": "Room",
              "required": true,
              "description": "ID of the room where this slot takes place. Used to determine which camera to use."
            },
            "title": {
              "type": "Varchar",
              "required": false,
              "description": "The display name for the slot. Especially useful for exams to give them a specific title like 'Progress Test 1 - Chapter 1-3'."
            },
            "description": {
              "type": "Text",
              "required": false,
              "description": "Optional detailed information or instructions about the slot, visible to students and staff."
            }
          }
        },
        "enrollment_entity_definition": {
          "description": "Definition of enrollment record.",
          "fields": {
            "is_enrolled": {
              "type": "Boolean",
              "default": true,
              "description": "Enrollment status. When a student withdraws from a course, this field is updated to 'false'. This hides the student from future slots but preserves all enrollment and attendance history data for reporting and audit purposes."
            }
          }
        }
      },
      "idempotency_policies": {
        "unique_constraints": [
          "enrollments: (class_id, student_user_id) is unique",
          "attendance_records: (student_user_id, slot_id) is unique"
        ],
        "notes": [
          "enrollments.is_enrolled field controls roster visibility"
        ],
        "keys": {
          "slot_enrollment": "class_id + student_user_id",
          "attendance": "student_user_id + slot_id",
          "slot_announcement": "id (bigint)",
          "pre_slot_message": "id (bigint)"
        }
      },
      "assumptions": {
        "reconciliation_report": true,
        "idempotency_key": "slot_id + student_id",
        "base_image_quality": "The system assumes that students will provide identity video/photos with sufficient quality for recognition. The system does not have input quality enforcement mechanisms.",
        "single_slot_assignment": "In the current version, each slot is assigned to one and only one staff member (Lecturer or Supervisor)."
      },
      "terminology_notes": {
        "principles": [
          "UI uses Vietnamese as primary; first occurrence in each screen/section may include English terminology in parentheses",
          "Permissions use UPPER_SNAKE_CASE; concepts use snake_case"
        ],
        "dictionary": {
          "slot": {
            "ui_label": "Buổi học/thi (Slot)",
            "concept_key": "slot",
            "description": "A unit of lecture or exam session in the schedule."
          },
          "roster": {
            "ui_label": "Danh sách lớp (Roster)",
            "concept_key": "roster",
            "description": "Student list of a slot used to monitor and review attendance status."
          },
          "supervisor": {
            "ui_label": "Giám thị (Supervisor)",
            "concept_key": "supervisor",
            "description": "Person responsible for supervising and taking attendance for an exam slot."
          },
          "system_notification": {
            "ui_label": "Thông báo hệ thống (System Notification)",
            "concept_key": "system_notification",
            "description": "Notification issued by the system to target users."
          },
          "automated_attendance": {
            "ui_label": "Điểm danh tự động (Automated Attendance)",
            "description": "System automatically takes attendance via IP cameras."
          },
          "attendance_status_values": {
            "ui_label": "Trạng thái điểm danh (Attendance Statuses)",
            "values": [
              "not_yet",
              "present",
              "absent"
            ]
          }
        },
        "mappings": [
          {
            "ui_label": "System notification",
            "concept": "system_notification"
          }
        ]
      },
      "tech_stack": {
        "frontend": {
          "web": {
            "description": "Web platform for Lecturers, Supervisors, and Admin",
            "technology": "Next.js",
            "ui_library": "shadcn/ui"
          },
          "mobile_app": {
            "description": "Mobile application for Students",
            "technology": "React Native"
          }
        },
        "backend": {
          "main_service": {
            "description": "Main service handling business logic",
            "technology": "Java (Spring Boot)",
            "runtime": "JDK 21+"
          },
          "recognition_service": {
            "description": "Service handling face recognition",
            "technology": "Python (FastAPI)"
          }
        },
        "database": {
          "primary_database": {
            "technology": "PostgreSQL",
            "extensions": [
              "pgvector"
            ]
          }
        }
      },
      "implementation_decisions": {
        "description": "Documented decisions about implementation approaches and what NOT to implement. These decisions are final for current and near-future versions.",
        "backend_validation_only": [
          {
            "item": "Role Assignment Constraint (STUDENT cannot have LECTURER/SUPERVISOR)",
            "decision": "Validate in Spring Boot application layer, NOT database constraint",
            "reason": "More flexible, better error messages, easier to customize business logic",
            "status": "FINAL - Do not suggest database triggers or constraints"
          },
          {
            "item": "Slot Type vs Exam Subcategory Validation",
            "decision": "Check in backend service, NOT database CHECK constraint",
            "reason": "Business logic may evolve, application-level validation is more maintainable",
            "status": "FINAL - Do not suggest database constraints"
          }
        ],
        "explicitly_not_implemented": [
          {
            "item": "Maximum Students Per Class",
            "decision": "NOT implemented - no capacity limits",
            "reason": "No business requirement for class size limits",
            "status": "SKIP - Do not suggest unless explicitly requested"
          },
          {
            "item": "Identity Submission Retry Limit",
            "decision": "NOT implemented - unlimited submissions allowed",
            "reason": "Not needed in current version, can add later if spam becomes an issue",
            "status": "SKIP - Do not suggest unless explicitly requested"
          },
          {
            "item": "RTSP URL Encryption/Credential Separation",
            "decision": "NOT implemented - store RTSP URLs as-is in database",
            "reason": "Internal network only, security handled at network level, not application priority",
            "status": "SKIP for current and near-future versions - Do not suggest security improvements"
          },
          {
            "item": "Real-time Performance Specifications",
            "decision": "NOT specified - use framework defaults",
            "reason": "Premature optimization, will tune based on actual load testing results",
            "status": "SKIP - Do not suggest performance specs until load testing"
          },
          {
            "item": "Link Password to Google Account",
            "decision": "NOT implemented - Google-only accounts remain Google-only",
            "reason": "Not a priority feature, users can use password reset if needed",
            "status": "SKIP - Do not suggest unless explicitly requested"
          },
          {
            "item": "Attendance History Table",
            "decision": "NOT implemented - use operational_audit_logs for history",
            "reason": "Audit logs already provide complete history, no need for duplicate table",
            "status": "FINAL - Do not suggest separate history table"
          },
          {
            "item": "System Admin Role/Permission Management Use Cases",
            "decision": "NOT documented as separate use cases",
            "reason": "Low-level admin functions, permissions exist but detailed UCs not needed",
            "status": "SKIP - Do not suggest adding these UCs"
          },
          {
            "item": "Student View Exam Eligibility Status Use Case",
            "decision": "Feature exists but NOT documented as separate UC",
            "reason": "Handled in backend logic, no dedicated UI screen needed",
            "status": "SKIP - Do not suggest adding this UC"
          }
        ],
        "slot_management_clarifications": [
          {
            "item": "Slot Cancellation",
            "decision": "Only Data Operator can cancel slots (set is_active = false)",
            "reason": "Slots are academic data managed by DOP, not by Lecturers",
            "status": "FINAL - Lecturers cannot cancel slots, do not suggest this feature"
          },
          {
            "item": "Slot Reopen after Finalization",
            "decision": "Feature exists (same-day only) but NOT documented as separate UC",
            "reason": "Part of normal attendance management flow, covered by existing permissions",
            "status": "FINAL - Do not suggest adding separate UC for this"
          }
        ],
        "validation_and_constraints_clarifications": [
          {
            "item": "Password Reset Token Status Tracking",
            "decision": "NOT implemented - rely on expires_at only",
            "reason": "Token expiration is sufficient for security. No need for additional is_used or used_at fields. Tokens are single-use by design and expire quickly.",
            "status": "SKIP - Do not suggest adding status tracking fields"
          },
          {
            "item": "Camera Availability Validation on Slot Creation",
            "decision": "NOT implemented - no validation for room having cameras",
            "reason": "Cameras can be added after slot creation. Validation would be too restrictive for scheduling flexibility. System will handle missing cameras gracefully at runtime.",
            "status": "SKIP - Do not suggest adding camera availability validation"
          },
          {
            "item": "attendance_records.recorded_at Index",
            "decision": "NOT implemented - no index on recorded_at field",
            "reason": "No current use case requires querying by recorded_at. Existing indexes on slot_id and student_user_id are sufficient for current requirements.",
            "status": "SKIP - Do not suggest adding this index unless specific use case emerges"
          }
        ],
        "timezone_and_scheduling_clarifications": [
          {
            "item": "Daily Absence Calculation Job Timezone",
            "decision": "NOT explicitly documented in requirements",
            "reason": "Implementation detail to be determined during development. All database timestamps are UTC. Job scheduling timezone will be configured in deployment environment.",
            "status": "SKIP - Implementation detail, not a requirements concern"
          }
        ]
      },
      "to_be_discussed_or_backlog": [
        "Dashboard Design: Finalize KPIs displayed for each role",
        "Standardize reasons/forms: If upgrading 'Slot Announcement' to a standardized approval (request) flow in the future",
        "API Integration: Define scope/security/throttling/response format for planned endpoints",
        "Conflict resolution with external systems (SIS/LMS): Priority rules for data overwrite when importing",
        "Identity Re-registration details: Consider policy 'only 1 pending request per type' and related UX",
        "Mobile for Lecturers: Evaluate needs and scope if expanding",
        "Upgrade Backend-Service communication mechanism: Research and transition communication mechanism from 'Direct API Call' to 'Message Queue' (e.g., RabbitMQ) to increase reliability and scalability of the system when deployed at large scale"
      ],
      "notes": [
        "All data is managed and filtered by Semester",
        "The primary platform for Lecturers & Supervisors is Web. Mobile app development for these roles is being considered to optimize experience",
        "User accounts are created and managed directly in the system by Data Operator. Google login is used for email verification"
      ],
      "in_scope_functions": {
        "slot_interactions": "Lecturers/TAs add remarks to attendance records; Students view slot information."
      }
    },
    "database": {
      "tables": {
        "users": {
          "primary_key": "id",
          "description": "Core user accounts table",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique user identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "username": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Login username (Student ID or Employee ID)"
            },
            "email": {
              "type": "varchar(128)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "User email address"
            },
            "full_name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "User's full name"
            },
            "password_hash": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "Hashed password (nullable for Google-only accounts)"
            }
          }
        },
        "password_reset_tokens": {
          "primary_key": "id",
          "description": "Password reset tokens for account recovery",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique token identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Token creation timestamp"
            },
            "expires_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Token expiration timestamp"
            },
            "email": {
              "type": "varchar(128)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Email address for password reset"
            },
            "token_hash": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Hashed reset token"
            }
          }
        },
        "roles": {
          "primary_key": "id",
          "description": "System roles definition",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique role identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Role name (e.g., STUDENT, LECTURER, SYSTEM_ADMIN)"
            }
          }
        },
        "permissions": {
          "primary_key": "id",
          "description": "System permissions catalog",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique permission identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(100)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Permission name (e.g., USER_CREATE, SLOT_READ)"
            }
          }
        },
        "user_roles": {
          "primary_key": [
            "user_id",
            "role_id"
          ],
          "description": "Many-to-many relationship between users and roles",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user"
            },
            "role_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "roles",
                "column": "id"
              },
              "description": "Reference to role"
            }
          }
        },
        "role_permissions": {
          "primary_key": [
            "role_id",
            "permission_id"
          ],
          "description": "Many-to-many relationship between roles and permissions",
          "columns": {
            "role_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "roles",
                "column": "id"
              },
              "description": "Reference to role"
            },
            "permission_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "permissions",
                "column": "id"
              },
              "description": "Reference to permission"
            }
          }
        },
        "majors": {
          "primary_key": "id",
          "description": "Academic majors/programs",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique major identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Major name"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Major code"
            }
          }
        },
        "semesters": {
          "primary_key": "id",
          "description": "Academic semesters",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique semester identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Semester name"
            },
            "code": {
              "type": "varchar(10)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Semester code"
            },
            "start_date": {
              "type": "date",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Semester start date"
            },
            "end_date": {
              "type": "date",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Semester end date"
            }
          }
        },
        "subjects": {
          "primary_key": "id",
          "description": "Academic subjects/courses",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique subject identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Subject name"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Subject code"
            }
          }
        },
        "subject_majors": {
          "primary_key": [
            "subject_id",
            "major_id"
          ],
          "description": "Many-to-many relationship between subjects and majors",
          "columns": {
            "subject_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "subjects",
                "column": "id"
              },
              "description": "Reference to subject"
            },
            "major_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "majors",
                "column": "id"
              },
              "description": "Reference to major"
            }
          }
        },
        "classes": {
          "primary_key": "id",
          "description": "Class instances (subject + semester combination)",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique class identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "subject_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "subjects",
                "column": "id"
              },
              "description": "Reference to subject"
            },
            "semester_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "semesters",
                "column": "id"
              },
              "description": "Reference to semester"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Soft delete flag"
            },
            "code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Class code"
            }
          },
          "indexes": [
            {
              "name": "idx_classes_subject_semester_code",
              "columns": [
                "subject_id",
                "semester_id",
                "code"
              ],
              "unique": true,
              "description": "Unique constraint for class within subject and semester"
            },
            {
              "name": "idx_classes_semester_id",
              "columns": [
                "semester_id"
              ],
              "description": "For queries: all classes in a semester"
            },
            {
              "name": "idx_classes_subject_id",
              "columns": [
                "subject_id"
              ],
              "description": "For queries: all classes of a subject"
            }
          ]
        },
        "enrollments": {
          "primary_key": [
            "class_id",
            "student_user_id"
          ],
          "description": "Student enrollment in classes",
          "columns": {
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Enrollment creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Enrollment last update timestamp"
            },
            "class_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "classes",
                "column": "id"
              },
              "description": "Reference to class"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to student user"
            },
            "is_enrolled": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Enrollment status. When false, student is withdrawn from the class but historical attendance is preserved."
            }
          },
          "indexes": [
            {
              "name": "idx_enrollments_class_id_enrolled",
              "columns": [
                "class_id",
                "is_enrolled"
              ],
              "description": "For roster queries (enrolled students only)"
            },
            {
              "name": "idx_enrollments_student_user_id",
              "columns": [
                "student_user_id"
              ],
              "description": "For student's enrolled classes queries"
            }
          ],
          "notes": [
            "is_enrolled is NOT a soft delete flag. It represents enrollment/withdrawal status.",
            "is_enrolled = true: Student is actively enrolled and appears in roster",
            "is_enrolled = false: Student has withdrawn but historical attendance is preserved",
            "To query active roster: WHERE is_enrolled = true",
            "To query all enrollments (including withdrawn): No filter needed",
            "Difference from soft delete: Withdrawn students can be re-enrolled by setting is_enrolled = true",
            "When is_enrolled = false, student is withdrawn and hidden from roster but historical attendance is preserved (see BR-33)"
          ]
        },
        "student_profiles": {
          "primary_key": "user_id",
          "description": "Extended profile information for student users",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user account"
            },
            "major_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "majors",
                "column": "id"
              },
              "description": "Student's major/program"
            },
            "roll_number": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Student's unique roll number (e.g., HE180314)"
            }
          }
        },
        "staff_profiles": {
          "primary_key": "user_id",
          "description": "Extended profile information for staff users (lecturers, supervisors, etc.)",
          "columns": {
            "user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to user account"
            },
            "staff_code": {
              "type": "varchar(20)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Staff's unique employee code"
            }
          }
        },
        "rooms": {
          "primary_key": "id",
          "description": "Physical rooms/classrooms",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique room identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Room availability status"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Room name/identifier"
            },
            "location": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "Room location description"
            }
          }
        },
        "cameras": {
          "primary_key": "id",
          "description": "IP cameras installed in rooms for attendance monitoring",
          "columns": {
            "id": {
              "type": "SMALLINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique camera identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "room_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "rooms",
                "column": "id"
              },
              "description": "Room where camera is installed"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Camera operational status"
            },
            "name": {
              "type": "varchar(150)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Camera name/identifier"
            },
            "rtsp_url": {
              "type": "varchar(512)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "RTSP stream URL for video access"
            }
          }
        },
        "slots": {
          "primary_key": "id",
          "description": "Lecture or exam sessions",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique slot identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "start_time": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Slot start time"
            },
            "end_time": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Slot end time"
            },
            "finalized_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "Timestamp of the MOST RECENT finalization. NULL if slot has never been finalized. When slot is re-finalized, this value is updated to the new finalization timestamp (overwrites previous value). This field is used for quick queries (e.g., filtering finalized slots, calculating edit window cutoff). For complete audit trail including WHO finalized and all finalization history (first finalize, reopen, re-finalize), query operational_audit_logs table with target_entity='slot' and action_type IN ('FINALIZE', 'REOPEN')."
            },
            "class_id": {
              "type": "smallint",
              "constraints": [
                null
              ],
              "foreign_key": {
                "table": "classes",
                "column": "id"
              },
              "description": "Reference to class. This is NULL for independent final exam slots (slot_category = 'FINAL_EXAM')."
            },
            "semester_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "semesters",
                "column": "id"
              },
              "description": "Reference to semester. Required for all slots. For class-based slots, this is redundant but ensures consistency. For independent final exam slots (where class_id is NULL), this is the only link to a semester."
            },
            "room_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "rooms",
                "column": "id"
              },
              "description": "Room where slot takes place"
            },
            "staff_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Lecturer or supervisor responsible for the slot"
            },
            "slot_category": {
              "type": "ENUM('LECTURE', 'LECTURE_WITH_PT', 'FINAL_EXAM')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Category of slot: 'LECTURE' (regular lecture), 'LECTURE_WITH_PT' (lecture with progress test), or 'FINAL_EXAM' (final exam)"
            },
            "title": {
              "type": "varchar(255)",
              "constraints": [
                null
              ],
              "description": "The specific name of the slot, especially for an exam (e.g., 'Progress Test 1')."
            },
            "description": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "General notes or instructions for the slot, visible to participants."
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Slot status (cancelled slots marked inactive)"
            }
          },
          "indexes": [
            {
              "name": "idx_slots_class_id",
              "columns": [
                "class_id"
              ],
              "description": "For queries: get all slots for a class"
            },
            {
              "name": "idx_slots_semester_id",
              "columns": [
                "semester_id"
              ],
              "description": "For queries: get all slots in a semester, especially for independent exam slots."
            },
            {
              "name": "idx_slots_staff_user_id",
              "columns": [
                "staff_user_id"
              ],
              "description": "For lecturer schedule queries"
            },
            {
              "name": "idx_slots_room_id",
              "columns": [
                "room_id"
              ],
              "description": "For room utilization queries"
            },
            {
              "name": "idx_slots_start_time",
              "columns": [
                "start_time"
              ],
              "description": "For date range queries and schedule display"
            },
            {
              "name": "idx_slots_finalized_at",
              "columns": [
                "finalized_at"
              ],
              "description": "For filtering finalized vs pending slots"
            }
          ],
          "notes": [
            "slot_category determines slot behavior and available functions.",
            "LECTURE/LECTURE_WITH_PT slots must have a non-null class_id.",
            "FINAL_EXAM slots must have a null class_id and a non-null semester_id.",
            "Lecturers can update slot_category between LECTURE and LECTURE_WITH_PT.",
            "Cannot change to/from FINAL_EXAM (only DOP can manage).",
            "finalized_at tracks when attendance was completed by staff."
          ]
        },
        "attendance_records": {
          "primary_key": "id",
          "description": "Individual student attendance records for slots",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique attendance record identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "recorded_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "When attendance status was recorded"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to student"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Reference to slot"
            },
            "status": {
              "type": "ENUM('not_yet', 'present', 'absent')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Attendance status: 'not_yet', 'present', 'absent'"
            },
            "method": {
              "type": "ENUM('auto', 'manual', 'system_finalize')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "How status was determined: 'auto', 'manual', 'system_finalize'"
            }
          },
          "indexes": [
            {
              "name": "idx_attendance_records_student_slot",
              "columns": [
                "student_user_id",
                "slot_id"
              ],
              "unique": true,
              "description": "One attendance record per student per slot (also serves as query index)"
            },
            {
              "name": "idx_attendance_records_slot_id",
              "columns": [
                "slot_id"
              ],
              "description": "For queries: get all attendance records for a slot"
            },
            {
              "name": "idx_attendance_records_status",
              "columns": [
                "status"
              ],
              "description": "For filtering by status (e.g., count not_yet students)"
            }
          ],
          "notes": [
            "Status 'not_yet' is initial state before any attendance check",
            "Status 'present' indicates student was detected/marked present",
            "Status 'absent' is final absent status",
            "Method 'auto' for face recognition results",
            "Method 'manual' for lecturer/supervisor manual updates",
            "Method 'system_finalize' for batch status updates during finalization"
          ]
        },
        "regular_attendance_remarks": {
          "primary_key": "id",
          "description": "Additional comments/notes on regular attendance records (LECTURE slots)",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique remark identifier"
            },
            "attendance_record_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "attendance_records",
                "column": "id",
                "on_delete": "CASCADE"
              },
              "description": "Reference to regular attendance record"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Remark creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark last update timestamp"
            },
            "created_by_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Staff member who created the remark"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Remark status (soft delete)"
            },
            "remark": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark content/explanation"
            }
          },
          "indexes": [
            {
              "name": "idx_regular_attendance_remarks_record_id",
              "columns": [
                "attendance_record_id"
              ],
              "description": "For querying all remarks for a specific attendance record"
            },
            {
              "name": "idx_regular_attendance_remarks_created_by",
              "columns": [
                "created_by_user_id"
              ],
              "description": "For querying remarks created by a specific staff member"
            },
            {
              "name": "idx_regular_attendance_remarks_created_at",
              "columns": [
                "created_at"
              ],
              "description": "For chronological queries"
            }
          ],
          "notes": [
            "Used for explaining attendance status changes or special circumstances for regular lecture attendance.",
            "Multiple remarks can be added to the same attendance record.",
            "Remarks are required when manually changing attendance status.",
            "CASCADE delete ensures remarks are removed when attendance record is deleted."
          ]
        },
        "regular_attendance_evidences": {
          "primary_key": "id",
          "description": "Stores temporary evidence images for REGULAR attendance records (from 'attendance_records' table).",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique evidence identifier"
            },
            "attendance_record_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "foreign_key": {
                "table": "attendance_records",
                "column": "id"
              },
              "description": "Reference to the regular attendance record this image provides evidence for."
            },
            "image_url": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "URL/path to the stored evidence image file"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Timestamp when the evidence was captured"
            }
          },
          "notes": [
            "This table stores temporary data for LECTURE and LECTURE_WITH_PT slots.",
            "A scheduled job should periodically clean up old records from this table."
          ]
        },
        "exam_attendance_evidences": {
          "primary_key": "id",
          "description": "Stores temporary evidence images for EXAM attendance records (from 'exam_attendance' table).",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique evidence identifier"
            },
            "exam_attendance_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "foreign_key": {
                "table": "exam_attendance",
                "column": "id"
              },
              "description": "Reference to the exam attendance record this image provides evidence for."
            },
            "image_url": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "URL/path to the stored evidence image file"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Timestamp when the evidence was captured"
            }
          },
          "notes": [
            "This table stores temporary data for LECTURE_WITH_PT and FINAL_EXAM slots.",
            "A scheduled job should periodically clean up old records from this table."
          ]
        },
        "identity_submissions": {
          "primary_key": "id",
          "description": "Student identity registration and update requests",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique submission identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Submission creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Submission last update timestamp"
            },
            "reviewed_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When submission was reviewed (null if pending)"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Student submitting identity request"
            },
            "reviewed_by_user_id": {
              "type": "int",
              "constraints": [
                null
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Data operator who reviewed the submission"
            },
            "status": {
              "type": "ENUM('pending', 'approved', 'rejected')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Submission status: 'pending', 'approved', 'rejected'"
            },
            "submission_type": {
              "type": "ENUM('initial', 'update')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of submission: 'initial', 'update'"
            },
            "rejection_reason": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "Reason for rejection (required if status is 'rejected')"
            }
          },
          "indexes": [
            {
              "name": "idx_identity_submissions_status",
              "columns": [
                "status"
              ],
              "description": "For pending queue queries"
            },
            {
              "name": "idx_identity_submissions_student_user_id",
              "columns": [
                "student_user_id"
              ],
              "description": "For student identity history queries"
            },
            {
              "name": "idx_identity_submissions_reviewed_at",
              "columns": [
                "reviewed_at"
              ],
              "description": "For filtering reviewed vs pending submissions"
            }
          ],
          "notes": [
            "Initial submissions require both face video and face photo",
            "Update submissions only require face video",
            "Approved submissions trigger face embedding generation"
          ]
        },
        "identity_assets": {
          "primary_key": "id",
          "description": "Files uploaded as part of identity submissions",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique asset identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Asset creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Asset last update timestamp"
            },
            "submission_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "identity_submissions",
                "column": "id"
              },
              "description": "Reference to identity submission"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Asset status"
            },
            "asset_type": {
              "type": "ENUM('face_video', 'face_photo')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of asset: 'face_video' or 'face_photo'"
            },
            "storage_url": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "URL/path to stored file"
            }
          },
          "indexes": [
            {
              "name": "idx_identity_assets_submission_id",
              "columns": [
                "submission_id"
              ],
              "description": "For querying all assets belonging to a specific submission"
            },
            {
              "name": "idx_identity_assets_asset_type",
              "columns": [
                "asset_type"
              ],
              "description": "For filtering assets by type (face_video, face_photo)"
            },
            {
              "name": "idx_identity_assets_submission_type",
              "columns": [
                "submission_id",
                "asset_type"
              ],
              "description": "For querying specific asset types within a submission"
            }
          ],
          "notes": [
            "Each submission can have multiple assets",
            "Face videos are processed to generate embeddings",
            "Face photos are used for manual verification by data operators"
          ]
        },
        "face_embeddings": {
          "primary_key": "id",
          "description": "Vector embeddings generated from approved face videos for recognition",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique embedding identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Embedding creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Embedding last update timestamp"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Student this embedding belongs to"
            },
            "generated_from_asset_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "identity_assets",
                "column": "id"
              },
              "description": "Source asset used to generate this embedding"
            },
            "version": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Embedding version (incremented on updates)"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": false,
              "description": "Whether this embedding is currently used for recognition"
            },
            "embedding_vector": {
              "type": "vector(512)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "512-dimensional face embedding vector"
            }
          },
          "indexes": [
            {
              "name": "idx_face_embeddings_student_active",
              "columns": [
                "student_user_id"
              ],
              "where": "is_active = true",
              "unique": true,
              "description": "Ensure only one active embedding per student"
            },
            {
              "name": "idx_face_embeddings_vector",
              "type": "ivfflat",
              "columns": [
                "embedding_vector"
              ],
              "options": "lists = 100",
              "description": "For fast vector similarity search using IVFFlat algorithm. Parameter 'lists' should be adjusted based on data size: lists ≈ sqrt(total_rows). Current value (100) is suitable for ~10,000 students."
            }
          ],
          "notes": [
            "Requires pgvector extension for vector operations",
            "Only one embedding per student can be active at a time (enforced by unique index)",
            "Version is incremented with each identity update (see BR-32)",
            "Keep last 3 versions for audit and rollback purposes",
            "Vector similarity search is used for face recognition",
            "IVFFlat index performance tuning: Adjust 'lists' parameter as data grows. Rule of thumb: lists = sqrt(total_active_embeddings). Monitor query performance and rebuild index if needed."
          ]
        },
        "system_notifications": {
          "primary_key": "id",
          "description": "System-generated notifications for users",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique notification identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Notification creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Notification status"
            },
            "notification_type": {
              "type": "varchar(50)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of notification (e.g., 'identity_rejected', 'slot_cancelled')"
            },
            "title": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification title"
            },
            "content": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Notification content/message"
            }
          },
          "indexes": [
            {
              "name": "idx_system_notifications_type",
              "columns": [
                "notification_type"
              ],
              "description": "For filtering by notification type"
            }
          ],
          "notes": [
            "Template-based notifications generated by system events",
            "Delivered to specific users via notification_deliveries table"
          ]
        },
        "notification_deliveries": {
          "primary_key": "id",
          "description": "Delivery records for system notifications to specific users",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique delivery identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Delivery creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Delivery last update timestamp"
            },
            "read_at": {
              "type": "timestamp",
              "constraints": [
                null
              ],
              "description": "When user read the notification (null if unread)"
            },
            "notification_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "system_notifications",
                "column": "id"
              },
              "description": "Reference to system notification"
            },
            "recipient_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "User who should receive this notification"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Delivery status"
            }
          },
          "indexes": [
            {
              "name": "idx_notification_deliveries_recipient_unread",
              "columns": [
                "recipient_user_id",
                "read_at"
              ],
              "description": "For unread notification queries (WHERE read_at IS NULL)"
            },
            {
              "name": "idx_notification_deliveries_recipient_created",
              "columns": [
                "recipient_user_id",
                "created_at"
              ],
              "description": "For notification inbox ordered by date"
            }
          ],
          "notes": [
            "One delivery record per notification per recipient",
            "Tracks read status for each user individually",
            "Used to show unread counts and notification history"
          ]
        },
        "system_configurations": {
          "primary_key": "id",
          "description": "System-wide configuration settings",
          "columns": {
            "id": {
              "type": "INT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique configuration identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Configuration creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Configuration last update timestamp"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Configuration status"
            },
            "key": {
              "type": "varchar(255)",
              "constraints": [
                "NOT NULL",
                "UNIQUE"
              ],
              "description": "Configuration key/name"
            },
            "value": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Configuration value (can be JSON for complex settings)"
            },
            "description": {
              "type": "text",
              "constraints": [
                null
              ],
              "description": "Human-readable description of the configuration"
            }
          },
          "notes": [
            "Used for AI model settings, similarity thresholds, system behavior",
            "Only System Admins can modify these settings",
            "Values can be simple strings or JSON objects for complex configurations"
          ]
        },
        "operational_audit_logs": {
          "primary_key": "id",
          "description": "Audit trail for important business operations",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique audit log identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "When the action occurred"
            },
            "actor_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "User who performed the action"
            },
            "action_type": {
              "type": "ENUM('CREATE', 'UPDATE', 'DELETE', 'FINALIZE', 'REOPEN', 'APPROVE', 'REJECT', 'ACTIVATE', 'DEACTIVATE')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Type of action performed on the entity"
            },
            "target_entity": {
              "type": "ENUM('user', 'role', 'permission', 'semester', 'major', 'subject', 'class', 'slot', 'enrollment', 'attendance_record', 'exam_attendance', 'identity_submission', 'room', 'camera', 'system_config')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Entity type that was affected"
            },
            "target_id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL"
              ],
              "description": "ID of the affected entity"
            },
            "changes": {
              "type": "jsonb",
              "constraints": [
                null
              ],
              "description": "JSON object containing before/after values for changes"
            }
          },
          "indexes": [
            {
              "name": "idx_audit_logs_actor_user_id",
              "columns": [
                "actor_user_id"
              ],
              "description": "For queries: who did what"
            },
            {
              "name": "idx_audit_logs_target_entity_id",
              "columns": [
                "target_entity",
                "target_id"
              ],
              "description": "For queries: history of a specific entity"
            },
            {
              "name": "idx_audit_logs_created_at",
              "columns": [
                "created_at"
              ],
              "description": "For date range queries"
            },
            {
              "name": "idx_audit_logs_action_type",
              "columns": [
                "action_type"
              ],
              "description": "For filtering by action type"
            }
          ],
          "notes": [
            "Provides complete audit trail for compliance and debugging",
            "Records who did what, when, and what changed",
            "Especially important for attendance finalization actions",
            "Changes field contains structured data about what was modified"
          ]
        },
        "exam_attendance": {
          "primary_key": "id",
          "description": "Attendance records for exam component of slots (progress tests and final exams)",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique exam attendance identifier"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            },
            "recorded_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "When exam attendance status was recorded"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to student"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Reference to slot"
            },
            "status": {
              "type": "ENUM('not_yet', 'present', 'absent')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Exam attendance status: 'not_yet', 'present', 'absent'"
            },
            "method": {
              "type": "ENUM('auto', 'manual', 'system_finalize')",
              "constraints": [
                "NOT NULL"
              ],
              "description": "How status was determined: 'auto', 'manual', 'system_finalize'"
            }
          },
          "indexes": [
            {
              "name": "idx_exam_attendance_student_slot",
              "columns": [
                "student_user_id",
                "slot_id"
              ],
              "unique": true,
              "description": "One exam attendance record per student per slot"
            },
            {
              "name": "idx_exam_attendance_slot_id",
              "columns": [
                "slot_id"
              ],
              "description": "For queries: get all exam attendance records for a slot"
            },
            {
              "name": "idx_exam_attendance_status",
              "columns": [
                "status"
              ],
              "description": "For filtering by status"
            }
          ],
          "notes": [
            "Used for tracking attendance during exam component of slots",
            "For LECTURE_WITH_PT slots: Both attendance_records and exam_attendance exist",
            "For FINAL_EXAM slots: Only exam_attendance exists (no regular attendance_records)",
            "Status 'not_yet' is initial state before any attendance check",
            "Status 'present' indicates student was detected/marked present during exam",
            "Status 'absent' is final absent status for exam",
            "Method 'auto' for face recognition results",
            "Method 'manual' for lecturer/supervisor manual updates",
            "Method 'system_finalize' for batch status updates during finalization"
          ]
        },
        "exam_slot_subjects": {
          "primary_key": "id",
          "description": "Stores the list of subjects allowed to be tested in a specific FINAL_EXAM slot. This is step 1 in the student assignment workflow.",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique identifier for the slot-subject pair"
            },
            "slot_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "slots",
                "column": "id"
              },
              "description": "Reference to the FINAL_EXAM slot"
            },
            "subject_id": {
              "type": "smallint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "subjects",
                "column": "id"
              },
              "description": "Reference to the subject being tested in this slot"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Timestamp when the subject was added to the slot"
            }
          },
          "indexes": [
            {
              "name": "idx_exam_slot_subjects_slot_subject",
              "columns": [
                "slot_id",
                "subject_id"
              ],
              "unique": true,
              "description": "Ensures a subject can only be added once to a slot"
            },
            {
              "name": "idx_exam_slot_subjects_slot_id",
              "columns": [
                "slot_id"
              ],
              "description": "For fast queries of subjects within a slot"
            }
          ],
          "notes": [
            "This table is only used when slots.slot_category = 'FINAL_EXAM'.",
            "Data Operator must define these records BEFORE adding students."
          ]
        },
        "exam_slot_participants": {
          "primary_key": "id",
          "description": "Manages the assignment of students to a specific SUBJECT within a FINAL_EXAM slot. This is step 2, after subjects have been assigned to the slot via the 'exam_slot_subjects' table.",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique identifier for the student's exam participation"
            },
            "exam_slot_subject_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "exam_slot_subjects",
                "column": "id"
              },
              "description": "Reference to the (slot + subject) pair that this student is assigned to"
            },
            "student_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Reference to the student taking the exam"
            },
            "is_enrolled": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Participation status. If false, the student is withdrawn from this exam."
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Record creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Record last update timestamp"
            }
          },
          "indexes": [
            {
              "name": "idx_exam_participants_slot_subject_student",
              "columns": [
                "exam_slot_subject_id",
                "student_user_id"
              ],
              "unique": true,
              "description": "Ensures a student can only take a subject once per slot"
            },
            {
              "name": "idx_exam_participants_student_user_id",
              "columns": [
                "student_user_id"
              ],
              "description": "For querying all final exams a student is participating in"
            }
          ],
          "notes": [
            "This table is only used for FINAL_EXAM slots.",
            "Student assignment must follow business logic (e.g., student must be enrolled in that subject during the semester)."
          ]
        },
        "exam_attendance_remarks": {
          "primary_key": "id",
          "description": "Additional comments/notes on exam attendance records (LECTURE_WITH_PT and FINAL_EXAM slots)",
          "columns": {
            "id": {
              "type": "BIGINT",
              "constraints": [
                "NOT NULL",
                "PRIMARY KEY",
                "AUTO_INCREMENT"
              ],
              "description": "Unique remark identifier"
            },
            "exam_attendance_id": {
              "type": "bigint",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "exam_attendance",
                "column": "id",
                "on_delete": "CASCADE"
              },
              "description": "Reference to exam attendance record"
            },
            "created_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "default": "now()",
              "description": "Remark creation timestamp"
            },
            "updated_at": {
              "type": "timestamp",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark last update timestamp"
            },
            "created_by_user_id": {
              "type": "int",
              "constraints": [
                "NOT NULL"
              ],
              "foreign_key": {
                "table": "users",
                "column": "id"
              },
              "description": "Staff member who created the remark"
            },
            "is_active": {
              "type": "boolean",
              "constraints": [
                "NOT NULL"
              ],
              "default": true,
              "description": "Remark status (soft delete)"
            },
            "remark": {
              "type": "text",
              "constraints": [
                "NOT NULL"
              ],
              "description": "Remark content/explanation"
            }
          },
          "indexes": [
            {
              "name": "idx_exam_attendance_remarks_exam_id",
              "columns": [
                "exam_attendance_id"
              ],
              "description": "For querying all remarks for a specific exam attendance record"
            },
            {
              "name": "idx_exam_attendance_remarks_created_by",
              "columns": [
                "created_by_user_id"
              ],
              "description": "For querying remarks created by a specific staff member"
            },
            {
              "name": "idx_exam_attendance_remarks_created_at",
              "columns": [
                "created_at"
              ],
              "description": "For chronological queries"
            }
          ],
          "notes": [
            "Used for explaining exam attendance status changes or special circumstances.",
            "Multiple remarks can be added to the same exam attendance record.",
            "Remarks are required when manually changing exam attendance status.",
            "CASCADE delete ensures remarks are removed when exam attendance record is deleted."
          ]
        }
      },
      "notes": [
        "Each room can have multiple cameras for comprehensive coverage",
        "RTSP URLs must be unique to prevent conflicts in video stream access",
        "All active cameras in a room are automatically used for slots in that room",
        "Camera assignment is determined at runtime: SELECT * FROM cameras WHERE room_id = slot.room_id AND is_active = true"
      ],
      "extensions_required": [
        {
          "name": "pgvector",
          "description": "Required for storing and querying face embedding vectors",
          "tables": [
            "face_embeddings"
          ]
        }
      ],
      "communication_flow": [
        "System generates system_notifications for various events (identity rejection, absence warnings, etc.)",
        "notification_deliveries tracks which users receive which notifications",
        "Students see system notifications in their notification inbox"
      ],
      "example_configurations": [
        {
          "key": "face_recognition.similarity_threshold",
          "value": "0.85",
          "description": "Minimum similarity score for face recognition matches"
        },
        {
          "key": "attendance.max_absence_percentage",
          "value": "20",
          "description": "The maximum allowed absence percentage for students before being marked ineligible for the final exam."
        },
        {
          "key": "attendance.auto_finalize_hours",
          "value": "24",
          "description": "Hours after slot end time before auto-finalization"
        },
        {
          "key": "notification.email_enabled",
          "value": "true",
          "description": "Whether to send email notifications"
        }
      ],
      "example_audit_entries": [
        {
          "action_type": "FINALIZE",
          "target_entity": "slot",
          "target_id": 12345,
          "changes": "{\n  \"finalized_at\": {\n    \"before\": null,\n    \"after\": \"2024-10-16T14:30:00Z\"\n  },\n  \"attendance_updates\": [\n    {\n      \"student_id\": 67890,\n      \"status\": {\"before\": \"not_yet\", \"after\": \"absent\"}\n    }\n  ]\n}\n"
        },
        {
          "action_type": "UPDATE",
          "target_entity": "attendance_record",
          "target_id": 98765,
          "changes": "{\n  \"status\": {\n    \"before\": \"absent\",\n    \"after\": \"present\"\n  },\n  \"method\": {\n    \"before\": \"auto\",\n    \"after\": \"manual\"\n  },\n  \"reason\": \"Student provided valid excuse\"\n}"
        }
      ],
      "relationship_with_attendance_records": {
        "description": "exam_attendance is separate from attendance_records to track exam participation independently",
        "use_cases": {
          "regular_lecture": {
            "slot_category": "LECTURE",
            "tables_used": [
              "attendance_records",
              "regular_attendance_remarks"
            ],
            "description": "Only regular attendance is tracked"
          },
          "lecture_with_progress_test": {
            "slot_category": "LECTURE_WITH_PT",
            "tables_used": [
              "attendance_records",
              "regular_attendance_remarks",
              "exam_attendance",
              "exam_attendance_remarks"
            ],
            "description": "Both regular attendance and exam attendance are tracked separately with their own remarks"
          },
          "final_exam": {
            "slot_category": "FINAL_EXAM",
            "tables_used": [
              "exam_attendance",
              "exam_attendance_remarks"
            ],
            "description": "Only exam attendance is tracked (no regular attendance)"
          }
        }
      }
    },
    "requirements": {
      "metadata": {
        "version": "1.1",
        "total_business_rules": 40,
        "domains_covered": [
          "Authentication",
          "Roles",
          "Identity",
          "Academic",
          "Attendance",
          "System",
          "Audit",
          "Infrastructure"
        ],
        "last_updated": "2025-10-21",
        "total_use_cases": 85,
        "roles_covered": [
          "Student",
          "Lecturer",
          "Supervisor",
          "Data_Operator",
          "System_Admin"
        ]
      },
      "business_rules": {
        "authentication": {
          "BR-01": {
            "title": "Primary Login Identifier",
            "description": "The primary login identifier username for a user must be their Student ID (for Students) or Staff ID (for Staff).",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-34"
            ],
            "validation_points": [
              "User creation",
              "Login process"
            ]
          },
          "BR-02": {
            "title": "Google Login Email Lookup",
            "description": "When a user logs in via Google, the system must use the email address provided by Google to look up the corresponding user account.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01"
            ],
            "validation_points": [
              "Google OAuth callback"
            ]
          },
          "BR-03": {
            "title": "Inactive Account Access Denial",
            "description": "If a user account is found but is inactive (is_active = false), access must be denied.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-38"
            ],
            "validation_points": [
              "Login process",
              "Account status check"
            ]
          },
          "BR-04": {
            "title": "Unique Username and Email",
            "description": "Each username and email must be unique across the entire system.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-01",
              "UC-34"
            ],
            "validation_points": [
              "User creation",
              "User update"
            ]
          },
          "BR-05": {
            "title": "Role Assignment Constraints",
            "description": "A user with the STUDENT role cannot be concurrently assigned the LECTURER or SUPERVISOR role.",
            "domain": "Roles",
            "priority": "High",
            "related_use_cases": [
              "UC-34",
              "UC-37"
            ],
            "validation_points": [
              "Role assignment",
              "Role update"
            ]
          },
          "BR-06": {
            "title": "Password Reset Token Security",
            "description": "A password reset token must be unique, have an expiration time, and must be invalidated immediately after successful use.",
            "domain": "Authentication",
            "priority": "High",
            "related_use_cases": [
              "UC-04",
              "UC-05"
            ],
            "validation_points": [
              "Token generation",
              "Token validation",
              "Password reset"
            ]
          },
          "BR-07": {
            "title": "User Profile Requirement",
            "description": "A new user account must be linked to a specialized profile (student_profiles or staff_profiles) to define its specific attributes.",
            "domain": "User Management",
            "priority": "High",
            "related_use_cases": [
              "UC-34"
            ],
            "validation_points": [
              "User creation workflow"
            ]
          }
        },
        "identity_management": {
          "BR-08": {
            "title": "Initial Identity Registration Requirements",
            "description": "A student's identity registration request (both initial and update) must include a static face photo and a short face video.",
            "domain": "Identity",
            "priority": "High",
            "related_use_cases": [
              "UC-12",
              "UC-13"
            ],
            "validation_points": [
              "Identity submission creation"
            ]
          },
          "BR-09": {
            "title": "Manual Identity Approval",
            "description": "All identity registration or update requests must be manually approved by a user with the appropriate permissions (e.g., IDENTITY_SUBMISSION_APPROVE).",
            "domain": "Identity",
            "priority": "High",
            "related_use_cases": [
              "UC-12",
              "UC-13",
              "UC-39",
              "UC-40",
              "UC-41"
            ],
            "validation_points": [
              "Identity submission workflow"
            ]
          },
          "BR-10": {
            "title": "Pending Identity Update Handling",
            "description": "While an identity update request is pending approval, the system must continue to use the previously approved identity data for attendance checking.",
            "domain": "Identity",
            "priority": "Medium",
            "related_use_cases": [
              "UC-13"
            ],
            "validation_points": [
              "Face recognition process",
              "Identity update workflow"
            ]
          },
          "BR-11": {
            "title": "Identity Rejection Notification",
            "description": "When an identity submission is rejected, the system must automatically send a system notification to the student, stating the reason for rejection.",
            "domain": "Identity",
            "priority": "Medium",
            "related_use_cases": [
              "UC-11",
              "UC-41"
            ],
            "validation_points": [
              "Identity rejection workflow"
            ]
          }
        },
        "academic_catalog": {
          "BR-12": {
            "title": "Unique Academic Identifiers",
            "description": "Each Major, Subject, and Class must have a unique identifier (code or name).",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-42",
              "UC-46",
              "UC-50",
              "UC-54"
            ],
            "validation_points": [
              "Academic entity creation",
              "Academic entity update"
            ]
          },
          "BR-13": {
            "title": "Single Class Enrollment",
            "description": "A student can only be enrolled in a specific class once.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-62"
            ],
            "validation_points": [
              "Student enrollment"
            ]
          },
          "BR-14": {
            "title": "Enrollment History Preservation",
            "description": "When a student is unenrolled from a class (enrollments.is_enrolled = false), they must not appear in the roster for future slots of that class, but their past attendance history must be preserved.",
            "domain": "Academic",
            "priority": "Medium",
            "related_use_cases": [
              "UC-63"
            ],
            "validation_points": [
              "Student unenrollment",
              "Roster generation",
              "Attendance history queries"
            ]
          },
          "BR-15": {
            "title": "Slot Room Assignment",
            "description": "Each lecture/exam slot must be associated with a specific room.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-25",
              "UC-58",
              "UC-60"
            ],
            "validation_points": [
              "Slot creation",
              "Slot update"
            ]
          },
          "BR-16": {
            "title": "Camera Room Validation",
            "description": "All active cameras in the slot's assigned room are automatically used for attendance monitoring. No manual camera selection is required.",
            "domain": "Infrastructure",
            "priority": "High",
            "related_use_cases": [
              "UC-25",
              "UC-58",
              "UC-60"
            ],
            "validation_points": [
              "Slot creation",
              "Camera availability check"
            ]
          },
          "BR-17": {
            "title": "Single Staff Assignment",
            "description": "Each lecture/exam slot must be assigned to one and only one staff member (Lecturer or Supervisor) at a time.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-25",
              "UC-28",
              "UC-58",
              "UC-60"
            ],
            "validation_points": [
              "Slot creation",
              "Slot update",
              "Staff assignment"
            ]
          }
        },
        "attendance_management": {
          "BR-18": {
            "title": "Attendance Session Authorization",
            "description": "An automated attendance session can only be initiated by the staff member assigned to that slot who has the SLOT_SESSION_START permission.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-28"
            ],
            "validation_points": [
              "Session initiation",
              "Permission check"
            ]
          },
          "BR-19": {
            "title": "Face Recognition Status Update",
            "description": "When a face is recognized, the system updates the student's attendance status to PRESENT. The final status and timestamp are recorded in the attendance record.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-16",
              "UC-17",
              "UC-29"
            ],
            "validation_points": [
              "Face recognition processing",
              "Status update logic"
            ]
          },
          "BR-20": {
            "title": "Unrecognized Face Handling",
            "description": "If a face is not recognized, the system takes no action, and the student's attendance status remains unchanged during that scan.",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-16"
            ],
            "validation_points": [
              "Face recognition processing"
            ]
          },
          "BR-21": {
            "title": "Finalization Rules Setup",
            "description": "When finalizing a slot, the system must display a 'Finalization Rules Setup' screen. The lecturer must then make a bulk decision for each group of students with intermediate status (e.g., NOT_YET) to convert their final status to either PRESENT or ABSENT.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-32"
            ],
            "validation_points": [
              "Slot finalization workflow"
            ]
          },
          "BR-22": {
            "title": "Same-Day Edit Window",
            "description": "The assigned Lecturer/Supervisor can manually edit the attendance results for a slot until 23:59:59 UTC on the day of the slot (based on slot.start_time date in UTC).",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-19",
              "UC-30"
            ],
            "validation_points": [
              "Attendance edit authorization",
              "Time-based access control"
            ]
          },
          "BR-23": {
            "title": "Post-Day Edit Restrictions",
            "description": "After 23:59:59 UTC on the day of the slot (based on slot.start_time date in UTC), only a user with permissions such as ATTENDANCE_STATUS_UPDATE_MANUAL can edit the attendance results, typically a Data Operator.",
            "domain": "Attendance",
            "priority": "Medium",
            "related_use_cases": [
              "UC-19",
              "UC-30"
            ],
            "validation_points": [
              "Attendance edit authorization",
              "Time-based access control"
            ]
          },
          "BR-24": {
            "title": "Unique Attendance Record",
            "description": "An attendance record for a student in a specific slot must be unique.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-15",
              "UC-16",
              "UC-28"
            ],
            "validation_points": [
              "Attendance record creation"
            ]
          }
        },
        "system_administration": {
          "BR-25": {
            "title": "System Configuration Permissions",
            "description": "Actions to modify core system configurations and manage role-permission mappings must be protected by distinct permissions (e.g., SYSTEM_CONFIG_UPDATE, ROLE_PERMISSION_MAPPING_UPDATE). By default, these permissions are granted only to the SYSTEM_ADMIN role.",
            "domain": "System",
            "priority": "Critical",
            "related_use_cases": [
              "UC-80",
              "UC-81",
              "UC-84",
              "UC-85"
            ],
            "validation_points": [
              "System configuration access",
              "Role-permission management"
            ]
          },
          "BR-26": {
            "title": "User Management Permissions",
            "description": "User account management (creating, updating, assigning roles, etc.) must be controlled by a granular set of permissions (e.g., USER_CREATE, USER_UPDATE_STATUS, USER_ASSIGN_ROLES). By default, these permissions are granted to the DATA_OPERATOR role.",
            "domain": "User Management",
            "priority": "High",
            "related_use_cases": [
              "UC-34",
              "UC-35",
              "UC-36",
              "UC-37",
              "UC-38"
            ],
            "validation_points": [
              "User management operations",
              "Permission validation"
            ]
          },
          "BR-27": {
            "title": "Audit Trail Requirement",
            "description": "Critical business data changes (e.g., finalizing attendance, updating student information) must be logged in the operational audit trail (operational_audit_logs).",
            "domain": "Audit",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-25",
              "UC-26",
              "UC-32",
              "UC-36",
              "UC-37",
              "UC-38",
              "UC-40",
              "UC-41",
              "UC-44",
              "UC-45",
              "UC-48",
              "UC-49",
              "UC-52",
              "UC-53",
              "UC-56",
              "UC-57",
              "UC-60",
              "UC-61",
              "UC-63",
              "UC-68",
              "UC-69",
              "UC-72",
              "UC-73",
              "UC-78",
              "UC-79",
              "UC-81",
              "UC-85"
            ],
            "validation_points": [
              "All critical data modifications"
            ]
          }
        },
        "attendance_data_integrity": {
          "BR-28": {
            "title": "Manual Edit Remark Requirement",
            "description": "Any manual edit of a student's attendance status requires a non-empty remark explaining the reason for the change. The system must prevent saving the change if the remark is empty.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-19",
              "UC-20",
              "UC-30",
              "UC-31"
            ],
            "validation_points": [
              "Manual status update",
              "Remark validation"
            ]
          },
          "BR-29": {
            "title": "Final Status Requirement",
            "description": "After a slot is finalized, the primary status for all attendance records must be either PRESENT or ABSENT.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-21",
              "UC-32"
            ],
            "validation_points": [
              "Slot finalization",
              "Status validation"
            ]
          },
          "BR-30": {
            "title": "Hard Delete Dependency Check",
            "description": "Any request to permanently delete a resource (e.g., Major, Semester, Room) must be rejected with a user-friendly error message if the resource has dependent child resources (e.g., Subjects, Classes, Cameras).",
            "domain": "Data Integrity",
            "priority": "Critical",
            "related_use_cases": [
              "UC-45",
              "UC-49",
              "UC-53",
              "UC-57",
              "UC-61",
              "UC-69",
              "UC-73"
            ],
            "validation_points": [
              "All hard delete operations in the backend services"
            ]
          }
        },
        "attendance_status_management": {
          "BR-31": {
            "title": "Attendance Status Transition Rules",
            "description": "Defines valid state transitions for attendance records and time-based edit restrictions. Before finalization, all transitions are allowed. After finalization, assigned staff can edit until 23:59:59 UTC of the slot date. After that, only Data Operators can edit.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-19",
              "UC-21",
              "UC-30",
              "UC-32"
            ],
            "validation_points": [
              "Attendance edit API",
              "Permission middleware",
              "Time-based access control"
            ],
            "rules": {
              "valid_transitions": {
                "before_finalization": [
                  "not_yet → present (auto or manual)",
                  "not_yet → absent (manual only)",
                  "present → absent (manual with remark)",
                  "absent → present (manual with remark)"
                ],
                "after_finalization_same_day": [
                  "All transitions allowed until 23:59:59 UTC of slot date",
                  "Must have ATTENDANCE_STATUS_UPDATE_MANUAL permission",
                  "Remark is mandatory for all manual changes"
                ],
                "after_finalization_next_day": [
                  "Lecturer/Supervisor: NO edit permission",
                  "Data Operator: Can edit with appropriate permissions",
                  "All changes must be logged in operational_audit_logs"
                ]
              },
              "time_boundary": {
                "calculation": "Based on slot.start_time date in server timezone (UTC)",
                "cutoff": "23:59:59 UTC of the slot date",
                "example": "If slot starts 2024-10-19 14:00 UTC, edit window closes 2024-10-19 23:59:59 UTC"
              }
            }
          },
          "BR-32": {
            "title": "Face Embedding Version Management",
            "description": "Rules for managing face embedding versions when identity is updated. Each approved identity submission generates a new embedding with incremented version. Only one embedding per student can be active at a time.",
            "domain": "Identity",
            "priority": "High",
            "related_use_cases": [
              "UC-12",
              "UC-13",
              "UC-40"
            ],
            "validation_points": [
              "Identity approval workflow",
              "Face recognition query"
            ],
            "rules": {
              "version_increment": [
                "Each approved identity submission generates a new embedding with version = max(version) + 1",
                "Initial registration: version = 1",
                "First update: version = 2, etc."
              ],
              "active_embedding": [
                "Only ONE embedding per student can have is_active = true",
                "When new embedding is approved, old embedding is set to is_active = false",
                "System uses only the active embedding for face recognition"
              ],
              "retention_policy": [
                "Keep last 3 versions for audit and rollback purposes",
                "Older versions can be archived or deleted after 1 year"
              ]
            }
          }
        },
        "academic_data_management": {
          "BR-33": {
            "title": "Class Enrollment Status and Roster Visibility",
            "description": "When generating a roster for a class-based slot (LECTURE, LECTURE_WITH_PT), only include students where enrollments.is_enrolled = true. Historical attendance records are preserved even after unenrollment. This rule does not apply to independent final exams.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-29",
              "UC-62",
              "UC-63"
            ],
            "validation_points": [
              "Roster query API",
              "Attendance record creation",
              "Student unenrollment workflow"
            ],
            "rules": {
              "roster_generation": [
                "When generating roster for a slot, only include students where enrollments.is_enrolled = true",
                "This applies to ALL slots, regardless of their status (upcoming, ongoing, finalized)"
              ],
              "attendance_record_handling": [
                "If attendance_record already exists before unenrollment, it is preserved (not deleted)",
                "Student will not appear in roster UI, but their historical record remains in database",
                "Reports can still show historical attendance for unenrolled students"
              ],
              "edge_case_handling": [
                "If student is unenrolled AFTER slot is finalized, their attendance record is preserved",
                "If student is unenrolled BEFORE slot starts, no attendance record is created"
              ]
            }
          },
          "BR-34": {
            "title": "Slot Category Validation and Roster Logic",
            "description": "Defines the core validation logic for creating/updating slots and determines the source of the student roster. This logic must be enforced at the application layer.",
            "domain": "Academic",
            "priority": "Critical",
            "related_use_cases": [
              "UC-24",
              "UC-25",
              "UC-26",
              "UC-58",
              "UC-60"
            ],
            "validation_points": [
              "Slot creation API",
              "Slot update API",
              "Attendance processing logic"
            ],
            "rules": {
              "class_based_slots": {
                "categories": [
                  "LECTURE",
                  "LECTURE_WITH_PT"
                ],
                "validation": "The 'class_id' field MUST NOT be NULL.",
                "roster_source": "The student roster is derived from the 'enrollments' table based on the slot's 'class_id'."
              },
              "independent_exam_slots": {
                "categories": [
                  "FINAL_EXAM"
                ],
                "validation": "The 'class_id' field MUST be NULL, and the 'semester_id' field MUST NOT be NULL.",
                "roster_source": "The student roster is derived from the 'exam_slot_participants' table based on the slot's 'id'."
              }
            }
          },
          "BR-35": {
            "title": "Lecturer Can Update Slot Category",
            "description": "Lecturers can update slot_category between LECTURE and LECTURE_WITH_PT for their assigned slots, subject to certain constraints.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-24",
              "UC-25",
              "UC-26"
            ],
            "validation_points": [
              "Slot update API"
            ],
            "rules": {
              "can_update_category_if": [
                "Slot belongs to lecturer's assigned class",
                "Slot has not been finalized yet",
                "Current user has SLOT_UPDATE_CATEGORY permission",
                "Update is between LECTURE and LECTURE_WITH_PT only"
              ],
              "can_change_to_lecture_with_pt": [
                "Current slot_category is 'LECTURE'",
                "All general conditions above are met"
              ],
              "can_change_to_lecture": [
                "Current slot_category is 'LECTURE_WITH_PT'",
                "No exam_attendance records exist for this slot",
                "All general conditions above are met"
              ],
              "cannot_update_if": [
                "Slot category is 'FINAL_EXAM' (only DOP can manage)",
                "Trying to change to/from 'FINAL_EXAM'",
                "Slot already finalized",
                "Slot is in the past (after 23:59:59 UTC of slot date)",
                "Exam attendance records exist (for LECTURE_WITH_PT → LECTURE)"
              ]
            }
          }
        },
        "time_based_rules": {
          "BR-36": {
            "title": "Time-Based Edit Window Calculation",
            "description": "Defines how the 23:59:59 cutoff time is calculated for attendance editing. All timestamps are in UTC, cutoff is based on slot start_time date.",
            "domain": "Attendance",
            "priority": "High",
            "related_use_cases": [
              "UC-19",
              "UC-21",
              "UC-30",
              "UC-32"
            ],
            "validation_points": [
              "Attendance edit API",
              "Permission middleware"
            ],
            "rules": {
              "timezone_standard": [
                "All timestamps stored in database are in UTC",
                "Edit window cutoff is calculated based on slot.start_time date in UTC",
                "UI displays times in user's local timezone for convenience"
              ],
              "cutoff_calculation": [
                "Extract date from slot.start_time (in UTC)",
                "Cutoff = {slot_date} 23:59:59 UTC",
                "Example: slot starts 2024-10-19 14:00:00 UTC → cutoff is 2024-10-19 23:59:59 UTC"
              ],
              "permission_check_logic": [
                "When user attempts to edit attendance:",
                "1. Check if user is assigned staff (staff_user_id = current_user_id)",
                "2. Check if current_time <= slot_date 23:59:59 UTC",
                "3. If both true: allow edit",
                "4. If time expired: check if user has DATA_OPERATOR role",
                "5. If DATA_OPERATOR: allow edit, else deny"
              ]
            }
          }
        },
        "bulk_operations": {
          "BR-37": {
            "title": "Bulk Class Enrollment CSV Format and Validation",
            "description": "Defines the CSV file format and validation rules for bulk student enrollment into classes. This rule does not apply to independent final exams.",
            "domain": "Academic",
            "priority": "Medium",
            "related_use_cases": [
              "UC-79"
            ],
            "validation_points": [
              "CSV upload API",
              "Bulk enrollment processing"
            ],
            "csv_format": {
              "encoding": "UTF-8 with BOM (for Excel compatibility)",
              "delimiter": "comma (,)",
              "header_row": "Required (first row)",
              "columns": [
                {
                  "name": "student_id",
                  "type": "string",
                  "required": true,
                  "description": "Student's username (Student ID)"
                },
                {
                  "name": "class_code",
                  "type": "string",
                  "required": true,
                  "description": "Class code (not class_id)"
                },
                {
                  "name": "semester_code",
                  "type": "string",
                  "required": true,
                  "description": "Semester code to identify the class"
                }
              ]
            },
            "validation_rules": {
              "file_level": [
                "File size must not exceed 5MB",
                "Maximum 10,000 rows (excluding header)",
                "Must have exactly 3 columns",
                "Header row must match exactly: student_id,class_code,semester_code"
              ],
              "row_level": [
                "student_id must exist in users table and have STUDENT role",
                "class_code + semester_code must uniquely identify a class",
                "Student must not already be enrolled in the class",
                "Student must be active (users.is_active = true)",
                "Class must be active (classes.is_active = true)"
              ],
              "duplicate_handling": [
                "Within file: If same student_id + class_code appears multiple times, keep first occurrence and warn",
                "With database: If enrollment already exists, skip and report as warning (not error)"
              ],
              "error_reporting": [
                "PARTIAL SUCCESS strategy: Import valid rows, skip invalid rows",
                "Return 200 with summary even if some rows failed",
                "Provide detailed error list for failed rows",
                "Provide warning list for skipped rows (duplicates, already enrolled)"
              ]
            }
          },
          "BR-38": {
            "title": "Exam Slot Participant Uniqueness",
            "description": "A student can only be added to the participant list of a specific independent final exam slot once.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-64",
              "UC-65"
            ],
            "validation_points": [
              "Exam participant creation",
              "Bulk exam participant import"
            ]
          },
          "BR-39": {
            "title": "Exam Participant Roster Visibility",
            "description": "When generating the roster for an independent final exam slot (slot_category = 'FINAL_EXAM'), the system must only include students from the 'exam_slot_participants' table who are linked to that slot_id and have their 'is_enrolled' status set to true.",
            "domain": "Academic",
            "priority": "High",
            "related_use_cases": [
              "UC-29",
              "UC-64"
            ],
            "validation_points": [
              "Roster query API for exam slots",
              "Exam attendance processing"
            ]
          },
          "BR-40": {
            "title": "Bulk Exam Participant CSV Format and Validation",
            "description": "Defines the CSV file format and validation rules for bulk registering participants to an independent final exam slot. This file assigns students to specific subjects within that slot.",
            "domain": "Academic",
            "priority": "Medium",
            "related_use_cases": [
              "UC-65"
            ],
            "validation_points": [
              "CSV upload API for exam participants",
              "Bulk exam participant processing"
            ],
            "csv_format": {
              "encoding": "UTF-8 with BOM",
              "delimiter": "comma (,)",
              "header_row": "Required (first row)",
              "columns": [
                {
                  "name": "student_id",
                  "type": "string",
                  "required": true,
                  "description": "Student's username (Student ID)"
                },
                {
                  "name": "subject_code",
                  "type": "string",
                  "required": true,
                  "description": "Subject code that the student will take the exam for"
                }
              ]
            },
            "validation_rules": {
              "pre_upload": "The Data Operator must select a target independent final exam slot before uploading the file.",
              "file_level": [
                "File size must not exceed 1MB",
                "Maximum 5,000 rows (excluding header)",
                "Must have exactly 2 columns",
                "Header row must match exactly: student_id,subject_code"
              ],
              "row_level": [
                "student_id must exist in users table and have STUDENT role",
                "subject_code must exist in subjects table",
                "The pair (slot_id, subject_id) must exist in exam_slot_subjects table (i.e., the subject has been assigned to this slot)",
                "Business constraint: Student must be enrolled (is_enrolled=true) in a class of that subject (subject_id) within the same semester (semester_id) as the exam slot",
                "Student must not already be a participant for this subject in this slot",
                "Student must be active (users.is_active = true)"
              ],
              "duplicate_handling": [
                "Within file: If same (student_id, subject_code) pair appears multiple times, keep first occurrence and warn",
                "With database: If participant already exists for that subject in the slot, skip and report as warning (not error)"
              ],
              "error_reporting": [
                "PARTIAL SUCCESS strategy: Import valid rows, skip invalid rows",
                "Return 200 with summary even if some rows failed",
                "Provide detailed error list for failed rows",
                "Provide warning list for skipped rows (duplicates, already enrolled)"
              ]
            }
          }
        }
      },
      "rule_relationships": {
        "authentication_flow": {
          "primary_rules": [
            "BR-01",
            "BR-02",
            "BR-03",
            "BR-04"
          ],
          "description": "Rules governing user authentication and account validation"
        },
        "identity_workflow": {
          "primary_rules": [
            "BR-08",
            "BR-09",
            "BR-10",
            "BR-11"
          ],
          "description": "Rules for identity registration and approval process"
        },
        "attendance_lifecycle": {
          "primary_rules": [
            "BR-18",
            "BR-19",
            "BR-21",
            "BR-28",
            "BR-29",
            "BR-31",
            "BR-36",
            "BR-37"
          ],
          "description": "Rules governing the complete attendance management lifecycle"
        },
        "data_integrity": {
          "primary_rules": [
            "BR-12",
            "BR-13",
            "BR-24",
            "BR-27"
          ],
          "description": "Rules ensuring data consistency and audit trail"
        },
        "academic_data_management": {
          "primary_rules": [
            "BR-34",
            "BR-35",
            "BR-38",
            "BR-39",
            "BR-40"
          ],
          "description": "Rules for academic data management including slot categories, lecturer permissions, and exam participant management"
        },
        "permission_control": {
          "primary_rules": [
            "BR-05",
            "BR-25",
            "BR-26"
          ],
          "description": "Rules controlling access and permission management"
        }
      },
      "validation_requirements": {
        "critical_validations": [
          {
            "rule": "BR-01",
            "validation_type": "Format validation",
            "implementation": "Username format check against Student/Staff ID pattern"
          },
          {
            "rule": "BR-05",
            "validation_type": "Business logic validation",
            "implementation": "Role compatibility check before assignment"
          },
          {
            "rule": "BR-21",
            "validation_type": "Workflow validation",
            "implementation": "Finalization rules UI with mandatory status conversion"
          },
          {
            "rule": "BR-27",
            "validation_type": "Audit validation",
            "implementation": "Automatic audit log creation for critical operations"
          },
          {
            "rule": "BR-28",
            "validation_type": "Input validation",
            "implementation": "Non-empty remark validation for manual attendance edits"
          }
        ],
        "runtime_validations": [
          {
            "rule": "BR-16",
            "validation_type": "Referential integrity",
            "implementation": "Camera-room relationship validation during slot creation"
          }
        ]
      },
      "use_cases_specification": {
        "version": "1.1",
        "project": "FUACS"
      },
      "use_cases": {
        "authentication": {
          "UC-01": {
            "title": "Authenticate to System",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to log in using either their Username/Password or a linked Google account. The system validates the credentials before granting access.",
            "related_business_rules": [
              "BR-01",
              "BR-02",
              "BR-03",
              "BR-04"
            ]
          },
          "UC-02": {
            "title": "Logout",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "Allows an authenticated user to securely end their session and return to the Login screen.",
            "related_business_rules": []
          },
          "UC-03": {
            "title": "View Role-Specific Dashboard",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "After login, the system displays a personalized dashboard with key information and shortcuts relevant to the user's role.",
            "related_business_rules": []
          },
          "UC-04": {
            "title": "Request Password Reset",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to initiate the password reset process by submitting their registered email address from the Login screen to receive a reset link.",
            "related_business_rules": [
              "BR-06"
            ]
          },
          "UC-05": {
            "title": "Reset Password using Token",
            "primary_actors": [
              "All Users"
            ],
            "secondary_actors": [],
            "description": "Allows a user to set a new password by following the secure link sent to their email and successfully validating the reset token.",
            "related_business_rules": [
              "BR-06"
            ]
          },
          "UC-06": {
            "title": "Change Own Password",
            "primary_actors": [
              "All Authenticated Users"
            ],
            "secondary_actors": [],
            "description": "Allows a logged-in user to change their current password by providing their old password and a new one, typically via their Profile screen.",
            "related_business_rules": []
          }
        },
        "student": {
          "UC-07": {
            "title": "View Personal Schedule",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view their personal class and exam schedule for a selected semester. The schedule is aggregated from two sources: slots belonging to classes the student is enrolled in, and independent final exam slots the student is directly registered for.",
            "related_business_rules": []
          },
          "UC-08": {
            "title": "View Slot Details",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view detailed information for a specific slot from their schedule.",
            "related_business_rules": []
          },
          "UC-09": {
            "title": "View Personal Profile",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view and manage their personal profile information.",
            "related_business_rules": []
          },
          "UC-10": {
            "title": "View Attendance History",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view their own attendance history for past slots.",
            "related_business_rules": []
          },
          "UC-11": {
            "title": "View Notifications",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [],
            "description": "Allows a student to view a feed of notifications, including system alerts and absence rate warnings.",
            "related_business_rules": [
              "BR-11"
            ]
          },
          "UC-12": {
            "title": "Initiate Identity Registration",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [
              "Data Operator"
            ],
            "description": "Allows a new student to submit their identity credentials (a static face photo and a short face video) for verification by a Data Operator.",
            "related_business_rules": [
              "BR-08",
              "BR-09"
            ]
          },
          "UC-13": {
            "title": "Request Identity Update",
            "primary_actors": [
              "Student"
            ],
            "secondary_actors": [
              "Data Operator"
            ],
            "description": "Allows a student to submit a request to update their identity profile by providing a new static face photo and a new face video. The request is routed to a Data Operator for approval.",
            "related_business_rules": [
              "BR-08",
              "BR-09",
              "BR-10",
              "BR-11"
            ]
          }
        },
        "lecturer": {
          "UC-14": {
            "title": "View Teaching Schedule",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view their personal teaching and supervision schedule for a selected semester.",
            "related_business_rules": []
          },
          "UC-15": {
            "title": "Initiate Attendance Session",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to start the first automated attendance scan for a slot. This action activates all cameras in the room.",
            "related_business_rules": [
              "BR-17",
              "BR-18"
            ]
          },
          "UC-16": {
            "title": "Perform Re-scan during Session",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to trigger a new attendance scan while a session is active. The system will update student statuses based on the latest recognition results.",
            "related_business_rules": [
              "BR-19",
              "BR-20"
            ]
          },
          "UC-17": {
            "title": "Monitor Real-Time Roster",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view the class roster for an active session, where statuses are updated in real-time based on results from all assigned cameras.",
            "related_business_rules": [
              "BR-19"
            ]
          },
          "UC-18": {
            "title": "View Attendance Status",
            "primary_actors": [
              "Lecturer",
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows the assigned staff to view the current attendance status for a specific student within a slot.",
            "related_business_rules": []
          },
          "UC-19": {
            "title": "Manually Update Attendance Status",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to manually override a student's attendance status for a slot before finalization. A non-empty remark explaining the reason for the change is mandatory.",
            "related_business_rules": [
              "BR-22",
              "BR-23",
              "BR-28"
            ]
          },
          "UC-20": {
            "title": "Add/Edit Attendance Remark",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to add or modify a remark for a student's attendance record within a slot.",
            "related_business_rules": [
              "BR-28"
            ]
          },
          "UC-21": {
            "title": "Finalize Attendance Session",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to end the attendance session. The system will display a 'Finalization Rules Setup' screen for the lecturer to make bulk decisions on converting intermediate statuses (e.g., Not Yet) to a final status (Present or Absent).",
            "related_business_rules": [
              "BR-21",
              "BR-27",
              "BR-29"
            ]
          },
          "UC-22": {
            "title": "Export Slot Attendance Report",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to export a detailed attendance report for a finalized lecture slot.",
            "related_business_rules": []
          },
          "UC-23": {
            "title": "View Class Attendance Summary Report",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to view and export a summary attendance report for an entire class over a semester, which includes each student's absence rate and exam eligibility status based on the system-configured threshold. This report is only accessible after all slots for the class have been finalized.",
            "related_business_rules": []
          },
          "UC-24": {
            "title": "Change Slot Category to Include Progress Test",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to change the category of an existing slot from 'LECTURE' to 'LECTURE_WITH_PT'. This action signifies adding a progress test component to a regular lecture session.",
            "related_business_rules": [
              "BR-34",
              "BR-35"
            ]
          },
          "UC-25": {
            "title": "Update Lecture Slot Details",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to update details of a lecture slot they are responsible for. Can update: time, room, title, description, and slot_category (between LECTURE and LECTURE_WITH_PT). Cannot change: slot_category to/from FINAL_EXAM. Updating slot_category is subject to constraints defined in BR-35.",
            "related_business_rules": [
              "BR-15",
              "BR-16",
              "BR-17",
              "BR-27",
              "BR-34",
              "BR-35"
            ]
          },
          "UC-26": {
            "title": "Change Slot Category to Remove Progress Test",
            "primary_actors": [
              "Lecturer"
            ],
            "secondary_actors": [],
            "description": "Allows a lecturer to change the category of a slot from 'LECTURE_WITH_PT' back to 'LECTURE', provided that no exam attendance records exist for that slot.",
            "related_business_rules": [
              "BR-27",
              "BR-34",
              "BR-35"
            ]
          }
        },
        "supervisor": {
          "UC-27": {
            "title": "View Supervision Schedule",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to view their personal supervision schedule for assigned exam slots. For class-based slots, this includes slots from their assigned classes. For independent final exams, this includes slots they are directly assigned to.",
            "related_business_rules": []
          },
          "UC-28": {
            "title": "Initiate Attendance Session",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to start the first automated attendance scan for an exam slot. This action activates all cameras in the room.",
            "related_business_rules": [
              "BR-17",
              "BR-18"
            ]
          },
          "UC-29": {
            "title": "Monitor Real-Time Roster",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to view the exam roster for an active session, where statuses are updated in real-time based on results from all assigned cameras. The system dynamically fetches the roster from either class enrollments (for LECTURE_WITH_PT) or independent exam participants (for FINAL_EXAM).",
            "related_business_rules": [
              "BR-19"
            ]
          },
          "UC-30": {
            "title": "Manually Update Attendance Status",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to manually override a candidate's attendance status for an exam slot before finalization. A non-empty remark explaining the reason for the change is mandatory.",
            "related_business_rules": [
              "BR-22",
              "BR-23",
              "BR-28"
            ]
          },
          "UC-31": {
            "title": "Add/Edit Attendance Remark",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to add or modify a remark for a candidate's attendance record within an exam slot.",
            "related_business_rules": [
              "BR-28"
            ]
          },
          "UC-32": {
            "title": "Finalize Attendance Session",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to end the attendance session. The system will display a 'Finalization Rules Setup' screen for the supervisor to make bulk decisions on converting intermediate statuses (e.g., Not Yet) to a final status (Present or Absent).",
            "related_business_rules": [
              "BR-21",
              "BR-27",
              "BR-29"
            ]
          },
          "UC-33": {
            "title": "Export Exam Slot Attendance Report",
            "primary_actors": [
              "Supervisor"
            ],
            "secondary_actors": [],
            "description": "Allows a supervisor to export a detailed attendance report for a finalized exam slot.",
            "related_business_rules": []
          }
        },
        "data_operator": {
          "user_management": {
            "UC-34": {
              "title": "Create User Account",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new user by providing core details (username, email, full name). The operator must then create a specialized profile (Student or Staff) for the user to define their specific attributes and assign their base role.",
              "related_business_rules": [
                "BR-01",
                "BR-04",
                "BR-05",
                "BR-07",
                "BR-26"
              ]
            },
            "UC-35": {
              "title": "View User Accounts",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view and search a list of all user accounts in the system.",
              "related_business_rules": [
                "BR-26"
              ]
            },
            "UC-36": {
              "title": "Update User Account Details",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the information of an existing user account.",
              "related_business_rules": [
                "BR-26",
                "BR-27"
              ]
            },
            "UC-37": {
              "title": "Update User Role Assignment",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to change the role assigned to a user, subject to system constraints.",
              "related_business_rules": [
                "BR-05",
                "BR-26",
                "BR-27"
              ]
            },
            "UC-38": {
              "title": "Disable/Enable User Account",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to change the status of a user account to active or inactive.",
              "related_business_rules": [
                "BR-03",
                "BR-26",
                "BR-27"
              ]
            }
          },
          "identity_management": {
            "UC-39": {
              "title": "View Pending Identity Submissions",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to view a queue of all identity registration and update requests that are awaiting manual review.",
              "related_business_rules": [
                "BR-09"
              ]
            },
            "UC-40": {
              "title": "Approve Identity Submission",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to review the details of an identity submission (facial video, ID card) and approve it.",
              "related_business_rules": [
                "BR-09",
                "BR-27"
              ]
            },
            "UC-41": {
              "title": "Reject Identity Submission",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [
                "Student"
              ],
              "description": "Allows the DOP to reject an identity submission, providing a reason for the rejection that is sent to the student.",
              "related_business_rules": [
                "BR-09",
                "BR-11",
                "BR-27"
              ]
            }
          },
          "academic_catalog": {
            "UC-42": {
              "title": "Create Major",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new academic Major to the system-wide catalog.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-43": {
              "title": "View Majors",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all Majors in the system.",
              "related_business_rules": []
            },
            "UC-44": {
              "title": "Update Major",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing Major.",
              "related_business_rules": [
                "BR-12",
                "BR-27"
              ]
            },
            "UC-45": {
              "title": "Delete Major Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Major from the system. The action will be blocked with a clear error message if the Major is still associated with any Subjects. This action requires the 'MAJOR_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-46": {
              "title": "Create Semester",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new academic semester with a name, code, start date, and end date.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-47": {
              "title": "View Semesters",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all semesters in the system.",
              "related_business_rules": []
            },
            "UC-48": {
              "title": "Update Semester",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing semester.",
              "related_business_rules": [
                "BR-12",
                "BR-27"
              ]
            },
            "UC-49": {
              "title": "Delete Semester Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Semester from the system. The action will be blocked with a clear error message if the Semester is still associated with any Classes. This action requires the 'SEMESTER_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-50": {
              "title": "Create Subject",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new academic Subject to the catalog, linking it to a Major.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-51": {
              "title": "View Subjects",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all Subjects in the system.",
              "related_business_rules": []
            },
            "UC-52": {
              "title": "Update Subject",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing Subject.",
              "related_business_rules": [
                "BR-12",
                "BR-27"
              ]
            },
            "UC-53": {
              "title": "Delete Subject Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Subject from the system. The action will be blocked with a clear error message if the Subject is still associated with any Classes. This action requires the 'SUBJECT_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-54": {
              "title": "Create Class",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new class, linking it to a subject and semester.",
              "related_business_rules": [
                "BR-12"
              ]
            },
            "UC-55": {
              "title": "View Classes",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all classes for a selected semester.",
              "related_business_rules": []
            },
            "UC-56": {
              "title": "Update Class",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing class.",
              "related_business_rules": [
                "BR-12",
                "BR-27"
              ]
            },
            "UC-57": {
              "title": "Delete Class Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Class from the system. The action will be blocked with a clear error message if the Class is still associated with any Slots or Enrollments. This action requires the 'CLASS_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-58": {
              "title": "Create Schedule/Slot",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to create a new schedule slot. If the slot category is 'LECTURE' or 'LECTURE_WITH_PT', a Class must be assigned. If the category is 'FINAL_EXAM', the slot is independent (no Class assigned) and a Semester must be directly assigned.",
              "related_business_rules": [
                "BR-15",
                "BR-16",
                "BR-17",
                "BR-34",
                "BR-NEW-01"
              ]
            },
            "UC-59": {
              "title": "View Schedules",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view the complete schedule for a class or semester.",
              "related_business_rules": []
            },
            "UC-60": {
              "title": "Update Schedule/Slot",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of a scheduled slot, subject to the logic defined by its category (class-based or independent).",
              "related_business_rules": [
                "BR-15",
                "BR-16",
                "BR-17",
                "BR-27",
                "BR-34"
              ]
            },
            "UC-61": {
              "title": "Delete Schedule/Slot Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Slot from the system. The action will be blocked with a clear error message if the Slot has any Attendance records or exam participants. This action requires the 'SLOT_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-62": {
              "title": "Add Student to Class Roster",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to enroll a student into a specific class. This manages participation for class-based slots only.",
              "related_business_rules": [
                "BR-13"
              ]
            },
            "UC-63": {
              "title": "Remove Student from Class Roster",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to unenroll a student from a class. This affects class-based slots only.",
              "related_business_rules": [
                "BR-14",
                "BR-27"
              ]
            },
            "UC-64": {
              "title": "Manage Exam Slot Participants",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to manage the list of participants for an independent final exam slot (where class_id is NULL). The workflow includes: selecting a slot, then selecting a subject that has been assigned to that slot, and then adding or removing individual students from that specific subject within the exam.",
              "related_business_rules": [
                "BR-38",
                "BR-39"
              ]
            },
            "UC-65": {
              "title": "Bulk Import Participants to Exam Slot",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to select an independent final exam slot and upload a CSV file containing (student_id, subject_code) pairs to perform mass registration of students to specific subjects within that exam slot.",
              "related_business_rules": [
                "BR-40"
              ]
            }
          },
          "infrastructure": {
            "UC-66": {
              "title": "Create Room",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to add a new physical room to the system.",
              "related_business_rules": []
            },
            "UC-67": {
              "title": "View Rooms",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all rooms in the system.",
              "related_business_rules": []
            },
            "UC-68": {
              "title": "Update Room",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing room.",
              "related_business_rules": [
                "BR-27"
              ]
            },
            "UC-69": {
              "title": "Delete Room Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Room from the system. The action will be blocked with a clear error message if the Room is still associated with any Cameras or Slots. This action requires the 'ROOM_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            },
            "UC-70": {
              "title": "Create Camera",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to register a new IP camera by providing its details and assigning it to a specific room.",
              "related_business_rules": []
            },
            "UC-71": {
              "title": "View Cameras",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a list of all registered cameras.",
              "related_business_rules": []
            },
            "UC-72": {
              "title": "Update Camera",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to edit the details of an existing camera, including re-assigning it to a different room.",
              "related_business_rules": [
                "BR-27"
              ]
            },
            "UC-73": {
              "title": "Delete Camera Permanently",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to permanently delete a Camera from the system. The action will be blocked with a clear error message if the Camera is still assigned to any Slots. This action requires the 'CAMERA_DELETE_HARD' permission.",
              "related_business_rules": [
                "BR-27",
                "BR-30"
              ]
            }
          },
          "data_management": {
            "UC-74": {
              "title": "Import Academic Data",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to bulk-upload academic data (schedules, rosters) for a semester.",
              "related_business_rules": []
            },
            "UC-75": {
              "title": "Export Finalized Attendance Results",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to export system-wide, finalized attendance results for a selected period.",
              "related_business_rules": []
            },
            "UC-76": {
              "title": "View System-Wide Reports",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to generate and view aggregate reports on attendance data across various dimensions.",
              "related_business_rules": []
            },
            "UC-77": {
              "title": "Search/Lookup Attendance Data",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to perform advanced searches for specific attendance records using a variety of filters.",
              "related_business_rules": []
            },
            "UC-78": {
              "title": "View Operational Audit Logs",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to view a historical log of business data changes, which includes detailed before-and-after values for updates.",
              "related_business_rules": [
                "BR-27"
              ]
            },
            "UC-79": {
              "title": "Bulk Enroll Students to Classes via CSV",
              "primary_actors": [
                "Data Operator"
              ],
              "secondary_actors": [],
              "description": "Allows the DOP to upload a CSV file containing a list of student-class pairings (e.g., student_id, class_code) to perform mass enrollment for a selected semester into classes. This is not used for independent final exams.",
              "related_business_rules": [
                "BR-13",
                "BR-27",
                "BR-37"
              ]
            }
          }
        },
        "system_admin": {
          "system_configuration": {
            "UC-80": {
              "title": "View System Configuration",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view all global, system-level settings.",
              "related_business_rules": [
                "BR-25"
              ]
            },
            "UC-81": {
              "title": "Update System Configuration",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to modify core system-level configurations to fine-tune system behavior.",
              "related_business_rules": [
                "BR-25",
                "BR-27"
              ]
            },
            "UC-82": {
              "title": "View System Logs",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view a comprehensive stream of system-wide activity logs for monitoring and troubleshooting.",
              "related_business_rules": []
            },
            "UC-83": {
              "title": "Export System Logs",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to export system logs for a specified time period for offline analysis or archival.",
              "related_business_rules": []
            }
          },
          "role_permission_management": {
            "UC-84": {
              "title": "View Role-Permission Mappings",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to view the current matrix that defines which permissions are granted to each user role.",
              "related_business_rules": [
                "BR-25"
              ]
            },
            "UC-85": {
              "title": "Update Role-Permission Mappings",
              "primary_actors": [
                "System Admin"
              ],
              "secondary_actors": [],
              "description": "Allows the System Admin to grant or revoke specific permissions for each role, controlling access to system functions.",
              "related_business_rules": [
                "BR-25",
                "BR-27"
              ]
            }
          }
        }
      },
      "cross_references": {
        "most_referenced_business_rules": [
          {
            "BR-27": "Critical business data changes must be logged in audit trail"
          },
          {
            "BR-25": "System configuration and role-permission changes require special permissions"
          },
          {
            "BR-09": "Identity submissions require manual approval"
          },
          {
            "BR-12": "Unique identifiers for academic entities"
          }
        ],
        "use_cases_by_complexity": {
          "high_complexity": [
            "UC-15",
            "UC-16",
            "UC-21",
            "UC-29",
            "UC-55",
            "UC-57"
          ],
          "medium_complexity": [
            "UC-19",
            "UC-27",
            "UC-31",
            "UC-37",
            "UC-38"
          ],
          "low_complexity": [
            "UC-01",
            "UC-02",
            "UC-07",
            "UC-10",
            "UC-40",
            "UC-44"
          ]
        }
      }
    }
  }
}