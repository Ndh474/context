system_context:
  project_info:
    project_code: "FUACS"
    project_name: "FU Attendance Checking Smart"

  project_overview:
    background: "An independent attendance and academic management system. FUACS serves as the Single Source of Record for all data related to classes, students, lecturers, and attendance results."
    goal: "Support login via Google and system accounts (username/password), class schedules, exam schedules, and smart attendance to assist lecturers."

  platform_definitions:
    platform_types:
      MOBILE_APP: "Mobile platform for iOS and Android"
      GENERAL_WEB: "Web platform"
      ADMIN_PORTAL: "Web platform (Admin Portal)"

    role_platform_mapping:
      Student: "GENERAL_WEB"
      Lecturer: "GENERAL_WEB"
      Supervisor: "GENERAL_WEB"
      Data_Operator: "ADMIN_PORTAL"

  authentication_and_role_mapping:
    mapping_method: "System Native"
    description: "Users are created and role-managed directly in the system by Data Operators. The primary login identifier (username) is defined as the Student ID or Employee ID. The system supports Google login (for email verification) and direct login using username/password. The system uses specialized profiles (student_profiles, staff_profiles) to manage specific attributes."

    role_assignment_rules: "SUPERVISOR or LECTURER roles cannot be assigned to users with the STUDENT role."

    access_control:
      on_missing_user: "deny_access_403"
      on_inactive_status: "deny_access_403"

  master_permission_catalog:
    USER_MANAGEMENT:
      USER_CREATE: "Create a new user account."
      USER_READ_LIST: "View the list of all users."
      USER_READ_DETAIL: "View detailed information of a user."
      USER_UPDATE_INFO: "Update user personal information (name, email)."
      USER_UPDATE_STATUS: "Deactivate or activate user account (soft delete)."
      USER_DELETE_HARD: "Permanently delete user account (dangerous action, requires consideration)."
      USER_ASSIGN_ROLES: "Assign or revoke roles from a user."

    ACADEMIC_CATALOG_MANAGEMENT:
      SEMESTER_CREATE: "Create a new semester."
      SEMESTER_READ: "View the list and details of semesters."
      SEMESTER_UPDATE: "Update semester information, including deactivating or activating it."
      SEMESTER_DELETE_HARD: "Permanently delete a semester. This action cannot be undone and will fail if related data (classes, etc.) still exists."
      MAJOR_CREATE: "Create a new major."
      MAJOR_READ: "View the list and details of majors."
      MAJOR_UPDATE: "Update major information, including deactivating or activating it."
      MAJOR_DELETE_HARD: "Permanently delete a major. This action cannot be undone and will fail if related data (subjects, etc.) still exists."
      SUBJECT_CREATE: "Create a new subject."
      SUBJECT_READ: "View the list and details of subjects."
      SUBJECT_UPDATE: "Update subject information, including deactivating or activating it."
      SUBJECT_DELETE_HARD: "Permanently delete a subject. This action cannot be undone and will fail if related data (classes, etc.) still exists."
      CLASS_CREATE: "Create a new class."
      CLASS_READ: "View the list and details of classes."
      CLASS_UPDATE: "Update class information, including deactivating or activating it."
      CLASS_DELETE_HARD: "Permanently delete a class. This action cannot be undone and will fail if related data (slots, enrollments, etc.) still exists."
      SLOT_CREATE: "Create a new lecture/exam slot."
      SLOT_READ: "View the list and details of lecture/exam slots."
      SLOT_UPDATE: "Update lecture/exam slot information, including cancelling (deactivating) it."
      SLOT_DELETE_HARD: "Permanently delete a lecture/exam slot. This action is dangerous and cannot be undone."
      ENROLLMENT_MANAGE: "Add or remove students from a class."
      SLOT_UPDATE_CATEGORY: "Update slot category (Lecturer can change LECTURE â†” LECTURE_WITH_PT)."
      SLOT_CREATE_FINAL_EXAM: "Create a new slot classified as a Final Exam."
      SLOT_UPDATE_FINAL_EXAM: "Update the details of an existing Final Exam slot."
      SLOT_DELETE_HARD_FINAL_EXAM: "Permanently delete a Final Exam slot."
      MAJOR_IMPORT: "Bulk import Majors via CSV."
      SUBJECT_IMPORT: "Bulk import Subjects via CSV."
      SEMESTER_IMPORT: "Bulk import Semesters via CSV."
      CLASS_IMPORT: "Bulk import Classes via CSV."
      SLOT_IMPORT: "Bulk import Slots via CSV."

    INFRASTRUCTURE_MANAGEMENT:
      ROOM_CREATE: "Create a new room."
      ROOM_READ: "View the list and details of rooms."
      ROOM_UPDATE: "Update room information, including deactivating or activating it."
      ROOM_DELETE_HARD: "Permanently delete a room. This action cannot be undone and will fail if related data (cameras, slots, etc.) still exists."
      ROOM_IMPORT: "HYPOTHESIS: Bulk import Rooms via CSV."
      CAMERA_CREATE: "Create a new camera and assign it to a room."
      CAMERA_READ: "View the list and details of cameras."
      CAMERA_UPDATE: "Update camera information, including deactivating or activating it."
      CAMERA_DELETE_HARD: "Permanently delete a camera. This action cannot be undone."
      CAMERA_IMPORT: "HYPOTHESIS: Bulk import Cameras via CSV."

    ATTENDANCE_MANAGEMENT:
      OWN_SCHEDULE_READ: "View personal schedule (teaching/exam/learning)."
      SLOT_SESSION_START: "Start an automated attendance session for a slot."
      SLOT_SESSION_RESCAN: "Trigger a re-scan for attendance."
      ATTENDANCE_ROSTER_READ: "View the roster and real-time attendance status of a slot."
      ATTENDANCE_STATUS_UPDATE_MANUAL: "Manually update attendance status for students."
      ATTENDANCE_REMARK_MANAGE: "Add, edit, delete attendance remarks."

    REPORTING_AND_DATA:
      REPORT_READ_OWN_SLOT: "View attendance reports for slots under own responsibility."
      REPORT_EXPORT_OWN_SLOT: "Export report files for slots under own responsibility."
      REPORT_READ_CLASS_SUMMARY: "View comprehensive attendance summary report for a class."
      REPORT_READ_SYSTEM_WIDE: "View system-wide summary reports."
      REPORT_EXPORT_ACADEMIC_DATA: "Export academic data (class lists, attendance results, etc.)."

    STUDENT_PERMISSIONS:
      OWN_ATTENDANCE_HISTORY_READ: "View own attendance history."

    GENERAL_PERMISSIONS:
      OWN_PROFILE_READ: "View own personal profile information."
      OWN_PASSWORD_UPDATE: "Change own password."

  role_definitions:
    DATA_OPERATOR:
      role_name: "Data Operations Staff"
      description: "The main operational role, responsible for all academic data and user account lifecycle management."
      platform: "ADMIN_PORTAL"
      # Note: Most hard delete permissions (*_DELETE_HARD) are intentionally NOT assigned for safety.
      # Exception: SLOT_DELETE_HARD_FINAL_EXAM is granted to allow DOP to manage exam schedules.
      # Soft delete (deactivate/activate) is the preferred method via *_UPDATE permissions.
      permissions:
        [
          "USER_CREATE",
          "USER_READ_LIST",
          "USER_READ_DETAIL",
          "USER_UPDATE_INFO",
          "USER_UPDATE_STATUS",
          "USER_ASSIGN_ROLES",
          "SEMESTER_CREATE",
          "SEMESTER_READ",
          "SEMESTER_UPDATE",
          "SEMESTER_IMPORT",
          "MAJOR_CREATE",
          "MAJOR_READ",
          "MAJOR_UPDATE",
          "MAJOR_IMPORT",
          "SUBJECT_CREATE",
          "SUBJECT_READ",
          "SUBJECT_UPDATE",
          "SUBJECT_IMPORT",
          "CLASS_CREATE",
          "CLASS_READ",
          "CLASS_UPDATE",
          "CLASS_IMPORT",
          "SLOT_CREATE",
          "SLOT_READ",
          "SLOT_UPDATE",
          "SLOT_IMPORT",
          "ENROLLMENT_MANAGE",
          "SLOT_CREATE_FINAL_EXAM",
          "SLOT_UPDATE_FINAL_EXAM",
          "SLOT_DELETE_HARD_FINAL_EXAM",
          "ATTENDANCE_ROSTER_READ",
          "ATTENDANCE_STATUS_UPDATE_MANUAL",
          "ATTENDANCE_REMARK_MANAGE",
          "ROOM_CREATE",
          "ROOM_READ",
          "ROOM_UPDATE",
          "ROOM_IMPORT",
          "CAMERA_CREATE",
          "CAMERA_READ",
          "CAMERA_UPDATE",
          "CAMERA_IMPORT",
          "REPORT_READ_SYSTEM_WIDE",
          "REPORT_EXPORT_ACADEMIC_DATA",
          "AUDIT_LOG_READ",
          "OWN_PROFILE_READ",
          "OWN_PASSWORD_UPDATE",
        ]

    LECTURER:
      role_name: "Lecturer"
      description: "Responsible for managing lecture sessions, monitoring class rosters, and managing attendance results."
      platform: "GENERAL_WEB"
      permissions:
        [
          "OWN_SCHEDULE_READ",
          "SLOT_SESSION_START",
          "SLOT_SESSION_RESCAN",
          "ATTENDANCE_ROSTER_READ",
          "ATTENDANCE_STATUS_UPDATE_MANUAL",
          "ATTENDANCE_REMARK_MANAGE",
          "REPORT_READ_OWN_SLOT",
          "REPORT_EXPORT_OWN_SLOT",
          "REPORT_READ_CLASS_SUMMARY",
          "REPORT_READ_SYSTEM_WIDE",
          "OWN_PROFILE_READ",
          "OWN_PASSWORD_UPDATE",
          "ROOM_READ",
          "CAMERA_READ",
          "SEMESTER_READ",
          "CLASS_READ",
          "MAJOR_READ",
          "SLOT_READ",
          "SUBJECT_READ",
          "SLOT_UPDATE_CATEGORY",
        ]

    SUPERVISOR:
      role_name: "Exam Supervisor"
      description: "Responsible for supervising exam sessions, initiating and managing attendance results for exams."
      platform: "GENERAL_WEB"
      permissions:
        [
          "OWN_SCHEDULE_READ",
          "SLOT_SESSION_START",
          "SLOT_SESSION_RESCAN",
          "ATTENDANCE_ROSTER_READ",
          "ATTENDANCE_STATUS_UPDATE_MANUAL",
          "ATTENDANCE_REMARK_MANAGE",
          "REPORT_READ_OWN_SLOT",
          "REPORT_EXPORT_OWN_SLOT",
          "REPORT_READ_SYSTEM_WIDE",
          "OWN_PROFILE_READ",
          "OWN_PASSWORD_UPDATE",
          "ROOM_READ",
          "CAMERA_READ",
          "SEMESTER_READ",
          "CLASS_READ",
          "MAJOR_READ",
          "SLOT_READ",
          "SUBJECT_READ",
        ]

    STUDENT:
      role_name: "Student"
      description: "Uses the system to track schedules, view attendance history, and send notifications."
      platform: "GENERAL_WEB"
      permissions:
        [
          "OWN_SCHEDULE_READ",
          "OWN_ATTENDANCE_HISTORY_READ",
          "OWN_PROFILE_READ",
          "OWN_PASSWORD_UPDATE",
          "ROOM_READ",
          "SEMESTER_READ",
          "CLASS_READ",
          "MAJOR_READ",
          "SLOT_READ",
          "SUBJECT_READ",
        ]

  function_catalog:
    common_functions:
      - "Role-based access control"
      - "Import/Export data"
      - "System notifications"
      - "Search & filter"
      - "Role-based dashboard"
      - "Reports & file export"

    student_functions: []

    lecturer_functions:
      - "View comprehensive attendance reports by class/semester"

    data_operator_functions:
      - "Manage Semesters"
      - "Manage academic catalogs"
      - "Receive and export attendance reports"
      - "Query & reconcile data"
      - "Manage user accounts"
      - "Manage slot enrollment"
      - "Export academic data"
      - "Manage Camera and Room catalogs"
      # Removed: View operational activity logs (out of scope)
      - "Manage Majors"
      - "Manage bulk student enrollments via CSV import"
      - "Bulk import student identity data (Photos + Vectors)"
      - "Bulk import academic catalog data (Semester, Major, Subject, Class, Slot)"
      - "HYPOTHESIS: Bulk import infrastructure data (Room, Camera)"

  screen_catalog:
    web_student_screens:
      SCR_STUDENT_LOGIN:
        title: "Login Screen"
        features:
          - "Google login"
          - "Username and Password login form"
          - "'Forgot Password?' link"

      SCR_STUDENT_DASHBOARD:
        title: "Home Screen/Dashboard"
        features:
          - "View upcoming lecture/exam slots"
          - "Shortcuts to main functions"

      SCR_STUDENT_SCHEDULE:
        title: "Schedule Screen"
        features:
          - "Semester selector"
          - "Filter Lecture/Exam schedule"
          - "View schedule in week/month format"
          - "Aggregates and displays a unified schedule from both class enrollments (LECTURE/LECTURE_WITH_PT) and independent exam registrations (FINAL_EXAM)."
          - "For FINAL_EXAM slots, the API queries through 'exam_slot_participants' and 'exam_slot_subjects' to display the exact Subject name(s) that the student must take the exam for in that slot."

      SCR_STUDENT_SLOT_DETAILS:
        title: "Slot Details Screen"
        features:
          - "View detailed slot information (including slot type: LECTURE or EXAM)"

      SCR_STUDENT_PROFILE:
        title: "Profile Screen"
        features:
          - "'Change Password' function"

      SCR_STUDENT_NOTIFICATIONS:
        title: "Notifications Inbox"
        features:
          - "System notifications feed (absence warnings, system alerts, etc.)"
          - "Filters: All | Absence warnings | System alerts"
          - "Unread indicator at notification level and filter level"
          - "View notification details"

      SCR_STUDENT_FORGOT_PASSWORD:
        title: "Forgot Password Screen"
        features:
          - "Email input form to receive reset link"
          - "'Send Request' button"

      SCR_STUDENT_RESET_PASSWORD:
        title: "Reset Password Screen"
        features:
          - "New password and confirm password input form"
          - "'Reset Password' button"

    web_lecturer_screens:
      SCR_LECTURER_LOGIN:
        title: "Login Screen"
        features:
          - "Google login"
          - "Username and Password login form"
          - "'Forgot Password?' link"

      SCR_LECTURER_SCHEDULE:
        title: "Schedule & Slots"
        features:
          - "View teaching schedule and exam supervision schedule by semester on a unified interface"
          - "Advanced filters to filter lecture/exam slots by multiple criteria, including 'Category' (slot_category: LECTURE, LECTURE_WITH_PT, FINAL_EXAM)"
          - "Open/Close slot"

      SCR_LECTURER_ROSTER:
        title: "Roster & Attendance"
        features:
          - "Dynamically loads the student roster based on slot type: from Class Enrollments (for LECTURE/LECTURE_WITH_PT) or from the independent Exam Participant list (for FINAL_EXAM slots)."
          - "Interface displays appropriate functions based on role (Lecturer, Supervisor)."
          - "Display camera names and connection status of all cameras in the assigned room"
          - "Interface updates attendance status in real-time based on the new processing logic (e.g., 'Present' status may revert to 'Not Yet' after a re-scan)."
          - "For each student marked 'present' automatically (from the first scan), display the captured evidence image next to their base avatar for quick visual comparison by the lecturer."
          - "NEW: For students in 'Not Yet' status, the interface must visually distinguish between those who have an associated evidence image and those who do not."
          - "Review/edit status"
          - "Add/Edit attendance remarks for each student"
          - "Multi-state 'Start Attendance / Re-scan' button to trigger scan sessions"
          - "Manual attendance edit window, requires mandatory reason (remark) input when changing status"
          - "Bulk update dialog for processing multiple student statuses at once"

      SCR_LECTURER_SLOT_DETAILS:
        title: "Slot Details"
        features:
          - "View slot information and settings"

      SCR_LECTURER_REPORTS:
        title: "Slot Reports"
        features:
          - "View/Export reports by slot/class"

      SCR_LECTURER_CLASS_REPORT:
        title: "Class Attendance Report Screen"
        features:
          - "Filter to select Semester and Class"
          - "Display summary report in table (matrix) format: students by rows, slots by columns"
          - "Display attendance status (Present/Absent) in table cells"
          - "Display calculated absence rate (%) for each student (based on LECTURE slots only)"
          - "Display exam eligibility status (e.g., 'Eligible', 'Ineligible') based on the system-configured rule"
          - "Visually highlight students who are ineligible for the exam"
          - "Function to export summary report to file (CSV, Excel)"
        notes:
          - "IMPORTANT: This report displays real-time attendance data for all slots (both LECTURE and EXAM) for the selected class."

    web_admin_portal_screens:
      SCR_ADMIN_LOGIN:
        title: "Login Screen"
        features:
          - "Google login"
          - "Username and Password login form"
          - "'Forgot Password?' link"

      SCR_ADMIN_DASHBOARD:
        title: "Admin Dashboard"
        features:
          - "Overview charts"
          - "Semester filter"
          - "Permission-based display"

      SCR_ADMIN_EXPORT:
        title: "Data Export Screen (Data Operator)"
        features:
          - "Interface to configure and execute academic data export (CSV, JSON, etc.)"
          - "View export history"

      SCR_ADMIN_CRUD_ACADEMIC:
        title: "CRUD Screens (Data Operator)"
        features:
          - "Manage Semesters, Majors, Subjects, and Classes (View list, Create, Edit, Update status)."
          - "On each respective management screen (e.g., Semester list, Class list), provide 'Import from CSV' and 'Export to CSV' buttons."
          - "The 'Import' button allows uploading a CSV file and shows a read-only list of error rows returned by the backend. No inline editing or iteration in UI."
          - "Manage Slots (Lecture/Exam Schedules) with conditional logic: LECTURE/LECTURE_WITH_PT slots require a Class. FINAL_EXAM slots require a Semester (class_id is NULL). This screen also has an 'Import Slots' button implementing UC-86 (single upload; show error rows only)."
          - "NEW: When creating/editing a FINAL_EXAM Slot, allow DOP to select and assign multiple Subjects to that slot (updates 'exam_slot_subjects' table)."
          - "Add/Remove students from a class (Roster Management for class-based slots only)."

      SCR_ADMIN_REPORTING:
        title: "Reporting & Lookup Screen (Data Operator)"
        features:
          - "Advanced search filters"
          - "View and export custom reports"

      # REMOVED: SCR_ADMIN_AUDIT_LOGS (Audit Log Viewer) - out of scope

      SCR_ADMIN_USER_MGMT:
        title: "User & Role Management (Data Operator)"
        features:
          - "Add/Edit/Delete accounts"
          - "Assign one or more roles to users (LECTURER, SUPERVISOR, STUDENT); includes constraint check to not assign SUPERVISOR/LECTURER to STUDENT"
          - "Does NOT edit permission catalog or Role-Permission mapping"
          - "Create specialized profiles (Student/Staff)"

      SCR_ADMIN_INFRA_MGMT:
        title: "Camera & Room Management (Data Operator)"
        features:
          - "Add/Edit/Delete room information"
          - "Add/Edit/Delete camera information (Name, RTSP connection string, Status)"
          - "Assign a camera to a room"
          - "View list of all cameras and rooms in the system"
          - "HYPOTHESIS: Add 'Import Rooms from CSV' button (single upload; show error rows only)."
          - "HYPOTHESIS: Add 'Import Cameras from CSV' button (single upload; show error rows only)."

      # REMOVED: SCR_SYSADMIN_CONFIG (System Admin Configuration) - out of scope

      # REMOVED: SCR_SYSADMIN_LOGS (System Admin Logs Viewer) - out of scope

      SCR_ADMIN_BULK_ENROLLMENT:
        title: "Bulk Student Enrollment (Class-based) Screen"
        features:
          - "Semester selector to choose the target semester."
          - "Interface to upload a CSV file containing class enrollment data (e.g., columns: student_id, class_id). NOTE: This screen is for class enrollments only, not for independent exams."
          - "Button to download a CSV template file to ensure correct formatting."
          - "After upload, display a read-only list of error rows returned by the backend."

      SCR_ADMIN_EXAM_PARTICIPANTS:
        title: "Independent Exam Participant Management"
        features:
          - "Semester selector to filter FINAL_EXAM slots (where class_id is NULL)."
          - "Slot selector to choose a specific independent exam slot."
          - "NEW: Subject filter (Dropdown) that displays only subjects assigned to the selected slot (from 'exam_slot_subjects' table)."
          - "Display a data table of students registered for the selected (Slot + Subject) pair (from 'exam_slot_participants' table)."
          - "Function to manually add a student (by student_id) to the selected (Slot + Subject) pair. System must validate business logic (e.g., is the student enrolled in this subject during the semester)."
          - "Function to remove a student from the list."
          - "Interface to upload a CSV file to bulk-import participants (implements UC-60). The CSV file must contain (student_id, subject_code)."
          - "Button to download CSV template (new template with 2 columns)."

      SCR_ADMIN_BULK_IDENTITY_IMPORT:
        title: "Bulk Identity Import (Data Operator)"
        features:
          - "Interface to upload a .CSV file (containing student_id list)"
          - "Interface to upload a .ZIP file (containing photos named by student_id, e.g., 'HE180001.jpg')"
          - "Button 'Start Import Job' to trigger background processing"
          - "A status table/log showing the result of the latest import jobs (e.g., 'Completed: 990/1000 successful', 'Failed: 10')"
          - "Ability to download error report for failed imports"

  complex_component_catalog:
    COMPLEX_SEMESTER_DATATABLE:
      description: "A reusable data table for displaying and managing semesters. Includes sorting, filtering, and pagination."
      required_features:
        - "CRUD operations on Semester data"

  attendance_system:
    attendance_mode:
      description: "The only attendance mode, activated by Lecturer (for lecture slots) or Supervisor (for exam slots). The system uses IP cameras pre-installed in classrooms to automatically recognize and record student presence. A Python middleware service processes video streams and sends results back to the system."

    face_recognition:
      decision_flow_summary: "Face scan results are processed based on the student's current state."
      outcomes:
        match: "Handle 'Match' (Scan finds student): If current status is 'Not Yet', remain 'Not Yet' but capture/update evidence image. If current status is 'Present', do nothing (no-op)."
        no_match: "Handle 'No Match' (Scan does not find student): If current status is 'Present', update status to 'Not Yet'. If current status is 'Not Yet', do nothing (no-op)."

    attendance_statuses:
      - "not_yet"
      - "present"
      - "absent"

    status_notes: "The system does not distinguish between 'excused absence' and 'unexcused absence' at the status level. All absences are recorded as 'absent'. Lecturers or Supervisors can use the remark function to provide context when necessary."

    slot_control:
      open_by: "Lecturer/Supervisor"
      editability_rules: "Lecturer/Supervisor can edit attendance results until 23:59:59 UTC of the slot date. After this time, the data will be locked for them. Exception cases need to be handled by Data Operator with ATTENDANCE_STATUS_UPDATE_MANUAL permission."
      bulk_update_logic: "Lecturers can use the bulk update feature to process multiple student attendance statuses at once. This is especially useful for handling students with 'not_yet' status after the attendance session."

    lecturer_ui_rules:
      description: "Rules on the lecturer/supervisor attendance screen."
      real_time_update: "Attendance status is updated in real-time as soon as the recognition service sends successful results."
      bulk_update_feature: "The system provides bulk update functionality for efficiently processing multiple student attendance records at once, with validation for mandatory remarks."

  technical_flows:
    evidence_cleanup_flow:
      title: "Temporary Attendance Evidence Cleanup Flow"
      description: "A scheduled job that runs periodically (e.g., daily) to delete old attendance evidence images and their corresponding database records from both regular and exam attendance tables to save storage space."
      steps:
        [
          "1. Trigger: The job is automatically triggered by a scheduler (e.g., cron) at a fixed time (e.g., 03:00 AM daily).",
          "2. Read Configuration: The job reads the value of 'attendance.evidence_retention_days' from system_configurations (e.g., 30 days).",
          "3. Scan for Old Regular Evidence: The job queries the 'regular_attendance_evidences' table to find all records older than the retention period.",
          "4. Delete Regular Evidence: For each old record found, the job deletes the corresponding image file and then the database record.",
          "5. Scan for Old Exam Evidence: The job queries the 'exam_attendance_evidences' table to find all records older than the retention period.",
          "6. Delete Exam Evidence: For each old record found, the job deletes the corresponding image file and then the database record.",
        ]

    face_identification_flow: "When a lecturer starts a scan session, the system retrieves the student list and assigned cameras. The Python service processes video streams and calls the Backend API to record results. For each scan, the system processes the result based on the student's current state (see 'face_recognition.outcomes' logic): 1) A 'No Match' on a 'Present' student will revert their status to 'Not Yet'. 2) A 'Match' on a 'Not Yet' student will update their evidence image but keep their status as 'Not Yet'. The system adds relevant events to the student's history record. This process does not overwrite old data."

    data_export_flow: "This is a manual flow performed by Data Operator. The user accesses the 'Data Export' screen on the Admin Portal, selects data type (e.g., attendance results), file format (CSV, JSON), and necessary filters. The system then generates the file and allows the user to download it for import into external systems like SIS/LMS."

    authentication_flow: "Users on all platforms (Web, Mobile) can log in with Google. Upon successful authentication, Google provides an email address. The FUACS system uses this email address to directly look up the corresponding user account that already exists in the system. If an active account with a matching email is found, the system grants a session token with the permissions assigned to that user. This flow is entirely based on email matching."

    system_notification_flow: "When a business event occurs (e.g., identity rejection), the system generates notification content (hardcoded in backend), creates a notification record and delivery record for the target user, and sends a push notification."

    username_password_auth_flow: "User enters username and password. Backend finds user by username, then uses a hashing algorithm (e.g., bcrypt) to compare the entered password with the password_hash stored in the database. If matched, grants session token."

    password_reset_flow: "User enters email. System creates a unique, time-limited reset token, saves it to the database, and sends an email containing the reset link. When the user accesses the link, the system validates the token, allows them to enter a new password, hashes and updates the password_hash, then invalidates the used token."

    daily_absence_calculation_flow:
      title: "Daily Absence Calculation and Notification Flow"
      description: "A scheduled job that runs automatically every day after midnight to ensure data consistency and timely notifications based on attendance records from the previous day."
      steps:
        - "1. Trigger: The job is automatically triggered by a scheduler (e.g., cron) at a fixed time daily (e.g., 00:05 AM)."
        - "2. Read Configuration: The job first reads the value of 'attendance.max_absence_percentage' from the system_configurations table to get the current threshold."
        - "3. Scan for Completed Slots: The job queries the database to find all lecture slots (slot_category IN ('LECTURE', 'LECTURE_WITH_PT')) that have ended within the previous calendar day (where end_time is between 00:00:00 and 23:59:59 of previous day)."
        - "4. Recalculate Absence Rates: For each class associated with the found slots, the job recalculates the current absence percentage for every enrolled student."
        - "5. Check Thresholds and Notify: The job checks if any student has crossed the 10%, 20%, or the configured maximum absence thresholds for the first time. If so, it generates and delivers a system notification to that student."

    bulk_identity_import_flow:
      title: "Bulk Identity Import Flow (Admin)"
      description: "A background job flow triggered by Data Operator to import student identity data (base photo and vector) in bulk."
      steps:
        - "1. Trigger: Data Operator uploads a CSV (student_id list) and a ZIP (photos named by student_id) via 'SCR_ADMIN_BULK_IDENTITY_IMPORT' and starts the job."
        - "2. Orchestration (Spring Boot): The main service receives the files, saves them temporarily, and starts an asynchronous job."
        - "3. Job Processing (Spring Boot):"
        - "  a. Unzip the ZIP file to a temporary directory."
        - "  b. Read the CSV file row by row (e.g., 'HE180001')."
        - "  c. For each student_id: Find the matching photo ('HE180001.jpg') in the temp directory."
        - "  d. Send the photo (binary) to the Python 'recognition_service' API."
        - "  e. (Python Service): Receives the photo, generates the embedding vector, and returns the vector to Spring Boot."
        - "  f. (Spring Boot): Uploads the original photo to cloud storage (e.g., S3) to get a URL."
        - "  g. Save results to Database: UPDATE 'student_profiles' SET 'base_photo_url' = [URL] AND INSERT INTO 'face_embeddings' (student_user_id, embedding_vector, is_active) VALUES (...)."
        - "  h. Log success or failure for this student."
        - "4. Cleanup (Spring Boot): After processing all rows, the job deletes the temporary CSV, ZIP, and the unzipped photo directory from the server's disk."
        - "5. Reporting: The job status is updated on the admin screen, allowing DOP to see the results."

    bulk_catalog_import_flow:
      title: "Simple Bulk Import Flow (Admin)"
      description: "Single-step CSV upload for catalog data (Majors, Subjects, Semesters, Classes, Slots, Rooms, Cameras). No inline editing or iteration in UI."
      steps:
        - "1. (FE) Upload CSV: DOP uploads a CSV file via the import dialog."
        - "2. (FE -> BE) Submit: FE sends the file (multipart/form-data) to the import API."
        - "3. (BE) Process & Partial Success: BE saves valid rows; invalid rows are skipped and collected as errors."
        - "4. (BE -> FE) Return Errors: Response contains ONLY error rows (e.g., [ { rowNumber: 5, error: '...' } ]). Empty array [] means full success."
        - "5. (FE) Display: FE displays the error rows read-only for user review/download."

  information_flows:
    - "Student â†” System: view schedule/slots; view attendance status"
    - "Lecturer â†” System: open/close slots; start automated attendance session; review/edit attendance status"
    - "Supervisor â†” System: open/close exam slots; start automated attendance session; review/edit attendance status"
    - "System â†’ External systems (SIS/LMS): export academic data and attendance results on demand"
    - "System â†” Python Recognition Service: send session start request; receive attendance results"
    - "System â†” Data Operations Staff: attendance reports, catalog management and data synchronization; approve identity registrations; manage user accounts; manage rooms and cameras"
    - "System â†” Google: login & basic profile"

  integrations:
    outbound_integrations:
      description: "FUACS shares data with external systems via manual export. API integration is a planned item for the future."
      methods:
        manual_export:
          formats: ["CSV", "JSON"]
          data_scopes:
            ["attendance_summary", "full_roster", "academic_catalogs"]
        api:
          status: "planned"
          endpoints: ["get_roster", "get_attendance_by_class"]

    integration_points:
      - "Dedicated IP camera system in classrooms (receive video stream via RTSP)"
      - "Python recognition service (communicate via API)"
      - "Google: login and basic profile"
      - "External systems (if any): Receive data from FUACS (currently export; API planned)"

    integration_method: "The system operates independently and is the source of original data. Data is shared with other systems via export function; API integration is planned for the future."

  data_policies:
    conflict_resolution:
      strategy: "Last-Write-Wins"
      granularity: "field-level"
      description: "The later updated value (by import or in-system operation) wins for each field. Priority rules between FUACS data and external systems will be discussed in detail later."

  data_model:
    slot_entity_definition:
      description: "Additional definition for the Slot entity to support business classification."
      fields:
        slot_category:
          type: "Varchar"
          required: true
          description: |
            Classifies the type and purpose of a slot. Combines slot type and exam component into a single field.

            Allowed Values:
            - 'LECTURE': Regular lecture session (teaching only)
            - 'LECTURE_WITH_PT': Lecture session with progress test (teaching + testing)
            - 'FINAL_EXAM': Final exam session (testing only)

            Lecturer Workflow:
            - DOP creates slots with slot_category = 'LECTURE' or 'FINAL_EXAM'
            - Lecturer can update slot_category: 'LECTURE' â†” 'LECTURE_WITH_PT'
            - Cannot change to/from 'FINAL_EXAM' (only DOP can manage final exams)

            Validation enforced at application layer.
          allowed_values: ["LECTURE", "LECTURE_WITH_PT", "FINAL_EXAM"]
        room_id:
          type: "Reference"
          target_entity: "Room"
          required: true
          description: "ID of the room where this slot takes place. Used to determine which camera to use."
        title:
          type: Varchar
          required: false
          description:
            The display name for the slot. Especially useful for exams to give them a specific title like
            'Progress Test 1 - Chapter 1-3'.
        description:
          type: Text
          required: false
          description: Optional detailed information or instructions about the slot, visible to students and staff.

    enrollment_entity_definition:
      description: "Definition of enrollment record."
      fields:
        is_enrolled:
          type: "Boolean"
          default: true
          description: "Enrollment status. When a student withdraws from a course, this field is updated to 'false'. This hides the student from future slots but preserves all enrollment and attendance history data for reporting and audit purposes."

  idempotency_policies:
    unique_constraints:
      - "enrollments: (class_id, student_user_id) is unique"
      - "attendance_records: (student_user_id, slot_id) is unique"
    notes:
      - "enrollments.is_enrolled field controls roster visibility"

    keys:
      slot_enrollment: "class_id + student_user_id"
      attendance: "student_user_id + slot_id"
      slot_announcement: "id (bigint)"
      pre_slot_message: "id (bigint)"

  assumptions:
    reconciliation_report: true
    idempotency_key: "slot_id + student_id"
    base_image_quality: "The system assumes that students will provide identity video/photos with sufficient quality for recognition. The system does not have input quality enforcement mechanisms."
    single_slot_assignment: "In the current version, each slot is assigned to one and only one staff member (Lecturer or Supervisor)."

  terminology_notes:
    principles:
      - "UI uses Vietnamese as primary; first occurrence in each screen/section may include English terminology in parentheses"
      - "Permissions use UPPER_SNAKE_CASE; concepts use snake_case"

    dictionary:
      slot:
        ui_label: "Slot"
        concept_key: "slot"
        description: "A unit of lecture or exam session in the schedule."

      roster:
        ui_label: "Roster"
        concept_key: "roster"
        description: "Student list of a slot used to monitor and review attendance status."

      supervisor:
        ui_label: "Supervisor"
        concept_key: "supervisor"
        description: "Person responsible for supervising and taking attendance for an exam slot."

      system_notification:
        ui_label: "System Notification"
        concept_key: "system_notification"
        description: "Notification issued by the system to target users."

      automated_attendance:
        ui_label: "Automated Attendance"
        description: "System automatically takes attendance via IP cameras."

      attendance_status_values:
        ui_label: "Attendance Statuses"
        values: ["not_yet", "present", "absent"]

    mappings:
      - ui_label: "System notification"
        concept: "system_notification"

  tech_stack:
    frontend:
      web:
        description: "Web platform for Students, Lecturers, Supervisors, and Admin"
        technology: "Next.js"
        ui_library: "shadcn/ui"
      # mobile_app is no longer used for Students
      # mobile_app:
      #   description: "(Deprecated) Mobile application"
      #   technology: "React Native"

    backend:
      main_service:
        description: "Main service handling business logic"
        technology: "Java (Spring Boot)"
        runtime: "JDK 21+"
      recognition_service:
        description: "Service handling face recognition"
        technology: "Python (FastAPI)"

    database:
      primary_database:
        technology: "PostgreSQL"
        extensions: ["pgvector"]

  implementation_decisions:
    description: "Documented decisions about implementation approaches and what NOT to implement. These decisions are final for current and near-future versions."

    backend_validation_only:
      - item: "Role Assignment Constraint (STUDENT cannot have LECTURER/SUPERVISOR)"
        decision: "Validate in Spring Boot application layer, NOT database constraint"
        reason: "More flexible, better error messages, easier to customize business logic"
        status: "FINAL - Do not suggest database triggers or constraints"

      - item: "Slot Type vs Exam Subcategory Validation"
        decision: "Check in backend service, NOT database CHECK constraint"
        reason: "Business logic may evolve, application-level validation is more maintainable"
        status: "FINAL - Do not suggest database constraints"

    explicitly_not_implemented:
      - item: "Maximum Students Per Class"
        decision: "NOT implemented - no capacity limits"
        reason: "No business requirement for class size limits"
        status: "SKIP - Do not suggest unless explicitly requested"

      - item: "Identity Submission Retry Limit"
        decision: "NOT implemented - unlimited submissions allowed"
        reason: "Not needed in current version, can add later if spam becomes an issue"
        status: "SKIP - Do not suggest unless explicitly requested"

      - item: "RTSP URL Encryption/Credential Separation"
        decision: "NOT implemented - store RTSP URLs as-is in database"
        reason: "Internal network only, security handled at network level, not application priority"
        status: "SKIP for current and near-future versions - Do not suggest security improvements"

      - item: "Real-time Performance Specifications"
        decision: "NOT specified - use framework defaults"
        reason: "Premature optimization, will tune based on actual load testing results"
        status: "SKIP - Do not suggest performance specs until load testing"

      - item: "Link Password to Google Account"
        decision: "NOT implemented - Google-only accounts remain Google-only"
        reason: "Not a priority feature, users can use password reset if needed"
        status: "SKIP - Do not suggest unless explicitly requested"

      - item: "Attendance History Table"
        decision: "NOT implemented - use operational_audit_logs for history"
        reason: "Audit logs already provide complete history, no need for duplicate table"
        status: "FINAL - Do not suggest separate history table"

      - item: "System Admin Role/Permission Management Use Cases"
        decision: "NOT documented as separate use cases"
        reason: "Low-level admin functions, permissions exist but detailed UCs not needed"
        status: "SKIP - Do not suggest adding these UCs"

      - item: "Student View Exam Eligibility Status Use Case"
        decision: "Feature exists but NOT documented as separate UC"
        reason: "Handled in backend logic, no dedicated UI screen needed"
        status: "SKIP - Do not suggest adding this UC"

    slot_management_clarifications:
      - item: "Slot Cancellation"
        decision: "Only Data Operator can cancel slots (set is_active = false)"
        reason: "Slots are academic data managed by DOP, not by Lecturers"
        status: "FINAL - Lecturers cannot cancel slots, do not suggest this feature"

    validation_and_constraints_clarifications:
      - item: "Password Reset Token Status Tracking"
        decision: "NOT implemented - rely on expires_at only"
        reason: "Token expiration is sufficient for security. No need for additional is_used or used_at fields. Tokens are single-use by design and expire quickly."
        status: "SKIP - Do not suggest adding status tracking fields"

      - item: "Camera Availability Validation on Slot Creation"
        decision: "NOT implemented - no validation for room having cameras"
        reason: "Cameras can be added after slot creation. Validation would be too restrictive for scheduling flexibility. System will handle missing cameras gracefully at runtime."
        status: "SKIP - Do not suggest adding camera availability validation"

      - item: "attendance_records.recorded_at Index"
        decision: "NOT implemented - no index on recorded_at field"
        reason: "No current use case requires querying by recorded_at. Existing indexes on slot_id and student_user_id are sufficient for current requirements."
        status: "SKIP - Do not suggest adding this index unless specific use case emerges"

    timezone_and_scheduling_clarifications:
      - item: "Daily Absence Calculation Job Timezone"
        decision: "NOT explicitly documented in requirements"
        reason: "Implementation detail to be determined during development. All database timestamps are UTC. Job scheduling timezone will be configured in deployment environment."
        status: "SKIP - Implementation detail, not a requirements concern"

  to_be_discussed_or_backlog:
    - "Dashboard Design: Define KPIs displayed for each role"
    - "Standardize reasons/forms: If upgrading 'Slot Announcement' to a standardized approval (request) flow in the future"
    - "API Integration: Define scope/security/throttling/response format for planned endpoints"
    - "Conflict resolution with external systems (SIS/LMS): Priority rules for data overwrite when importing"
    - "Identity Re-registration details: Consider policy 'only 1 pending request per type' and related UX"
    - "Mobile for Lecturers: Evaluate needs and scope if expanding"
    - "Upgrade Backend-Service communication mechanism: Research and transition communication mechanism from 'Direct API Call' to 'Message Queue' (e.g., RabbitMQ) to increase reliability and scalability of the system when deployed at large scale"

  notes:
    - "All data is managed and filtered by Semester"
    - "The primary platform for Lecturers & Supervisors is Web. Mobile app development for these roles is being considered to optimize experience"
    - "User accounts are created and managed directly in the system by Data Operator. Google login is used for email verification"

  in_scope_functions:
    slot_interactions: "Lecturers/TAs add remarks to attendance records; Students view slot information."
