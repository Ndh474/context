{
  "project_metadata": {
    "name": "frontend-web",
    "version": "0.1.0",
    "status_document_version": "v3.2.0",
    "last_updated": "2025-10-07T13:45:00Z",
    "description": "FUACS - Frontend Web Application Implementation Manifest. This document reflects the exact state of the implemented codebase, not a project plan.",
    "branch": "hieund/feature/setup",
    "platforms": [
      "web_lecturer",
      "web_admin_portal"
    ],
    "current_phase": "initial_setup"
  },
  "technology_stack": {
      "framework": {
        "name": "Next.js",
        "version": "15.5.4"
      },
    "ui_framework": {
      "name": "React",
      "version": "19.1.0"
    },
    "styling": {
      "primary": "Tailwind CSS",
      "ui_library": "shadcn/ui",
      "icon_library": "Lucide React",
      "theme_system": "next-themes",
      "utility_classes": [
        "clsx",
        "tailwind-merge"
      ]
    },
    "state_management": {
      "server_state": "@tanstack/react-query",
      "client_state": "zustand",
      "form_validation": "zod",
      "form_handling": "react-hook-form"
    },
    "http_client": {
      "library": "axios"
    },
    "authentication": {
      "oauth": "@react-oauth/google",
      "notes": "Google Identity Services used via @react-oauth/google with client ID sourced from NEXT_PUBLIC_GOOGLE_CLIENT_ID."
    },
    "ui_components": {
      "notifications": "sonner"
    },
    "type_system": {
      "language": "TypeScript",
      "validation": "zod"
    }
  },
  "architecture_patterns": {
    "data_flow_architecture": {
      "description": "Three-layer data flow with type-safe validation at the boundaries.",
      "layers": [
        {
          "name": "Data Contract Layer (Validation)",
          "files": [
            "lib/zod-schemas.ts"
          ],
          "responsibility": "Defines data contracts and validation rules using Zod schemas."
        },
        {
          "name": "Type Definition Layer (Typing)",
          "files": [
            "types/index.ts"
          ],
          "responsibility": "Derives static TypeScript types from Zod schemas for full type safety."
        },
        {
          "name": "Transport Layer (API Comms)",
          "files": [
            "lib/api-axios.ts",
            "lib/auth.ts"
          ],
          "responsibility": "Handles API communication, authentication, and error handling."
        }
      ]
    },
    "component_architecture": {
      "description": "Provider-based architecture for wrapping the application with global context.",
      "providers": [
        {
          "name": "AppProviders",
          "file": "components/providers/app-providers.tsx",
          "responsibility": "Root provider that composes GoogleOAuthProvider (when client ID is set), ThemeProvider, and QueryProvider."
        },
        {
          "name": "ThemeProvider",
          "file": "components/providers/theme-provider.tsx",
          "responsibility": "Manages theme (light/dark/system)."
        },
        {
          "name": "QueryProvider",
          "file": "components/providers/query-provider.tsx",
          "responsibility": "Configures React Query client and devtools."
        }
      ]
    }
  },
  "data_models": {
    "implemented_entities": [
      {
        "name": "Semester",
        "db_table": "semesters",
        "related_business_rules": [
          "BR-12"
        ],
        "related_files": {
          "schema_definition": "lib/zod-schemas.ts",
          "type_definitions": "types/index.ts",
          "api_endpoints": "lib/constants.ts",
          "query_keys": "lib/constants.ts",
          "react_query_hooks": "hooks/api/useSemesters.ts"
        },
        "operations": [
          "CRUD",
          "Validation",
          "Type Safety"
        ]
      }
    ]
  },
  "api_integration": {
    "authentication": {
      "method": "JWT Bearer Token",
      "storage": "localStorage",
      "auto_redirect_on_401": "conditional",
      "redirect_target": "/login",
      "providers": [
        "Username/password form",
        "Google Identity Services (OAuth)"
      ],
      "keys": {
        "access": "fuacs-auth-token",
        "refresh": "fuacs-refresh-token",
        "user": "fuacs-auth-user"
      },
      "auto_redirect_notes": "401 responses from authenticated API calls clear the session and route to /login; login failures keep the user on the form; Google login exchanges the Google ID token for FUACS JWT and mirrors inactive/not-found error handling."
    },
    "caching_strategy": {
      "library": "@tanstack/react-query",
      "stale_time": "5 minutes",
      "cache_invalidation": "Automatic on mutations via queryClient.invalidateQueries"
    }
  },
  "ui_components": {
    "base_components": [
      {
        "file": "components/ui/button.tsx",
        "name": "Button",
        "purpose": "Primary action button primitive"
      },
      {
        "file": "components/ui/dropdown-menu.tsx",
        "name": "DropdownMenu",
        "purpose": "Menu trigger for theme toggle"
      },
      {
        "file": "components/ui/input.tsx",
        "name": "Input",
        "purpose": "Text input field used across forms"
      },
      {
        "file": "components/ui/form.tsx",
        "name": "Form",
        "purpose": "React Hook Form bindings and field primitives"
      },
      {
        "file": "components/ui/label.tsx",
        "name": "Label",
        "purpose": "Accessible form labels"
      },
      {
        "file": "components/ui/card.tsx",
        "name": "Card",
        "purpose": "Container for auth layouts"
      },
      {
        "file": "components/ui/separator.tsx",
        "name": "Separator",
        "purpose": "Divider used in auth forms"
      },
      {
        "file": "components/ui/sonner.tsx",
        "name": "Sonner",
        "purpose": "Toast notifications"
      }
    ],
    "custom_components": [
      {
        "file": "components/mode-toggle.tsx",
        "dependencies": {
          "components": [
            "Button",
            "DropdownMenu"
          ]
        },
        "name": "ModeToggle",
        "purpose": "Theme switching (light/dark/system)"
      },
      {
        "file": "components/auth/login-form.tsx",
        "dependencies": {
          "hooks": [
            "useLogin"
          ],
          "components": [
            "Form",
            "Input",
            "Button",
            "Separator",
            "Label"
          ]
        },
        "name": "LoginForm",
        "purpose": "Username/password form with validation and Google CTA"
      }
    ]
  },
  "feature_status": [
    {
      "id": "FEAT-UI-INFRASTRUCTURE",
      "feature": "UI Infrastructure and Theming",
      "status": {
        "overall": "implemented",
        "data_layer": "implemented",
        "ui_layer": "implemented"
      },
      "use_case_ids": [],
      "related_files": [
        {
          "file": "app/layout.tsx",
          "purpose": "Root layout with providers"
        },
        {
          "file": "components/providers/app-providers.tsx",
          "purpose": "Root provider composition"
        },
        {
          "file": "components/providers/theme-provider.tsx",
          "purpose": "Theme provider"
        },
        {
          "file": "components/providers/query-provider.tsx",
          "purpose": "React Query provider"
        },
        {
          "file": "components/mode-toggle.tsx",
          "purpose": "Theme switching component"
        },
        {
          "file": "lib/utils.ts",
          "purpose": "Styling utility (cn function)"
        }
      ],
      "ai_notes": "The core infrastructure for UI rendering, theming, and state management is fully operational."
    },
    {
      "id": "FEAT-USER-AUTHENTICATION",
      "feature": "User Authentication System",
      "status": {
        "overall": "implemented",
        "data_layer": "implemented",
        "ui_layer": "implemented"
      },
      "use_case_ids": [
        "UC-01",
        "UC-02",
        "UC-04",
        "UC-05",
        "UC-06"
      ],
      "related_files": [
        {
          "file": "lib/api-axios.ts",
          "purpose": "JWT authentication interceptors with conditional redirect"
        },
        {
          "file": "lib/auth.ts",
          "purpose": "Token management utilities (access, refresh, user cache)"
        },
        {
          "file": "lib/constants.ts",
          "purpose": "Authentication constants and API endpoints"
        },
        {
          "file": "hooks/api/useAuth.ts",
          "purpose": "React Query mutations for login/refresh/logout/Google login with aligned error handling"
        },
        {
          "file": "components/auth/login-form.tsx",
          "purpose": "Login form UI, validation, and Google Identity button integration"
        },
        {
          "file": "app/login/page.tsx",
          "purpose": "Login screen layout"
        },
        {
          "file": "app/forgot-password/page.tsx",
          "purpose": "Forgot password placeholder screen"
        },
        {
          "file": "components/providers/app-providers.tsx",
          "purpose": "Wraps GoogleOAuthProvider, ThemeProvider, and QueryProvider"
        },
        {
          "file": "lib/zod-schemas.ts",
          "purpose": "Defines Google login payload schema"
        }
      ],
      "ai_notes": "Login UI now supports both username/password and Google Identity Services; Google login shares the same toast-based feedback for inactive or missing accounts. Password reset flow remains a placeholder."
    },
    {
      "id": "FEAT-SEMESTER-MANAGEMENT",
      "feature": "Semester Management",
      "status": {
        "overall": "in-progress",
        "data_layer": "implemented",
        "ui_layer": "planned"
      },
      "use_case_ids": [
        "UC-48",
        "UC-49",
        "UC-50",
        "UC-51"
      ],
      "related_files": [
        {
          "file": "hooks/api/useSemesters.ts",
          "purpose": "React Query hooks for semester CRUD operations"
        },
        {
          "file": "lib/zod-schemas.ts",
          "purpose": "Semester validation schemas (Data Contract)"
        },
        {
          "file": "types/index.ts",
          "purpose": "Semester TypeScript types"
        },
        {
          "file": "lib/constants.ts",
          "purpose": "Semester API endpoints and query keys"
        }
      ],
      "ai_notes": "The data layer, including hooks, validation, and types, is fully implemented. However, no UI screens or components for managing semesters have been created yet."
    }
  ],
  "screen_status": [
    {
      "id": "SCR-HOME-PAGE",
      "name": "Home Page",
      "platform": "web_lecturer",
      "sot_ref": null,
      "main_route": "/",
      "main_component": "app/page.tsx",
      "dependencies": {
        "features": [
          "FEAT-UI-INFRASTRUCTURE"
        ],
        "components": [
          "ModeToggle"
        ],
        "hooks": []
      },
      "ai_notes": "A basic home page demonstrating the theme switching functionality. Serves as the root entry point."
    },
    {
      "id": "SCR-LOGIN",
      "name": "Login Screen",
      "platform": "web_lecturer",
      "sot_ref": "UC-01",
      "main_route": "/login",
      "main_component": "app/login/page.tsx",
      "dependencies": {
        "features": [
          "FEAT-USER-AUTHENTICATION"
        ],
        "components": [
          "LoginForm",
          "Button",
          "Input",
          "Form",
          "Separator"
        ],
        "hooks": [
          "useLogin"
        ]
      },
      "ai_notes": "Provides username/password login with toast feedback and a functioning Google Sign-In button backed by useGoogleLogin."
    },
    {
      "id": "SCR-FORGOT-PASSWORD",
      "name": "Forgot Password Screen",
      "platform": "web_lecturer",
      "sot_ref": "UC-04",
      "main_route": "/forgot-password",
      "main_component": "app/forgot-password/page.tsx",
      "dependencies": {
        "features": [
          "FEAT-USER-AUTHENTICATION"
        ],
        "components": [
          "Button"
        ],
        "hooks": []
      },
      "ai_notes": "Placeholder messaging directing users to administrator support until backend flow is available."
    }
  ],
  "ai_development_guidelines": {
    "documentation_maintenance": "After implementing a new feature, update this manifest file to reflect the new state of the codebase.",
    "api_integration_workflow": "For new entities, first define endpoints in endpoints.ts, then schemas in zod-schemas.ts, types in index.ts, and finally create React Query hooks in hooks/api/.",
    "component_development": "Build new components by composing existing base components from components/ui/. Place custom, feature-specific components in a structured manner."
  },
  "changelog": [
    {
      "timestamp": "2025-10-06T10:00:00Z",
      "agent_id": "gemini-code-assistant",
      "version": "v3.0.0",
      "summary": "Refactored manifest to a strict 'as-built' state, removing planned items and introducing detailed status objects.",
      "changes": [
        "Removed all 'planned' features and screens to reflect only implemented code.",
        "Replaced simple 'status' string with a detailed object: { overall, data_layer, ui_layer }.",
        "Updated features (Semester, Auth) to 'in-progress' to accurately represent their state (data layer done, UI layer not done).",
        "Added component dependency tracking within the 'ui_components' section.",
        "Regenerated the entire file based on a comprehensive analysis of the provided codebase."
      ],
      "impact": "The manifest is now a highly accurate and reliable source of truth for the current implementation state, optimized for AI-driven development workflows."
    },
    {
      "timestamp": "2025-10-06T22:15:00Z",
      "agent_id": "openai-codex",
      "version": "v3.1.0",
      "summary": "Implemented login UI and auth session management.",
      "changes": [
        "Added shadcn-based login form with Google button and forgot password placeholder.",
        "Introduced React Query auth mutations with conditional 401 handling and refresh token storage.",
        "Updated manifest feature statuses and screen catalog for authentication flows."
      ],
      "impact": "Frontend now supports username/password login end-to-end, exposing screens required for UC-01/UC-04."
    },
    {
      "timestamp": "2025-10-07T13:45:00Z",
      "agent_id": "openai-codex",
      "version": "v3.2.0",
      "summary": "Integrated Google Identity Services for authentication.",
      "changes": [
        "Added Google OAuth provider wiring in AppProviders when NEXT_PUBLIC_GOOGLE_CLIENT_ID is set.",
        "Extended authentication hook with useGoogleLogin mutation and aligned error handling for inactive or missing accounts.",
        "Updated login form to render the Google Sign-In button and manage pending state.",
        "Documented new environment requirement and updated feature/screen status notes."
      ],
      "impact": "Users can authenticate with Google ID tokens and receive consistent feedback with the existing username/password flow."
    }
  ]
}
